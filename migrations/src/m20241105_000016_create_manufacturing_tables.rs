use sea_orm_migration::prelude::*;

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .create_table(
                Table::create()
                    .table(ManufacturingBoms::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(ManufacturingBoms::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBoms::ProductId)
                            .uuid()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBoms::ItemMasterId)
                            .big_integer()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBoms::BomNumber)
                            .string()
                            .not_null(),
                    )
                    .col(ColumnDef::new(ManufacturingBoms::Name).string().not_null())
                    .col(ColumnDef::new(ManufacturingBoms::Description).text().null())
                    .col(
                        ColumnDef::new(ManufacturingBoms::Revision)
                            .string_len(64)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBoms::LifecycleStatus)
                            .string_len(32)
                            .not_null()
                            .default("draft"),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBoms::Metadata)
                            .json_binary()
                            .null(),
                    )
                    .col(ColumnDef::new(ManufacturingBoms::CreatedBy).uuid().null())
                    .col(ColumnDef::new(ManufacturingBoms::UpdatedBy).uuid().null())
                    .col(
                        ColumnDef::new(ManufacturingBoms::CreatedAt)
                            .timestamp()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBoms::UpdatedAt)
                            .timestamp()
                            .not_null(),
                    )
                    .index(
                        Index::create()
                            .name("idx_manufacturing_boms_product_revision")
                            .col(ManufacturingBoms::ProductId)
                            .col(ManufacturingBoms::Revision)
                            .unique(),
                    )
                    .index(
                        Index::create()
                            .name("idx_manufacturing_boms_number")
                            .col(ManufacturingBoms::BomNumber)
                            .unique(),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .table(ManufacturingBomComponents::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(ManufacturingBomComponents::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBomComponents::BomId)
                            .uuid()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBomComponents::ComponentProductId)
                            .uuid()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBomComponents::ComponentItemId)
                            .big_integer()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBomComponents::Quantity)
                            .decimal()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBomComponents::UnitOfMeasure)
                            .string_len(32)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBomComponents::Position)
                            .string_len(64)
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBomComponents::Notes)
                            .text()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBomComponents::CreatedAt)
                            .timestamp()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBomComponents::UpdatedAt)
                            .timestamp()
                            .not_null(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .from(
                                ManufacturingBomComponents::Table,
                                ManufacturingBomComponents::BomId,
                            )
                            .to(ManufacturingBoms::Table, ManufacturingBoms::Id)
                            .on_delete(ForeignKeyAction::Cascade),
                    )
                    .index(
                        Index::create()
                            .name("idx_manufacturing_bom_components_bom_id")
                            .col(ManufacturingBomComponents::BomId),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .table(ManufacturingBomAudits::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(ManufacturingBomAudits::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBomAudits::BomId)
                            .uuid()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingBomAudits::EventType)
                            .string_len(64)
                            .not_null(),
                    )
                    .col(ColumnDef::new(ManufacturingBomAudits::UserId).uuid().null())
                    .col(ColumnDef::new(ManufacturingBomAudits::Notes).text().null())
                    .col(
                        ColumnDef::new(ManufacturingBomAudits::EventAt)
                            .timestamp()
                            .not_null(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .from(ManufacturingBomAudits::Table, ManufacturingBomAudits::BomId)
                            .to(ManufacturingBoms::Table, ManufacturingBoms::Id)
                            .on_delete(ForeignKeyAction::Cascade),
                    )
                    .index(
                        Index::create()
                            .name("idx_manufacturing_bom_audits_bom_id")
                            .col(ManufacturingBomAudits::BomId),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .table(ManufacturingWorkOrders::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(ManufacturingWorkOrders::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrders::WorkOrderNumber)
                            .string()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrders::ProductId)
                            .uuid()
                            .not_null(),
                    )
                    .col(ColumnDef::new(ManufacturingWorkOrders::BomId).uuid().null())
                    .col(
                        ColumnDef::new(ManufacturingWorkOrders::WorkCenterId)
                            .string_len(64)
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrders::AssignedTo)
                            .uuid()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrders::Status)
                            .string_len(32)
                            .not_null()
                            .default("planned"),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrders::Priority)
                            .string_len(16)
                            .not_null()
                            .default("normal"),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrders::QuantityToBuild)
                            .decimal()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrders::QuantityCompleted)
                            .decimal()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrders::ScheduledStart)
                            .timestamp()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrders::ScheduledEnd)
                            .timestamp()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrders::ActualStart)
                            .timestamp()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrders::ActualEnd)
                            .timestamp()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrders::CreatedAt)
                            .timestamp()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrders::UpdatedAt)
                            .timestamp()
                            .not_null(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .from(
                                ManufacturingWorkOrders::Table,
                                ManufacturingWorkOrders::BomId,
                            )
                            .to(ManufacturingBoms::Table, ManufacturingBoms::Id)
                            .on_delete(ForeignKeyAction::SetNull),
                    )
                    .index(
                        Index::create()
                            .name("idx_manufacturing_work_orders_number")
                            .col(ManufacturingWorkOrders::WorkOrderNumber)
                            .unique(),
                    )
                    .index(
                        Index::create()
                            .name("idx_manufacturing_work_orders_product")
                            .col(ManufacturingWorkOrders::ProductId),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .table(ManufacturingWorkOrderMaterials::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderMaterials::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderMaterials::WorkOrderId)
                            .uuid()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderMaterials::ComponentId)
                            .uuid()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderMaterials::ReservedQuantity)
                            .decimal()
                            .not_null()
                            .default(0),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderMaterials::ConsumedQuantity)
                            .decimal()
                            .not_null()
                            .default(0),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderMaterials::InventoryReservationId)
                            .uuid()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderMaterials::CreatedAt)
                            .timestamp()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderMaterials::UpdatedAt)
                            .timestamp()
                            .not_null(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .from(
                                ManufacturingWorkOrderMaterials::Table,
                                ManufacturingWorkOrderMaterials::WorkOrderId,
                            )
                            .to(ManufacturingWorkOrders::Table, ManufacturingWorkOrders::Id)
                            .on_delete(ForeignKeyAction::Cascade),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .from(
                                ManufacturingWorkOrderMaterials::Table,
                                ManufacturingWorkOrderMaterials::ComponentId,
                            )
                            .to(
                                ManufacturingBomComponents::Table,
                                ManufacturingBomComponents::Id,
                            )
                            .on_delete(ForeignKeyAction::Cascade),
                    )
                    .index(
                        Index::create()
                            .name("idx_manufacturing_work_order_materials_wo")
                            .col(ManufacturingWorkOrderMaterials::WorkOrderId),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .table(ManufacturingWorkOrderTasks::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderTasks::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderTasks::WorkOrderId)
                            .uuid()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderTasks::Sequence)
                            .integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderTasks::TaskName)
                            .string()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderTasks::Status)
                            .string_len(32)
                            .not_null()
                            .default("pending"),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderTasks::EstimatedHours)
                            .decimal()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderTasks::ActualHours)
                            .decimal()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderTasks::AssignedTo)
                            .uuid()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderTasks::StartedAt)
                            .timestamp()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderTasks::CompletedAt)
                            .timestamp()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderTasks::Notes)
                            .text()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderTasks::CreatedAt)
                            .timestamp()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderTasks::UpdatedAt)
                            .timestamp()
                            .not_null(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .from(
                                ManufacturingWorkOrderTasks::Table,
                                ManufacturingWorkOrderTasks::WorkOrderId,
                            )
                            .to(ManufacturingWorkOrders::Table, ManufacturingWorkOrders::Id)
                            .on_delete(ForeignKeyAction::Cascade),
                    )
                    .index(
                        Index::create()
                            .name("idx_manufacturing_work_order_tasks_wo")
                            .col(ManufacturingWorkOrderTasks::WorkOrderId),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .create_table(
                Table::create()
                    .table(ManufacturingWorkOrderNotes::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderNotes::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderNotes::WorkOrderId)
                            .uuid()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderNotes::AuthorId)
                            .uuid()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderNotes::Body)
                            .text()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ManufacturingWorkOrderNotes::CreatedAt)
                            .timestamp()
                            .not_null(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .from(
                                ManufacturingWorkOrderNotes::Table,
                                ManufacturingWorkOrderNotes::WorkOrderId,
                            )
                            .to(ManufacturingWorkOrders::Table, ManufacturingWorkOrders::Id)
                            .on_delete(ForeignKeyAction::Cascade),
                    )
                    .index(
                        Index::create()
                            .name("idx_manufacturing_work_order_notes_wo")
                            .col(ManufacturingWorkOrderNotes::WorkOrderId),
                    )
                    .to_owned(),
            )
            .await?;

        Ok(())
    }

    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .drop_table(
                Table::drop()
                    .table(ManufacturingWorkOrderNotes::Table)
                    .if_exists()
                    .to_owned(),
            )
            .await?;

        manager
            .drop_table(
                Table::drop()
                    .table(ManufacturingWorkOrderTasks::Table)
                    .if_exists()
                    .to_owned(),
            )
            .await?;

        manager
            .drop_table(
                Table::drop()
                    .table(ManufacturingWorkOrderMaterials::Table)
                    .if_exists()
                    .to_owned(),
            )
            .await?;

        manager
            .drop_table(
                Table::drop()
                    .table(ManufacturingWorkOrders::Table)
                    .if_exists()
                    .to_owned(),
            )
            .await?;

        manager
            .drop_table(
                Table::drop()
                    .table(ManufacturingBomAudits::Table)
                    .if_exists()
                    .to_owned(),
            )
            .await?;

        manager
            .drop_table(
                Table::drop()
                    .table(ManufacturingBomComponents::Table)
                    .if_exists()
                    .to_owned(),
            )
            .await?;

        manager
            .drop_table(
                Table::drop()
                    .table(ManufacturingBoms::Table)
                    .if_exists()
                    .to_owned(),
            )
            .await?;

        Ok(())
    }
}

#[derive(Iden)]
enum ManufacturingBoms {
    Table,
    Id,
    ProductId,
    ItemMasterId,
    BomNumber,
    Name,
    Description,
    Revision,
    LifecycleStatus,
    Metadata,
    CreatedBy,
    UpdatedBy,
    CreatedAt,
    UpdatedAt,
}

#[derive(Iden)]
enum ManufacturingBomComponents {
    Table,
    Id,
    BomId,
    ComponentProductId,
    ComponentItemId,
    Quantity,
    UnitOfMeasure,
    Position,
    Notes,
    CreatedAt,
    UpdatedAt,
}

#[derive(Iden)]
enum ManufacturingBomAudits {
    Table,
    Id,
    BomId,
    EventType,
    UserId,
    Notes,
    EventAt,
}

#[derive(Iden)]
enum ManufacturingWorkOrders {
    Table,
    Id,
    WorkOrderNumber,
    ProductId,
    BomId,
    WorkCenterId,
    AssignedTo,
    Status,
    Priority,
    QuantityToBuild,
    QuantityCompleted,
    ScheduledStart,
    ScheduledEnd,
    ActualStart,
    ActualEnd,
    CreatedAt,
    UpdatedAt,
}

#[derive(Iden)]
enum ManufacturingWorkOrderMaterials {
    Table,
    Id,
    WorkOrderId,
    ComponentId,
    ReservedQuantity,
    ConsumedQuantity,
    InventoryReservationId,
    CreatedAt,
    UpdatedAt,
}

#[derive(Iden)]
enum ManufacturingWorkOrderTasks {
    Table,
    Id,
    WorkOrderId,
    Sequence,
    TaskName,
    Status,
    EstimatedHours,
    ActualHours,
    AssignedTo,
    StartedAt,
    CompletedAt,
    Notes,
    CreatedAt,
    UpdatedAt,
}

#[derive(Iden)]
enum ManufacturingWorkOrderNotes {
    Table,
    Id,
    WorkOrderId,
    AuthorId,
    Body,
    CreatedAt,
}
