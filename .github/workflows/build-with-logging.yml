name: Build with Error Logging

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Create log directory
      run: mkdir -p logs
    
    - name: Build with error logging
      run: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] ===== CI Build started =====" >> build_errors.log
        cargo build --verbose 2>&1 | tee -a build_errors.log
        BUILD_STATUS=${PIPESTATUS[0]}
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] Build exited with status: $BUILD_STATUS" >> build_errors.log
        exit $BUILD_STATUS
      continue-on-error: true
    
    - name: Run clippy with logging
      run: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] ===== Clippy analysis started =====" >> build_errors.log
        cargo clippy -- -D warnings 2>&1 | tee -a build_errors.log
      continue-on-error: true
    
    - name: Run tests with logging
      run: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] ===== Tests started =====" >> build_errors.log
        cargo test --verbose 2>&1 | tee -a build_errors.log
        TEST_STATUS=${PIPESTATUS[0]}
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] Tests exited with status: $TEST_STATUS" >> build_errors.log
        exit $TEST_STATUS
      continue-on-error: true
    
    - name: Upload build logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: build-logs
        path: build_errors.log
        retention-days: 30
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: test-results
        path: |
          target/debug/deps/*.d
          target/debug/build/
        retention-days: 7
    
    - name: Comment PR with build status
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const buildLog = fs.readFileSync('build_errors.log', 'utf8');
          const errors = buildLog.split('\n').filter(line => line.includes('error') || line.includes('ERROR'));
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ‚ùå Build Failed\n\nFound ${errors.length} errors. Check the [build logs artifact](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.\n\n<details><summary>Error Summary</summary>\n\n\`\`\`\n${errors.slice(0, 10).join('\n')}\n\`\`\`\n\n</details>`
          }) 