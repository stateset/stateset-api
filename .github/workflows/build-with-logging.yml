name: Build with Error Logging

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Create log directory
      run: mkdir -p logs

    - name: Run checks with error logging
      run: |
        set -o pipefail
        LOG_FILE=build_errors.log
        touch "$LOG_FILE"

        timestamp() {
          date '+%Y-%m-%d %H:%M:%S'
        }

        run_cmd() {
          local label="$1"; shift
          echo "[$(timestamp)] ===== ${label} started =====" | tee -a "$LOG_FILE"
          "$@" 2>&1 | tee -a "$LOG_FILE"
          local status=${PIPESTATUS[0]}
          echo "[$(timestamp)] ===== ${label} exited with status: ${status} =====" | tee -a "$LOG_FILE"
          if [ $status -ne 0 ]; then
            overall_status=1
          fi
        }

        overall_status=0

        run_cmd "Formatting" cargo fmt --all -- --check
        run_cmd "Build" cargo build --verbose
        run_cmd "Clippy analysis" cargo clippy -- -D warnings
        run_cmd "Tests" cargo test --verbose

        echo "[$(timestamp)] ===== CI checks completed =====" | tee -a "$LOG_FILE"
        exit $overall_status

    - name: Upload build logs
      uses: actions/upload-artifact@v5
      if: always()
      with:
        name: build-logs
        path: build_errors.log
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v5
      if: failure()
      with:
        name: test-results
        path: |
          target/debug/deps/*.d
          target/debug/build/
        retention-days: 7

    - name: Comment PR with build status
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const buildLog = fs.readFileSync('build_errors.log', 'utf8');
          const errors = buildLog.split('\n').filter(line => line.includes('error') || line.includes('ERROR'));

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ‚ùå Build Failed\n\nFound ${errors.length} errors. Check the [build logs artifact](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.\n\n<details><summary>Error Summary</summary>\n\n\`\`\`\n${errors.slice(0, 10).join('\n')}\n\`\`\`\n\n</details>`
          })
