version: '3.8'

services:
  stateset-api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - DOCKER=1
      - JWT_SECRET=${JWT_SECRET:-your_secure_jwt_secret_key_please_change_in_production}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-60}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION:-7}
      - PORT=${PORT:-3000}
      - APP_ENV=${APP_ENV:-development}
    volumes:
      - ./data:/app/data
      - ./migrations:/app/migrations:ro
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - stateset-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    networks:
      - stateset-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Optional: PostgreSQL database (uncomment if needed)
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=stateset_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - stateset-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d stateset_db"]
      interval: 5s
      timeout: 5s
      retries: 10

  # One-off migration job (run manually or on first boot)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/stateset_db
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - stateset-network
    command: ["./migration"]
    restart: "no"

volumes:
  redis-data:
  postgres-data:

networks:
  stateset-network:
    driver: bridge
