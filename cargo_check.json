{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.101","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.101/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.101/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/home/dom/stateset-api/target/debug/build/proc-macro2-aa66788d6c54b9fa/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.101","linked_libs":[],"linked_paths":[],"cfgs":["wrap_proc_macro","proc_macro_span_location","proc_macro_span_file"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/proc-macro2-173889a2268609b7/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libunicode_ident-9821094677abee5b.rlib","/home/dom/stateset-api/target/debug/deps/libunicode_ident-9821094677abee5b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.175","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.175/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.175/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/build/libc-20617de5990cee13/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg-if-1.0.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg-if-1.0.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libcfg_if-972afb405a8e55bb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","derive","rc","serde_derive","std"],"filenames":["/home/dom/stateset-api/target/debug/build/serde-0407f81de9211d40/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#autocfg@1.5.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/autocfg-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"autocfg","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/autocfg-1.5.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libautocfg-e43f4f6a57543659.rlib","/home/dom/stateset-api/target/debug/deps/libautocfg-e43f4f6a57543659.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-project-lite-0.2.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_project_lite","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-project-lite-0.2.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libpin_project_lite-0e86af28d48f0ea3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-core-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_core","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-core-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libfutures_core-b17a82b164bf052b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.101","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.101/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.101/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/home/dom/stateset-api/target/debug/deps/libproc_macro2-1199ebaca595db60.rlib","/home/dom/stateset-api/target/debug/deps/libproc_macro2-1199ebaca595db60.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.175","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/libc-d2530f7db3380e36/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/serde-f9ac0b83f114595a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#once_cell@1.21.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/once_cell-1.21.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"once_cell","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/once_cell-1.21.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","race","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libonce_cell-199800b58c1e0d8f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/version_check-0.9.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"version_check","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/version_check-0.9.5/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libversion_check-ea6887218707dfc6.rlib","/home/dom/stateset-api/target/debug/deps/libversion_check-ea6887218707dfc6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libmemchr-9c78a145eff775ec.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytes@1.10.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytes-1.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bytes","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytes-1.10.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libbytes-ea8af492080e3cde.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.13/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.13/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atomic_usize","default"],"filenames":["/home/dom/stateset-api/target/debug/build/lock_api-e6412579058665e8/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.40/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.40/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/home/dom/stateset-api/target/debug/deps/libquote-e8ed81fa9f5dafbc.rlib","/home/dom/stateset-api/target/debug/deps/libquote-e8ed81fa9f5dafbc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.175","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.175/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.175/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/liblibc-6ee45d3cd74f95c4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-1.0.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itoa","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-1.0.15/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libitoa-ceaaf064462b8b6f.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","linked_libs":[],"linked_paths":[],"cfgs":["has_const_fn_trait_bound"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/lock_api-0dad31043c0dd011/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#scopeguard@1.2.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/scopeguard-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"scopeguard","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/scopeguard-1.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libscopeguard-94e7e756cd69aad0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.175","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.175/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.175/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/liblibc-ca29584feffda285.rlib","/home/dom/stateset-api/target/debug/deps/liblibc-ca29584feffda285.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot_core-0.9.11/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot_core-0.9.11/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/parking_lot_core-4a690d57ca21107a/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.31","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_sink","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libfutures_sink-05ea9def2ed4c1f0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.106","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.106/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.106/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","fold","full","parsing","printing","proc-macro","visit","visit-mut"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsyn-1af9dd70324e46c2.rlib","/home/dom/stateset-api/target/debug/deps/libsyn-1af9dd70324e46c2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.13/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lock_api","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.13/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atomic_usize","default"],"filenames":["/home/dom/stateset-api/target/debug/deps/liblock_api-4cb1161375ba8c19.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/parking_lot_core-243c929652151676/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-io@0.3.31","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-io-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_io","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-io-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libfutures_io-8f0f9ff3812a0397.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slab@0.4.11","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slab-0.4.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"slab","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slab-0.4.11/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libslab-42e319f38072c981.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mio@1.0.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mio-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mio","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mio-1.0.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["net","os-ext","os-poll"],"filenames":["/home/dom/stateset-api/target/debug/deps/libmio-a66945b76fccf97f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#signal-hook-registry@1.4.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/signal-hook-registry-1.4.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"signal_hook_registry","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/signal-hook-registry-1.4.6/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libsignal_hook_registry-1ae88f5872893cde.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#socket2@0.6.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/socket2-0.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"socket2","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/socket2-0.6.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["all"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsocket2-a81b1285c938fa19.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_derive-1.0.219/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"serde_derive","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_derive-1.0.219/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libserde_derive-af8bb54017021b91.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#synstructure@0.13.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synstructure-0.13.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"synstructure","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synstructure-0.13.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsynstructure-f77e6ee88e67c878.rlib","/home/dom/stateset-api/target/debug/deps/libsynstructure-f77e6ee88e67c878.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-macros@2.5.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-macros-2.5.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"tokio_macros","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-macros-2.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libtokio_macros-2285cbc90115b036.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#jobserver@0.1.34","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jobserver-0.1.34/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"jobserver","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jobserver-0.1.34/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libjobserver-d0cb35117a3a5f1c.rlib","/home/dom/stateset-api/target/debug/deps/libjobserver-d0cb35117a3a5f1c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#shlex@1.3.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shlex-1.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"shlex","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shlex-1.3.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libshlex-c8dfa7667705618f.rlib","/home/dom/stateset-api/target/debug/deps/libshlex-c8dfa7667705618f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#value-bag@1.11.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/value-bag-1.11.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"value_bag","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/value-bag-1.11.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["inline-i128"],"filenames":["/home/dom/stateset-api/target/debug/deps/libvalue_bag-21bb607a709d1af1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-utils-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_utils","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-utils-0.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libpin_utils-e3f5a18815d2cac2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.31","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-channel-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_channel","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-channel-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","futures-sink","sink","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libfutures_channel-72c7561542a4054c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","derive","rc","serde_derive","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libserde-6a695617238cb3d2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerofrom-derive@0.1.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerofrom-derive-0.1.6/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zerofrom_derive","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerofrom-derive-0.1.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libzerofrom_derive-87a8a04a1f9bfdd7.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cc@1.2.34","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cc-1.2.34/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cc","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cc-1.2.34/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["parallel"],"filenames":["/home/dom/stateset-api/target/debug/deps/libcc-dd39deb43b3b0b28.rlib","/home/dom/stateset-api/target/debug/deps/libcc-dd39deb43b3b0b28.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#log@0.4.27","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"log","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["kv","kv_unstable","std","value-bag"],"filenames":["/home/dom/stateset-api/target/debug/deps/liblog-e6f38a9ab5ce01e6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yoke-derive@0.8.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yoke-derive-0.8.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"yoke_derive","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yoke-derive-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libyoke_derive-679eb355097caba9.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-macro@0.3.31","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-macro-0.3.31/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"futures_macro","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-macro-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libfutures_macro-fbc67a8683874970.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-task-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_task","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-task-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libfutures_task-c688eff9bf0e8af6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.34","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-core-0.1.34/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_core","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-core-0.1.34/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","once_cell","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtracing_core-ac9bebbeb078cb6f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-1.15.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"smallvec","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-1.15.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["const_generics","const_new","serde"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsmallvec-5a4b61d5dd392f07.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_util","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","async-await","async-await-macro","channel","futures-channel","futures-io","futures-macro","futures-sink","io","memchr","sink","slab","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libfutures_util-ed5f6606cf765f3b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerovec-derive@0.11.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerovec-derive-0.11.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zerovec_derive","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerovec-derive-0.11.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libzerovec_derive-6367309909a3e52e.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equivalent-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equivalent-1.0.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libequivalent-f8f7e9459c1fce4f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#allocator-api2@0.2.21","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/allocator-api2-0.2.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"allocator_api2","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/allocator-api2-0.2.21/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/home/dom/stateset-api/target/debug/deps/liballocator_api2-a22f0c0335f16551.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#foldhash@0.1.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foldhash-0.1.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"foldhash","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foldhash-0.1.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libfoldhash-feb18bfda76cd9e7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-attributes@0.1.30","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-attributes-0.1.30/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"tracing_attributes","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-attributes-0.1.30/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libtracing_attributes-ed009ddbd2e12bb7.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#displaydoc@0.2.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/displaydoc-0.2.5/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"displaydoc","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/displaydoc-0.2.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libdisplaydoc-a98104f102c05bc0.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot_core-0.9.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot_core","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot_core-0.9.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libparking_lot_core-6333e667a6ca05bd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["allocator-api2","default","default-hasher","equivalent","inline-more","raw-entry"],"filenames":["/home/dom/stateset-api/target/debug/deps/libhashbrown-3830a29421c45ab6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.41","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-0.1.41/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-0.1.41/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["attributes","default","log","std","tracing-attributes"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtracing-4074b4f60d5b80e2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.16","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libgetrandom-3986ee95e8440a64.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/percent-encoding-2.3.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"percent_encoding","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/percent-encoding-2.3.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libpercent_encoding-c62866a235b4614b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.18.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.18.0/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/typenum-dec8b39c592c3a7d/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generic-array-0.14.7/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generic-array-0.14.7/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths"],"filenames":["/home/dom/stateset-api/target/debug/build/generic-array-f2f2607b090a65d5/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/build/crossbeam-utils-90212a47424a6c67/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot@0.12.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot-0.12.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot-0.12.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libparking_lot-c17fb6bea6b0946c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@2.11.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-2.11.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-2.11.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","serde","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libindexmap-4a9b385adcd81919.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/typenum-2d30ccdb2de4e356/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fnv-1.0.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fnv","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fnv-1.0.7/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libfnv-2f01830a992dc6e2.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/crossbeam-utils-8247c1ba485a304f/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","linked_libs":[],"linked_paths":[],"cfgs":["relaxed_coherence"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/generic-array-2c9aed73dfffed49/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","i128","std"],"filenames":["/home/dom/stateset-api/target/debug/build/num-traits-504921570bd8326f/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pkg-config@0.3.32","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pkg-config-0.3.32/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pkg_config","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pkg-config-0.3.32/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libpkg_config-b2a2450548ccee1c.rlib","/home/dom/stateset-api/target/debug/deps/libpkg_config-b2a2450548ccee1c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio@1.47.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bytes","default","fs","full","io-std","io-util","libc","macros","mio","net","parking_lot","process","rt","rt-multi-thread","signal","signal-hook-registry","socket2","sync","time","tokio-macros"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtokio-83567134ae5f3a38.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.26/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.26/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/home/dom/stateset-api/target/debug/build/zerocopy-2479947ab6b30c1f/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","linked_libs":[],"linked_paths":[],"cfgs":["has_total_cmp"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/num-traits-2740c82699b93ce3/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_utils","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libcrossbeam_utils-51464d383ca9eddc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@2.0.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/icu_normalizer_data-02b3286e562902a4/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@2.0.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/icu_properties_data-341eb17399e67d52/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.20","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ryu-1.0.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ryu","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ryu-1.0.20/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libryu-8c67b68f1e03a70b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerofrom@0.1.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerofrom-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerofrom","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerofrom-0.1.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive"],"filenames":["/home/dom/stateset-api/target/debug/deps/libzerofrom-aadc3e0dbb502563.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26","linked_libs":[],"linked_paths":[],"cfgs":["zerocopy_aarch64_simd_1_59_0","zerocopy_core_error_1_81_0","zerocopy_diagnostic_on_unimplemented_1_78_0","zerocopy_generic_bounds_in_const_fn_1_61_0","zerocopy_panic_in_const_and_vec_try_reserve_1_57_0","zerocopy_target_has_atomics_1_60_0"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/zerocopy-7c8ec9d053c8f9e8/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_traits","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","i128","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libnum_traits-717f96c832465ed3.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@2.0.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/icu_properties_data-68ef7f1b98d542f4/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@2.0.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/icu_normalizer_data-156959387bc0deb0/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.143","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.143/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.143/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","raw_value","std"],"filenames":["/home/dom/stateset-api/target/debug/build/serde_json-8cc0ced083b24dc1/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stable_deref_trait-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stable_deref_trait","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stable_deref_trait-1.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/home/dom/stateset-api/target/debug/deps/libstable_deref_trait-f4996df1e7b410b7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-util@0.7.16","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-util-0.7.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_util","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-util-0.7.16/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["codec","default","io"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtokio_util-f95648a34fe91649.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/subtle-2.6.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"subtle","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/subtle-2.6.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libsubtle-a133f89a6f137a1a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.26/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerocopy","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.26/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/home/dom/stateset-api/target/debug/deps/libzerocopy-aa4de68a54e4ded7.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.143","linked_libs":[],"linked_paths":[],"cfgs":["fast_arithmetic=\"64\""],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/serde_json-bec5085dc93b9251/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yoke@0.8.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yoke-0.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"yoke","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yoke-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive","zerofrom"],"filenames":["/home/dom/stateset-api/target/debug/deps/libyoke-dca6f6f4958931c5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.22","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustversion-1.0.22/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustversion-1.0.22/build/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/rustversion-b6a4c433fe390acc/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.16","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.16/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.16/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/build/thiserror-645351f2fb7ea9e0/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower-service@0.3.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-service-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower_service","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-service-0.3.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libtower_service-d71afa1094c1aff5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.18.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"typenum","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.18.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libtypenum-45224b16fa943bad.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@2.0.16","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-2.0.16/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"thiserror_impl","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-2.0.16/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libthiserror_impl-fc1b65d468cb1286.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.21","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ppv-lite86-0.2.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ppv_lite86","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ppv-lite86-0.2.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libppv_lite86-edbaf88c3a15abd9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.143","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.143/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.143/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","raw_value","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libserde_json-d074b07793d750fb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerovec@0.11.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerovec-0.11.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerovec","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerovec-0.11.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive","yoke"],"filenames":["/home/dom/stateset-api/target/debug/deps/libzerovec-a839e1adecc0b058.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.22","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/rustversion-1898eae5a255a4ec/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.16","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/thiserror-130e2a10e838bebb/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generic-array-0.14.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"generic_array","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generic-array-0.14.7/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths"],"filenames":["/home/dom/stateset-api/target/debug/deps/libgeneric_array-55941d7f7fa91014.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libmemchr-b3353b71db18b32a.rlib","/home/dom/stateset-api/target/debug/deps/libmemchr-b3353b71db18b32a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.6.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","getrandom","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/librand_core-33f436141a5aa6b1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.22","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustversion-1.0.22/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"rustversion","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustversion-1.0.22/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/librustversion-795721cbadc38550.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tinystr@0.8.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinystr-0.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tinystr","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinystr-0.8.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","zerovec"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtinystr-8a57bdddea310d04.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#litemap@0.8.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/litemap-0.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"litemap","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/litemap-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/home/dom/stateset-api/target/debug/deps/liblitemap-fa5f69ff97a53b59.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#vcpkg@0.2.15","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/vcpkg-0.2.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"vcpkg","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/vcpkg-0.2.15/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libvcpkg-2f768acb3351d65e.rlib","/home/dom/stateset-api/target/debug/deps/libvcpkg-2f768acb3351d65e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#writeable@0.6.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/writeable-0.6.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"writeable","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/writeable-0.6.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libwriteable-7fd0e8655a97a0d9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.10.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/block-buffer-0.10.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"block_buffer","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/block-buffer-0.10.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libblock_buffer-b8c59e0c60a91a88.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.1.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crypto-common-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crypto_common","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crypto-common-0.1.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libcrypto_common-80a5a43dfd97d49e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#potential_utf@0.1.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/potential_utf-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"potential_utf","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/potential_utf-0.1.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["zerovec"],"filenames":["/home/dom/stateset-api/target/debug/deps/libpotential_utf-4e372de3ed7674ca.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_locale_core@2.0.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_locale_core-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_locale_core","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_locale_core-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["zerovec"],"filenames":["/home/dom/stateset-api/target/debug/deps/libicu_locale_core-152406ade8ac947d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerotrie@0.2.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerotrie-0.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerotrie","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerotrie-0.2.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["yoke","zerofrom"],"filenames":["/home/dom/stateset-api/target/debug/deps/libzerotrie-fd0be5eb98aa94b1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#concurrent-queue@2.5.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/concurrent-queue-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"concurrent_queue","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/concurrent-queue-2.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libconcurrent_queue-98ccc6e12b2832e7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.99","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anyhow-1.0.99/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anyhow-1.0.99/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/build/anyhow-9174f81738c7f669/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking@2.2.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking-2.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking-2.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libparking-cfdf91581e521555.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitflags@2.9.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitflags-2.9.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitflags","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitflags-2.9.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libbitflags-204499b6fbf379e0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#digest@0.10.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/digest-0.10.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"digest","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/digest-0.10.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","block-buffer","core-api","default","mac","std","subtle"],"filenames":["/home/dom/stateset-api/target/debug/deps/libdigest-23443d539a3e4eaa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_collections@2.0.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_collections-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_collections","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_collections-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libicu_collections-c5c3b2aca1671ebe.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_provider@2.0.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_provider-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_provider","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_provider-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["baked","zerotrie"],"filenames":["/home/dom/stateset-api/target/debug/deps/libicu_provider-7bd79aa126ef9565.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.99","linked_libs":[],"linked_paths":[],"cfgs":["std_backtrace"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/anyhow-b79eacf3acb58f4b/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http@1.3.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-1.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-1.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libhttp-52ac24c42ba9853e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-trait@0.1.89","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-trait-0.1.89/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"async_trait","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-trait-0.1.89/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libasync_trait-cf1830e1499f529c.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#base64@0.22.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64-0.22.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"base64","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64-0.22.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libbase64-e2d9f256589e70bc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#either@1.15.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/either-1.15.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/either-1.15.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std","use_std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libeither-1d1204601b0b1010.rlib","/home/dom/stateset-api/target/debug/deps/libeither-1d1204601b0b1010.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.3.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_chacha-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_chacha-0.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/librand_chacha-b4a54d371ec8a3f4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@2.0.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_normalizer_data","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libicu_normalizer_data-d2473f55c03a7556.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@2.0.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_properties_data","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libicu_properties_data-e05272786a6e1307.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.17.14/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.17.14/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","dev_urandom_fallback"],"filenames":["/home/dom/stateset-api/target/debug/build/ring-43f5bc3419afd8d0/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zeroize@1.8.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zeroize-1.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zeroize","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zeroize-1.8.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libzeroize-bafcfad1bd0ee547.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/build/httparse-a369f4806a928b1e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower-layer@0.3.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-layer-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower_layer","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-layer-0.3.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libtower_layer-1b6d015ec69ffc49.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg-if-1.0.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg-if-1.0.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libcfg_if-67cd4df49c586b65.rlib","/home/dom/stateset-api/target/debug/deps/libcfg_if-67cd4df49c586b65.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http-body@1.0.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http_body","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libhttp_body-ee300e8c0401f7b0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.8.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","getrandom","libc","rand_chacha","small_rng","std","std_rng"],"filenames":["/home/dom/stateset-api/target/debug/deps/librand-de0e360b3a55cf8e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls-pki-types@1.12.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-pki-types-1.12.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustls_pki_types","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-pki-types-1.12.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/librustls_pki_types-f188379a2fdc0112.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14","linked_libs":["static=ring_core_0_17_14_","static=ring_core_0_17_14__test"],"linked_paths":["native=/home/dom/stateset-api/target/debug/build/ring-544cac9d67691c3e/out"],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/ring-544cac9d67691c3e/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1","linked_libs":[],"linked_paths":[],"cfgs":["httparse_simd_neon_intrinsics","httparse_simd"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/httparse-2246c683a1e71a20/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties@2.0.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_properties","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/home/dom/stateset-api/target/debug/deps/libicu_properties-2c0a2b6a9a189a2f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.99","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anyhow-1.0.99/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anyhow","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anyhow-1.0.99/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libanyhow-086353f4bd2145fe.rlib","/home/dom/stateset-api/target/debug/deps/libanyhow-086353f4bd2145fe.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer@2.0.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_normalizer","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/home/dom/stateset-api/target/debug/deps/libicu_normalizer-6cc499a2cc8d2298.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#event-listener@5.4.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/event-listener-5.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"event_listener","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/event-listener-5.4.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","parking","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libevent_listener-20d04b1b88a098cb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-stream@0.1.17","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-stream-0.1.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_stream","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-stream-0.1.17/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","fs","net","time"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtokio_stream-df47b6a0cc239f64.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#form_urlencoded@1.2.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/form_urlencoded-1.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"form_urlencoded","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/form_urlencoded-1.2.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libform_urlencoded-4ab59003a35d276c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerofrom@0.1.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerofrom-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerofrom","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerofrom-0.1.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive"],"filenames":["/home/dom/stateset-api/target/debug/deps/libzerofrom-b2eb2582a080fe1b.rlib","/home/dom/stateset-api/target/debug/deps/libzerofrom-b2eb2582a080fe1b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httpdate@1.0.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httpdate-1.0.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"httpdate","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httpdate-1.0.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libhttpdate-6f7f6b494863ddbc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.3.3/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.3.3/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/build/getrandom-e771675c7b9d83a1/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#try-lock@0.2.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/try-lock-0.2.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"try_lock","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/try-lock-0.2.5/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libtry_lock-b39d2f1611e73d1b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stable_deref_trait-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stable_deref_trait","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stable_deref_trait-1.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/home/dom/stateset-api/target/debug/deps/libstable_deref_trait-b210507bc655f53a.rlib","/home/dom/stateset-api/target/debug/deps/libstable_deref_trait-b210507bc655f53a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"httparse","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libhttparse-b652932b81b77c4c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#idna_adapter@1.2.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna_adapter-1.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"idna_adapter","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna_adapter-1.2.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/home/dom/stateset-api/target/debug/deps/libidna_adapter-b07e8e954b2666b6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#want@0.3.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/want-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"want","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/want-0.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libwant-8a8f417f4f52f03e.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/getrandom-05c85e02d8adacc0/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yoke@0.8.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yoke-0.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"yoke","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yoke-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive","zerofrom"],"filenames":["/home/dom/stateset-api/target/debug/deps/libyoke-2d82990e1a304957.rlib","/home/dom/stateset-api/target/debug/deps/libyoke-2d82990e1a304957.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.46","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-integer-0.1.46/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_integer","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-integer-0.1.46/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","i128","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libnum_integer-91788048211da609.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-executor@0.3.31","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-executor-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_executor","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-executor-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libfutures_executor-be87b69805e65423.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf8_iter-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utf8_iter","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf8_iter-1.0.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libutf8_iter-7af36920edb0fdad.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#atomic-waker@1.1.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/atomic-waker-1.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"atomic_waker","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/atomic-waker-1.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libatomic_waker-82767012afcabf64.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#untrusted@0.9.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/untrusted-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"untrusted","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/untrusted-0.9.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libuntrusted-ada53e80fdaa862b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime@0.3.17","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mime-0.3.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mime","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mime-0.3.17/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libmime-dda4856c401cbb86.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.3.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libgetrandom-c74a85998562ec35.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-bigint@0.4.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-0.4.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_bigint","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-0.4.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libnum_bigint-66c1eb1e78381199.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.17.14/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ring","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.17.14/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","dev_urandom_fallback"],"filenames":["/home/dom/stateset-api/target/debug/deps/libring-48398611d379cfd4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#idna@1.1.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna-1.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"idna","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna-1.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","compiled_data","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libidna-ea415b19b8e2c622.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.16","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thiserror","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.16/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libthiserror-22b0fb56844cf973.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","full","parsing","printing","proc-macro","quote"],"filenames":["/home/dom/stateset-api/target/debug/build/syn-a688fd39a08ef70e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#time-core@0.1.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/time-core-0.1.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"time_core","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/time-core-0.1.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libtime_core-cb3b9f0aed139ee0.rlib","/home/dom/stateset-api/target/debug/deps/libtime_core-cb3b9f0aed139ee0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cpufeatures-0.2.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cpufeatures","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cpufeatures-0.2.17/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libcpufeatures-db9b4f83f1ea6279.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.5.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/build/crc32fast-25705a1a0bfabd8f/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-conv@0.1.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-conv-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_conv","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-conv-0.1.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libnum_conv-4c43a6bd94f3b138.rlib","/home/dom/stateset-api/target/debug/deps/libnum_conv-4c43a6bd94f3b138.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.23.29","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-0.23.29/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-0.23.29/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ring","std","tls12"],"filenames":["/home/dom/stateset-api/target/debug/build/rustls-9a4485b729cb3834/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#powerfmt@0.2.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/powerfmt-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"powerfmt","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/powerfmt-0.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libpowerfmt-f33caf3bb0be7d30.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","linked_libs":[],"linked_paths":[],"cfgs":["syn_disable_nightly_tests"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/syn-07c9e44b8df7a948/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls-webpki@0.103.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-webpki-0.103.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"webpki","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-webpki-0.103.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","ring","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libwebpki-dba7f4ec9901394c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.9.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.9.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["os_rng","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/librand_core-ec9ac23a81bdb803.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.5.0","linked_libs":[],"linked_paths":[],"cfgs":["stable_arm_crc32_intrinsics"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/crc32fast-6aef6fb31c903b96/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#time-macros@0.2.22","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/time-macros-0.2.22/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"time_macros","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/time-macros-0.2.22/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["formatting","parsing","serde"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtime_macros-06b13ac82bd4b8ca.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#deranged@0.4.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/deranged-0.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"deranged","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/deranged-0.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","powerfmt","serde","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libderanged-0539c3c2b32e111f.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.23.29","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/rustls-4dadfde52b515269/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#url@2.5.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/url-2.5.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"url","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/url-2.5.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","serde","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/liburl-4b93018e64fbb15c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerovec@0.11.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerovec-0.11.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerovec","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerovec-0.11.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive","yoke"],"filenames":["/home/dom/stateset-api/target/debug/deps/libzerovec-3d75edb8c17672ed.rlib","/home/dom/stateset-api/target/debug/deps/libzerovec-3d75edb8c17672ed.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.16","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thiserror","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.16/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libthiserror-31149f5f1e314a7b.rlib","/home/dom/stateset-api/target/debug/deps/libthiserror-31149f5f1e314a7b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aho-corasick@1.1.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/aho-corasick-1.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aho_corasick","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/aho-corasick-1.1.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["perf-literal","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libaho_corasick-6ec7aed9b7529a84.rlib","/home/dom/stateset-api/target/debug/deps/libaho_corasick-6ec7aed9b7529a84.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.15","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libm-0.2.15/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libm-0.2.15/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arch","default"],"filenames":["/home/dom/stateset-api/target/debug/build/libm-58642be00ea27e8f/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-conv@0.1.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-conv-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_conv","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-conv-0.1.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libnum_conv-7afba94acc62b7e0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.8.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.8.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/home/dom/stateset-api/target/debug/deps/libregex_syntax-c0abfffebb4a2144.rlib","/home/dom/stateset-api/target/debug/deps/libregex_syntax-c0abfffebb4a2144.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#heck@0.5.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heck-0.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"heck","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heck-0.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libheck-7af3b78169a7edcf.rlib","/home/dom/stateset-api/target/debug/deps/libheck-7af3b78169a7edcf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iana-time-zone@0.1.63","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/iana-time-zone-0.1.63/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iana_time_zone","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/iana-time-zone-0.1.63/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["fallback"],"filenames":["/home/dom/stateset-api/target/debug/deps/libiana_time_zone-65c6424386dd83c1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#time-core@0.1.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/time-core-0.1.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"time_core","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/time-core-0.1.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libtime_core-8aa2c46c6e2dc520.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.23.29","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-0.23.29/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustls","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-0.23.29/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ring","std","tls12"],"filenames":["/home/dom/stateset-api/target/debug/deps/librustls-4bbba80b6fef2efd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sha2@0.10.9","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sha2-0.10.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sha2","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sha2-0.10.9/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsha2-7ef6d74d0572d946.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#time@0.3.41","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/time-0.3.41/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"time","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/time-0.3.41/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","formatting","macros","parsing","serde","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtime-b1ec13c70034dbca.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.15","linked_libs":[],"linked_paths":[],"cfgs":["arch_enabled"],"env":[["CFG_CARGO_FEATURES","[\"arch\", \"default\"]"],["CFG_OPT_LEVEL","0"],["CFG_TARGET_FEATURES","[\"fxsr\", \"sse\", \"sse2\"]"]],"out_dir":"/home/dom/stateset-api/target/debug/build/libm-c2512d1a57800970/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chrono@0.4.41","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"chrono","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","android-tzdata","clock","default","iana-time-zone","js-sys","now","oldtime","serde","std","wasm-bindgen","wasmbind","winapi","windows-link"],"filenames":["/home/dom/stateset-api/target/debug/deps/libchrono-6d12695d72f4bea2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.4.10","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_automata","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.10/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","dfa-onepass","hybrid","meta","nfa-backtrack","nfa-pikevm","nfa-thompson","perf-inline","perf-literal","perf-literal-multisubstring","perf-literal-substring","std","syntax","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment","unicode-word-boundary"],"filenames":["/home/dom/stateset-api/target/debug/deps/libregex_automata-cb2a8e9dc994f277.rlib","/home/dom/stateset-api/target/debug/deps/libregex_automata-cb2a8e9dc994f277.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","full","parsing","printing","proc-macro","quote"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsyn-ee8ca1bb4123dab1.rlib","/home/dom/stateset-api/target/debug/deps/libsyn-ee8ca1bb4123dab1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.9.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_chacha-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_chacha-0.9.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/librand_chacha-e7f863db6c1ab6f6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#webpki-roots@1.0.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webpki-roots-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"webpki_roots","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webpki-roots-1.0.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libwebpki_roots-bb8e27f5a5330a32.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ordered-float@4.6.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ordered-float-4.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ordered_float","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ordered-float-4.6.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libordered_float-b8be0a26b3b25ccd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.7.8","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ahash-0.7.8/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ahash-0.7.8/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/ahash-94ff628900825e52/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bigdecimal@0.4.8","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bigdecimal-0.4.8/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bigdecimal-0.4.8/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","serde","std"],"filenames":["/home/dom/stateset-api/target/debug/build/bigdecimal-daa55612a63baf5f/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-1.0.69/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-1.0.69/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/thiserror-14edc43edb1485d2/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tinyvec_macros@0.1.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec_macros-0.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tinyvec_macros","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec_macros-0.1.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libtinyvec_macros-24ecd4aceea8ffef.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#heck@0.4.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heck-0.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"heck","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heck-0.4.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libheck-47b6b20ab647db87.rlib","/home/dom/stateset-api/target/debug/deps/libheck-47b6b20ab647db87.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust_decimal@1.37.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust_decimal-1.37.2/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust_decimal-1.37.2/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","maths","serde","std"],"filenames":["/home/dom/stateset-api/target/debug/build/rust_decimal-b70696597392b796/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["derive","serde_derive","std"],"filenames":["/home/dom/stateset-api/target/debug/build/serde-a3cf075cc2db9153/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.15","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libm-0.2.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libm","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libm-0.2.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arch","default"],"filenames":["/home/dom/stateset-api/target/debug/deps/liblibm-35cf71a67f1a54c9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tinyvec@1.10.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tinyvec","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinyvec-1.10.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","tinyvec_macros"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtinyvec-8940fa081888e5d9.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#bigdecimal@0.4.8","linked_libs":[],"linked_paths":[],"cfgs":["rustc_1_70","rustc_1_60","rustc_1_50","rustc_1_46"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/bigdecimal-b77b7d9a1b507cda/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust_decimal@1.37.2","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/rust_decimal-3b51f5c22db2b38c/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.7.8","linked_libs":[],"linked_paths":[],"cfgs":["feature=\"runtime-rng\"","feature=\"folded_multiply\""],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/ahash-8e0d16d5bd6db810/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/serde-77487489aff52094/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/thiserror-e3b29a19691cddd9/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex@1.11.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-1.11.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-1.11.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","perf","perf-backtrack","perf-cache","perf-dfa","perf-inline","perf-literal","perf-onepass","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/home/dom/stateset-api/target/debug/deps/libregex-f1775e04194bed92.rlib","/home/dom/stateset-api/target/debug/deps/libregex-f1775e04194bed92.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.9.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.9.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.9.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","os_rng","small_rng","std","std_rng","thread_rng"],"filenames":["/home/dom/stateset-api/target/debug/deps/librand-427cac65cb49afac.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itertools@0.14.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itertools-0.14.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itertools","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itertools-0.14.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","use_alloc","use_std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libitertools-de19eb161c7cdff0.rlib","/home/dom/stateset-api/target/debug/deps/libitertools-de19eb161c7cdff0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@1.0.69","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"thiserror_impl","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libthiserror_impl-e56007e5f3bfe5b4.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrayvec@0.7.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrayvec-0.7.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrayvec","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrayvec-0.7.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libarrayvec-104f4dceb1c2a7eb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-normalization@0.1.24","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-normalization-0.1.24/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_normalization","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-normalization-0.1.24/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libunicode_normalization-96a9ff0a9bef9e3d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.7.8","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ahash-0.7.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ahash","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ahash-0.7.8/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libahash-9afaa3b061a19b4b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bigdecimal@0.4.8","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bigdecimal-0.4.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bigdecimal","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bigdecimal-0.4.8/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","serde","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libbigdecimal-6642d1762273a478.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#uuid@1.18.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"uuid","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","fast-rng","rng","serde","std","v4"],"filenames":["/home/dom/stateset-api/target/debug/deps/libuuid-468ad5c723b87b66.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["derive","serde_derive","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libserde-c89b74163237adfc.rlib","/home/dom/stateset-api/target/debug/deps/libserde-c89b74163237adfc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust_decimal@1.37.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust_decimal-1.37.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rust_decimal","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust_decimal-1.37.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","maths","serde","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/librust_decimal-203594d74bd1415e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-1.0.69/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thiserror","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-1.0.69/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libthiserror-0bc5bfb532a931ec.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prost-derive@0.13.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prost-derive-0.13.5/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"prost_derive","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prost-derive-0.13.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libprost_derive-0d5e79f6af7c181b.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tinystr@0.8.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinystr-0.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tinystr","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinystr-0.8.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","zerovec"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtinystr-973f4b9c61da0bae.rlib","/home/dom/stateset-api/target/debug/deps/libtinystr-973f4b9c61da0bae.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http-body-util@0.1.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-util-0.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http_body_util","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-util-0.1.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libhttp_body_util-1725b6c714c8c930.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sync_wrapper@1.0.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sync_wrapper-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sync_wrapper","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sync_wrapper-1.0.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["futures","futures-core"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsync_wrapper-523213f0df8e7e54.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-bidi@0.3.18","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-bidi-0.3.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_bidi","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-bidi-0.3.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","hardcoded-data","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libunicode_bidi-4b8743f8ac6b1003.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equivalent-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equivalent-1.0.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libequivalent-e3e55a7112a7f99e.rlib","/home/dom/stateset-api/target/debug/deps/libequivalent-e3e55a7112a7f99e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libhashbrown-7c91c7177dd767b2.rlib","/home/dom/stateset-api/target/debug/deps/libhashbrown-7c91c7177dd767b2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ident_case@1.0.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ident_case-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ident_case","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ident_case-1.0.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libident_case-f4903f65efca3c91.rlib","/home/dom/stateset-api/target/debug/deps/libident_case-f4903f65efca3c91.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#litemap@0.8.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/litemap-0.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"litemap","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/litemap-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/home/dom/stateset-api/target/debug/deps/liblitemap-79c1cd118b69f519.rlib","/home/dom/stateset-api/target/debug/deps/liblitemap-79c1cd118b69f519.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc-catalog@2.4.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc-catalog-2.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crc_catalog","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc-catalog-2.4.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libcrc_catalog-70b4a5402e2adcdb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#writeable@0.6.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/writeable-0.6.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"writeable","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/writeable-0.6.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libwriteable-d1ec6715e04ecbb6.rlib","/home/dom/stateset-api/target/debug/deps/libwriteable-d1ec6715e04ecbb6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fnv-1.0.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fnv","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fnv-1.0.7/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libfnv-88b2d3140a9c4675.rlib","/home/dom/stateset-api/target/debug/deps/libfnv-88b2d3140a9c4675.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.12.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.12.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.12.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ahash","default","inline-more","raw"],"filenames":["/home/dom/stateset-api/target/debug/deps/libhashbrown-3c580b045c1d4e6b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#webpki-roots@0.26.11","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webpki-roots-0.26.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"webpki_roots","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webpki-roots-0.26.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libwebpki_roots-5dee8f4f439f34c7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc@3.3.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc-3.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crc","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc-3.3.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libcrc-32c9cef469826d95.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#darling_core@0.20.11","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/darling_core-0.20.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"darling_core","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/darling_core-0.20.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libdarling_core-42b07c23bc132ce3.rlib","/home/dom/stateset-api/target/debug/deps/libdarling_core-42b07c23bc132ce3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_locale_core@2.0.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_locale_core-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_locale_core","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_locale_core-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["zerovec"],"filenames":["/home/dom/stateset-api/target/debug/deps/libicu_locale_core-cc6675e957fc0e72.rlib","/home/dom/stateset-api/target/debug/deps/libicu_locale_core-cc6675e957fc0e72.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@2.11.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-2.11.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-2.11.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libindexmap-cee9d577463795bf.rlib","/home/dom/stateset-api/target/debug/deps/libindexmap-cee9d577463795bf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#potential_utf@0.1.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/potential_utf-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"potential_utf","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/potential_utf-0.1.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["zerovec"],"filenames":["/home/dom/stateset-api/target/debug/deps/libpotential_utf-cc5c7cae3d8783cf.rlib","/home/dom/stateset-api/target/debug/deps/libpotential_utf-cc5c7cae3d8783cf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#h2@0.4.12","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"h2","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libh2-6b9f682777635aee.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerotrie@0.2.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerotrie-0.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerotrie","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerotrie-0.2.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["yoke","zerofrom"],"filenames":["/home/dom/stateset-api/target/debug/deps/libzerotrie-efd9d6e16cf1dde5.rlib","/home/dom/stateset-api/target/debug/deps/libzerotrie-efd9d6e16cf1dde5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_urlencoded@0.7.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_urlencoded-0.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_urlencoded","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_urlencoded-0.7.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libserde_urlencoded-529860a29e83376b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl-sys@0.9.110","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-sys-0.9.110/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-main","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-sys-0.9.110/build/main.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/openssl-sys-e59221ef83203558/build-script-main"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libsqlite3-sys@0.30.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libsqlite3-sys-0.30.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libsqlite3-sys-0.30.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bundled","bundled_bindings","cc","pkg-config","unlock_notify","vcpkg"],"filenames":["/home/dom/stateset-api/target/debug/build/libsqlite3-sys-2dc010ca52870cbf/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-queue@0.3.12","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-queue-0.3.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_queue","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-queue-0.3.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libcrossbeam_queue-d58dde5aa95b384f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zstd-sys@2.0.15+zstd.1.5.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zstd-sys-2.0.15+zstd.1.5.7/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zstd-sys-2.0.15+zstd.1.5.7/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/build/zstd-sys-25010e217b0ca9a3/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http@0.2.12","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-0.2.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-0.2.12/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libhttp-a34f5ed7241333a7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.18.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"typenum","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.18.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libtypenum-d31a8f4af28fe01b.rlib","/home/dom/stateset-api/target/debug/deps/libtypenum-d31a8f4af28fe01b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-intrusive@0.5.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-intrusive-0.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_intrusive","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-intrusive-0.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","parking_lot","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libfutures_intrusive-8cf088f83ea15cbb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashlink@0.10.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashlink-0.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashlink","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashlink-0.10.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libhashlink-85f35e26bdb0d715.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#either@1.15.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/either-1.15.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/either-1.15.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","serde","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libeither-e8ba8b37997fd281.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#log@0.4.27","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"log","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/liblog-b25598577db997ea.rlib","/home/dom/stateset-api/target/debug/deps/liblog-b25598577db997ea.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#urlencoding@2.1.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/urlencoding-2.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"urlencoding","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/urlencoding-2.1.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/liburlencoding-45ba3b8f3dab420d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.5.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lazy_static-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lazy_static","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lazy_static-1.5.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/liblazy_static-d550ab0b2fa2a527.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zstd-sys@2.0.15+zstd.1.5.7","linked_libs":["static=zstd"],"linked_paths":["native=/home/dom/stateset-api/target/debug/build/zstd-sys-df27c20f126d4715/out"],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/zstd-sys-df27c20f126d4715/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libsqlite3-sys@0.30.1","linked_libs":["static=sqlite3"],"linked_paths":["native=/home/dom/stateset-api/target/debug/build/libsqlite3-sys-419bf2a43bbb3405/out"],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/libsqlite3-sys-419bf2a43bbb3405/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generic-array-0.14.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"generic_array","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/generic-array-0.14.7/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths"],"filenames":["/home/dom/stateset-api/target/debug/deps/libgeneric_array-89bf17debfac6b1d.rlib","/home/dom/stateset-api/target/debug/deps/libgeneric_array-89bf17debfac6b1d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl-sys@0.9.110","linked_libs":["ssl","crypto"],"linked_paths":[],"cfgs":["osslconf=\"OPENSSL_NO_IDEA\"","osslconf=\"OPENSSL_NO_SSL3_METHOD\"","openssl","ossl101","ossl102","ossl102f","ossl102h","ossl110","ossl110f","ossl110g","ossl110h","ossl111","ossl111b","ossl111c","ossl111d"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/openssl-sys-a5e5478134bde5f8/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sqlx-core@0.8.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sqlx_core","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["_rt-tokio","_tls-rustls","_tls-rustls-ring-webpki","bigdecimal","chrono","crc","default","json","migrate","offline","rust_decimal","rustls","serde","serde_json","sha2","time","tokio","tokio-stream","uuid","webpki-roots"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsqlx_core-9b644bb6b9a94287.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_provider@2.0.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_provider-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_provider","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_provider-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["baked","zerotrie"],"filenames":["/home/dom/stateset-api/target/debug/deps/libicu_provider-1a64ee516a71f8b1.rlib","/home/dom/stateset-api/target/debug/deps/libicu_provider-1a64ee516a71f8b1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper@1.7.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.7.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.7.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["client","default","full","http1","http2","server"],"filenames":["/home/dom/stateset-api/target/debug/deps/libhyper-a3cdba0179c8c41a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#darling_macro@0.20.11","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/darling_macro-0.20.11/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"darling_macro","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/darling_macro-0.20.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libdarling_macro-424d105d9fcdb374.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_collections@2.0.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_collections-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_collections","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_collections-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libicu_collections-7c356aa60d9da833.rlib","/home/dom/stateset-api/target/debug/deps/libicu_collections-7c356aa60d9da833.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hmac@0.12.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hmac-0.12.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hmac","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hmac-0.12.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["reset"],"filenames":["/home/dom/stateset-api/target/debug/deps/libhmac-251db25d0a2f1059.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#atoi@2.0.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/atoi-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"atoi","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/atoi-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libatoi-53d405aa3eed9bb3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-project-internal@1.1.10","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-project-internal-1.1.10/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"pin_project_internal","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-project-internal-1.1.10/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libpin_project_internal-8b73a6776be04c46.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#spin@0.9.8","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/spin-0.9.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"spin","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/spin-0.9.8/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["barrier","default","lazy","lock_api","lock_api_crate","mutex","once","rwlock","spin_mutex"],"filenames":["/home/dom/stateset-api/target/debug/deps/libspin-a72fbd45023560ab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#socket2@0.5.10","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/socket2-0.5.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"socket2","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/socket2-0.5.10/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["all"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsocket2-42d03827e78c5d94.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aho-corasick@1.1.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/aho-corasick-1.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aho_corasick","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/aho-corasick-1.1.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["perf-literal","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libaho_corasick-3c167b09a5544909.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-properties@0.1.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-properties-0.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_properties","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-properties-0.1.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","emoji","general-category"],"filenames":["/home/dom/stateset-api/target/debug/deps/libunicode_properties-296e4fdfa348ee5e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ipnet@2.11.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ipnet-2.11.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ipnet","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ipnet-2.11.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libipnet-ce22f9624b648b97.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dotenvy@0.15.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dotenvy-0.15.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dotenvy","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dotenvy-0.15.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libdotenvy-2896eeba63939b58.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.8.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.8.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/home/dom/stateset-api/target/debug/deps/libregex_syntax-c0f78934ec83e42e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fastrand@2.3.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fastrand-2.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fastrand","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fastrand-2.3.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libfastrand-b8d51b4241328c12.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stringprep@0.1.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stringprep-0.1.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stringprep","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stringprep-0.1.5/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libstringprep-10f3711e86c0ffc2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper-util@0.1.16","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper_util","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["client","client-legacy","client-proxy","client-proxy-system","default","http1","http2","server","server-auto","service","tokio"],"filenames":["/home/dom/stateset-api/target/debug/deps/libhyper_util-f239d1ec3286ff69.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#flume@0.11.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flume-0.11.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"flume","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flume-0.11.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["async","futures-core","futures-sink"],"filenames":["/home/dom/stateset-api/target/debug/deps/libflume-5172b5594d0c1fce.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.4.10","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_automata","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.10/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","dfa-onepass","hybrid","meta","nfa-backtrack","nfa-pikevm","nfa-thompson","perf-inline","perf-literal","perf-literal-multisubstring","perf-literal-substring","std","syntax","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment","unicode-word-boundary"],"filenames":["/home/dom/stateset-api/target/debug/deps/libregex_automata-fd9306b23ce37695.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hkdf@0.12.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hkdf-0.12.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hkdf","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hkdf-0.12.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libhkdf-610f5fd133a563d5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-project@1.1.10","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-project-1.1.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_project","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-project-1.1.10/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libpin_project-ac42c2c27f46336d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#darling@0.20.11","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/darling-0.20.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"darling","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/darling-0.20.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libdarling-fa81dd58e892aa22.rlib","/home/dom/stateset-api/target/debug/deps/libdarling-fa81dd58e892aa22.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libsqlite3-sys@0.30.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libsqlite3-sys-0.30.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libsqlite3_sys","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libsqlite3-sys-0.30.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bundled","bundled_bindings","cc","pkg-config","unlock_notify","vcpkg"],"filenames":["/home/dom/stateset-api/target/debug/deps/liblibsqlite3_sys-63721eb2bdc490a5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http-body@0.4.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-0.4.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http_body","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-0.4.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libhttp_body-6903b0d1f0b1cff0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower@0.5.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-0.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-0.5.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["__common","balance","buffer","discover","futures-core","futures-util","indexmap","limit","load","log","make","pin-project-lite","ready-cache","retry","slab","sync_wrapper","timeout","tokio","tokio-util","tracing","util"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtower-fce612800a9ab2d1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#event-listener-strategy@0.5.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/event-listener-strategy-0.5.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"event_listener_strategy","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/event-listener-strategy-0.5.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libevent_listener_strategy-c3a8ec24eb3ed073.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#md-5@0.10.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/md-5-0.10.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"md5","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/md-5-0.10.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libmd5-e920e3041c66966e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@2.0.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_properties_data","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libicu_properties_data-2ff9d3bcaaacd10d.rlib","/home/dom/stateset-api/target/debug/deps/libicu_properties_data-2ff9d3bcaaacd10d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@2.0.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_normalizer_data","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libicu_normalizer_data-1db967fe4c6265de.rlib","/home/dom/stateset-api/target/debug/deps/libicu_normalizer_data-1db967fe4c6265de.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2-diagnostics@0.10.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-diagnostics-0.10.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-diagnostics-0.10.1/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["colors","default","yansi"],"filenames":["/home/dom/stateset-api/target/debug/build/proc-macro2-diagnostics-ed1372d741413ce8/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@1.9.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-1.9.3/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-1.9.3/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/indexmap-b6df2ee06286a0e1/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#alloc-no-stdlib@2.0.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloc-no-stdlib-2.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"alloc_no_stdlib","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloc-no-stdlib-2.0.4/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/liballoc_no_stdlib-045b524beaf83f37.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-1.15.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"smallvec","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-1.15.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["const_generics"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsmallvec-8444ccc488ac687a.rlib","/home/dom/stateset-api/target/debug/deps/libsmallvec-8444ccc488ac687a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#whoami@1.6.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/whoami-1.6.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"whoami","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/whoami-1.6.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libwhoami-974bb5e9f7f81c68.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@1.0.8","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.8/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.8/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","event","fs","net","pipe","process","std","time"],"filenames":["/home/dom/stateset-api/target/debug/build/rustix-94652d171d605f1a/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zstd-safe@7.2.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zstd-safe-7.2.4/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zstd-safe-7.2.4/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/build/zstd-safe-4cafbb07fb4196b4/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utf8parse@0.2.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf8parse-0.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utf8parse","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf8parse-0.2.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libutf8parse-ea82c360cc1c4115.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.6.29","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.6.29/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.6.29/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/home/dom/stateset-api/target/debug/deps/libregex_syntax-b979cbda3a1ea04b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hex@0.4.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.4.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hex","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.4.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libhex-4ccaaced0dd5bf6b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#home@0.5.11","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/home-0.5.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"home","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/home-0.5.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libhome-514c3f6c9ea9c6ab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@1.0.8","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.8/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.8/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","fs","std"],"filenames":["/home/dom/stateset-api/target/debug/build/rustix-bc247071573ffc44/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glob@0.3.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glob-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"glob","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/glob-0.3.3/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libglob-6b678026df480354.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#byteorder@1.5.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/byteorder-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"byteorder","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/byteorder-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libbyteorder-96b77cf0a259533b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.3.3/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.3.3/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/getrandom-dc48c38aee626ac2/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anstyle-parse@0.2.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstyle-parse-0.2.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anstyle_parse","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstyle-parse-0.2.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","utf8"],"filenames":["/home/dom/stateset-api/target/debug/deps/libanstyle_parse-d09802fbbaa1ea4a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.1.10","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.1.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_automata","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.1.10/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","regex-syntax","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libregex_automata-3e3aaf00a287d738.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer@2.0.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_normalizer","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/home/dom/stateset-api/target/debug/deps/libicu_normalizer-034a1cf64e9ea852.rlib","/home/dom/stateset-api/target/debug/deps/libicu_normalizer-034a1cf64e9ea852.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/getrandom-200dd9d0dea2a3fd/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sqlx-postgres@0.8.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-postgres-0.8.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sqlx_postgres","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-postgres-0.8.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bigdecimal","chrono","json","rust_decimal","time","uuid"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsqlx_postgres-a0f2c8a1ff497eaa.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@1.0.8","linked_libs":[],"linked_paths":[],"cfgs":["static_assertions","linux_raw","linux_like","linux_kernel"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/rustix-36705542c34031f6/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@1.0.8","linked_libs":[],"linked_paths":[],"cfgs":["static_assertions","linux_raw","linux_like","linux_kernel"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/rustix-15a57323be147ae7/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#alloc-stdlib@0.2.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloc-stdlib-0.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"alloc_stdlib","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloc-stdlib-0.2.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/liballoc_stdlib-1a6c4cae0dd0e9a0.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zstd-safe@7.2.4","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/zstd-safe-c83a1ea189ebed70/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2-diagnostics@0.10.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/proc-macro2-diagnostics-a97acdba07b63111/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties@2.0.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_properties","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/home/dom/stateset-api/target/debug/deps/libicu_properties-c73668a07db16c57.rlib","/home/dom/stateset-api/target/debug/deps/libicu_properties-c73668a07db16c57.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@1.9.3","linked_libs":[],"linked_paths":[],"cfgs":["has_std"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/indexmap-359c0f2c8b713402/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sea-query-derive@0.4.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-query-derive-0.4.3/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"sea_query_derive","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-query-derive-0.4.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libsea_query_derive-4e21ff63ae858d58.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex@1.11.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-1.11.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-1.11.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","perf","perf-backtrack","perf-cache","perf-dfa","perf-inline","perf-literal","perf-onepass","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/home/dom/stateset-api/target/debug/deps/libregex-898a98a8321e2d15.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sqlx-sqlite@0.8.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-sqlite-0.8.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sqlx_sqlite","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-sqlite-0.8.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bundled","chrono","json","serde","time","uuid"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsqlx_sqlite-9759f1dcf936876d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-lite@2.6.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-lite-2.6.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_lite","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-lite-2.6.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","fastrand","futures-io","parking","race","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libfutures_lite-53c68b411285e967.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.10.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/block-buffer-0.10.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"block_buffer","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/block-buffer-0.10.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libblock_buffer-e2045c6b93f08075.rlib","/home/dom/stateset-api/target/debug/deps/libblock_buffer-e2045c6b93f08075.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zstd-sys@2.0.15+zstd.1.5.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zstd-sys-2.0.15+zstd.1.5.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zstd_sys","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zstd-sys-2.0.15+zstd.1.5.7/src/lib.rs","edition":"2018","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libzstd_sys-cc0fd01c996efe84.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.1.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crypto-common-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crypto_common","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crypto-common-0.1.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libcrypto_common-ed699b2e7744728c.rlib","/home/dom/stateset-api/target/debug/deps/libcrypto_common-ed699b2e7744728c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#h2@0.3.27","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.3.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"h2","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.3.27/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libh2-4d97f861ec1368bb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.5.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crc32fast","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libcrc32fast-deed3617a280df1c.rlib","/home/dom/stateset-api/target/debug/deps/libcrc32fast-deed3617a280df1c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum-core@0.3.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-core-0.3.4/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-core-0.3.4/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/axum-core-7ca8dc9533c1edf6/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-channel@0.5.15","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-channel-0.5.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_channel","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-channel-0.5.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libcrossbeam_channel-a7905f8e6d7c8aa1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#inherent@1.0.12","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/inherent-1.0.12/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"inherent","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/inherent-1.0.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libinherent-622248b87c8b1ef6.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr2@2.0.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error-attr2-2.0.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"proc_macro_error_attr2","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error-attr2-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libproc_macro_error_attr2-6ea55a2eaea46fb8.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ucd-trie@0.1.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ucd-trie-0.1.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ucd_trie","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ucd-trie-0.1.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libucd_trie-a29b44964703be28.rlib","/home/dom/stateset-api/target/debug/deps/libucd_trie-a29b44964703be28.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#linux-raw-sys@0.9.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linux-raw-sys-0.9.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"linux_raw_sys","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linux-raw-sys-0.9.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["elf","errno","general","ioctl","no_std"],"filenames":["/home/dom/stateset-api/target/debug/deps/liblinux_raw_sys-efd5c3bd0a34dc5d.rlib","/home/dom/stateset-api/target/debug/deps/liblinux_raw_sys-efd5c3bd0a34dc5d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#linux-raw-sys@0.9.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linux-raw-sys-0.9.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"linux_raw_sys","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linux-raw-sys-0.9.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["elf","errno","general","if_ether","ioctl","net","netlink","no_std","prctl","xdp"],"filenames":["/home/dom/stateset-api/target/debug/deps/liblinux_raw_sys-d1ce2506fba9ce79.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytes@1.10.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytes-1.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bytes","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytes-1.10.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libbytes-47611d50659d5d8a.rlib","/home/dom/stateset-api/target/debug/deps/libbytes-47611d50659d5d8a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yansi@1.0.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"yansi","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-1.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libyansi-6fbfa203f14a75ec.rlib","/home/dom/stateset-api/target/debug/deps/libyansi-6fbfa203f14a75ec.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl@0.10.74","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-0.10.74/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-0.10.74/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/build/openssl-ce08b94cd854901f/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#colorchoice@1.0.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/colorchoice-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"colorchoice","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/colorchoice-1.0.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libcolorchoice-53596def5484d912.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitflags@1.3.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitflags-1.3.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitflags","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitflags-1.3.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libbitflags-34d353cce10aa056.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anstyle-query@1.1.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstyle-query-1.1.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anstyle_query","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstyle-query-1.1.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libanstyle_query-b0e59de1b27cdc9a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#overload@0.1.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/overload-0.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"overload","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/overload-0.1.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/liboverload-e214514fe93b81c0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anstyle@1.0.11","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstyle-1.0.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anstyle","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstyle-1.0.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libanstyle-003bff5d8267c3dc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#adler2@2.0.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/adler2-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"adler2","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/adler2-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libadler2-06568820ec9015e9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zlib-rs@0.5.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zlib-rs-0.5.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zlib_rs","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zlib-rs-0.5.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["rust-allocator","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libzlib_rs-15e49c900511e3ec.rlib","/home/dom/stateset-api/target/debug/deps/libzlib_rs-15e49c900511e3ec.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitflags@2.9.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitflags-2.9.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitflags","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitflags-2.9.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libbitflags-609a56594827799d.rlib","/home/dom/stateset-api/target/debug/deps/libbitflags-609a56594827799d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prettyplease@0.2.37","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prettyplease-0.2.37/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prettyplease-0.2.37/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/prettyplease-96bd6c1e6d279220/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#foreign-types-shared@0.1.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foreign-types-shared-0.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"foreign_types_shared","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foreign-types-shared-0.1.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libforeign_types_shared-1e0673295811270a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#is_terminal_polyfill@1.70.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/is_terminal_polyfill-1.70.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"is_terminal_polyfill","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/is_terminal_polyfill-1.70.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libis_terminal_polyfill-b0dde6472ed751b5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nu-ansi-term@0.46.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nu-ansi-term-0.46.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nu_ansi_term","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nu-ansi-term-0.46.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libnu_ansi_term-d2d7fe8193dcd79a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@1.0.8","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustix","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.8/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","fs","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/librustix-b980be3615ff4081.rlib","/home/dom/stateset-api/target/debug/deps/librustix-b980be3615ff4081.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#foreign-types@0.3.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foreign-types-0.3.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"foreign_types","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foreign-types-0.3.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libforeign_types-fdbec2a4d8f9190c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anstream@0.6.20","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstream-0.6.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anstream","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstream-0.6.20/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["auto","default","wincon"],"filenames":["/home/dom/stateset-api/target/debug/deps/libanstream-04a2d4bc7d0cee67.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#prettyplease@0.2.37","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/prettyplease-2e16d85afbf61fe0/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libz-rs-sys@0.5.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libz-rs-sys-0.5.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libz_rs_sys","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libz-rs-sys-0.5.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["rust-allocator","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/liblibz_rs_sys-3db9ede3bd307ecb.rlib","/home/dom/stateset-api/target/debug/deps/liblibz_rs_sys-3db9ede3bd307ecb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#miniz_oxide@0.8.9","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/miniz_oxide-0.8.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"miniz_oxide","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/miniz_oxide-0.8.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["with-alloc"],"filenames":["/home/dom/stateset-api/target/debug/deps/libminiz_oxide-e29f071e73729910.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@1.0.8","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustix","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.8/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","event","fs","net","pipe","process","std","time"],"filenames":["/home/dom/stateset-api/target/debug/deps/librustix-0952c5678b5ec688.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl@0.10.74","linked_libs":[],"linked_paths":[],"cfgs":["osslconf=\"OPENSSL_NO_IDEA\"","osslconf=\"OPENSSL_NO_SSL3_METHOD\"","ossl101","ossl102","ossl110","ossl110g","ossl110h","ossl111","ossl111d"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/openssl-487cc6ff28368f31/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2-diagnostics@0.10.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-diagnostics-0.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2_diagnostics","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-diagnostics-0.10.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["colors","default","yansi"],"filenames":["/home/dom/stateset-api/target/debug/deps/libproc_macro2_diagnostics-d3cbf56bdf60b22e.rlib","/home/dom/stateset-api/target/debug/deps/libproc_macro2_diagnostics-d3cbf56bdf60b22e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prost@0.13.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prost-0.13.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"prost","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prost-0.13.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["derive","prost-derive","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libprost-8c701b883268cf92.rlib","/home/dom/stateset-api/target/debug/deps/libprost-8c701b883268cf92.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error2@2.0.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error2-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro_error2","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error2-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","syn-error"],"filenames":["/home/dom/stateset-api/target/debug/deps/libproc_macro_error2-5eaa0bd714c71332.rlib","/home/dom/stateset-api/target/debug/deps/libproc_macro_error2-5eaa0bd714c71332.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum-core@0.3.4","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/axum-core-e4ab4c368df82c79/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sea-query@0.32.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-query-0.32.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sea_query","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-query-0.32.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["backend-mysql","backend-postgres","backend-sqlite","bigdecimal","chrono","derive","hashable-value","ordered-float","postgres-array","rust_decimal","sea-query-derive","serde_json","thread-safe","time","uuid","with-bigdecimal","with-chrono","with-json","with-rust_decimal","with-time","with-uuid"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsea_query-c3e7684e2fe513fa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper@0.14.32","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-0.14.32/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-0.14.32/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["client","default","full","h2","http1","http2","runtime","server","socket2","stream","tcp"],"filenames":["/home/dom/stateset-api/target/debug/deps/libhyper-fec2b1aaabe6a400.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pest@2.8.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pest-2.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pest","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pest-2.8.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","memchr","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libpest-cdc94c5f4fef8b62.rlib","/home/dom/stateset-api/target/debug/deps/libpest-cdc94c5f4fef8b62.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@1.9.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-1.9.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-1.9.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libindexmap-d56053069044b6e0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zstd-safe@7.2.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zstd-safe-7.2.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zstd_safe","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zstd-safe-7.2.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libzstd_safe-c766eafa44979d22.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sqlx@0.8.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-0.8.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sqlx","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-0.8.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["_rt-tokio","_sqlite","bigdecimal","chrono","json","postgres","runtime-tokio","runtime-tokio-rustls","rust_decimal","sqlite","sqlx-postgres","sqlx-sqlite","time","tls-rustls-ring","tls-rustls-ring-webpki","uuid"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsqlx-342cc0eae148353e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#digest@0.10.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/digest-0.10.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"digest","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/digest-0.10.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","block-buffer","core-api","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libdigest-f3db18504aeac578.rlib","/home/dom/stateset-api/target/debug/deps/libdigest-f3db18504aeac578.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#idna_adapter@1.2.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna_adapter-1.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"idna_adapter","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna_adapter-1.2.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/home/dom/stateset-api/target/debug/deps/libidna_adapter-ec66836f6ea0206e.rlib","/home/dom/stateset-api/target/debug/deps/libidna_adapter-ec66836f6ea0206e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.3.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libgetrandom-eaf6ad24e0abc6d7.rlib","/home/dom/stateset-api/target/debug/deps/libgetrandom-eaf6ad24e0abc6d7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#brotli-decompressor@5.0.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/brotli-decompressor-5.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"brotli_decompressor","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/brotli-decompressor-5.0.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc-stdlib","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libbrotli_decompressor-ffeaf8e7abd432d3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#matchers@0.1.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/matchers-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"matchers","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/matchers-0.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libmatchers-75e3f889ca43df31.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#opentelemetry@0.21.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opentelemetry-0.21.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"opentelemetry","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opentelemetry-0.21.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","metrics","pin-project-lite","trace"],"filenames":["/home/dom/stateset-api/target/debug/deps/libopentelemetry-75994f49c0f61ca5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl-sys@0.9.110","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-sys-0.9.110/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"openssl_sys","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-sys-0.9.110/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libopenssl_sys-a9b743eeae5525f7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sharded-slab@0.1.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sharded_slab","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sharded-slab-0.1.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libsharded_slab-7541bf732f80f2f9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.5.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crc32fast","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libcrc32fast-963801205e3e7dab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itertools@0.10.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itertools-0.10.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itertools","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itertools-0.10.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["use_alloc"],"filenames":["/home/dom/stateset-api/target/debug/deps/libitertools-469d256c5903f306.rlib","/home/dom/stateset-api/target/debug/deps/libitertools-469d256c5903f306.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum@0.6.20","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/axum-f63c501d426ee2cd/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-serde@0.2.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-serde-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_serde","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-serde-0.2.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libtracing_serde-70b09fb0964b29db.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_path_to_error@0.1.17","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_path_to_error-0.1.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_path_to_error","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_path_to_error-0.1.17/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libserde_path_to_error-be9d3b25184a03e1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-log@0.2.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-log-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_log","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-log-0.2.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["log-tracer","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtracing_log-025576b4447d6090.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl-macros@0.1.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-macros-0.1.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"openssl_macros","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-macros-0.1.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libopenssl_macros-9b206dc58bb748c4.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error-attr-1.0.4/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error-attr-1.0.4/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/proc-macro-error-attr-0ff54659f24af802/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/num-traits-5967db0e4a21fe12/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thread_local@1.1.9","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thread_local-1.1.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thread_local","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thread_local-1.1.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libthread_local-1c0d514c6266b2f7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#matchit@0.7.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/matchit-0.7.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"matchit","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/matchit-0.7.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libmatchit-72444e59a96abbac.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libunicode_ident-ffdc5e70bd48b73b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#strsim@0.11.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/strsim-0.11.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"strsim","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/strsim-0.11.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libstrsim-18e0031ef605dc3f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-task@4.7.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-task-4.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_task","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-task-4.7.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libasync_task-810d78088187819d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/percent-encoding-2.3.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"percent_encoding","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/percent-encoding-2.3.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libpercent_encoding-60a81271afeaf1d0.rlib","/home/dom/stateset-api/target/debug/deps/libpercent_encoding-60a81271afeaf1d0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#same-file@1.0.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/same-file-1.0.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"same_file","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/same-file-1.0.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libsame_file-d2df67f2b508411f.rlib","/home/dom/stateset-api/target/debug/deps/libsame_file-d2df67f2b508411f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#clap_lex@0.7.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_lex-0.7.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"clap_lex","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_lex-0.7.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libclap_lex-259a0a5f00bbe906.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fastrand@2.3.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fastrand-2.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fastrand","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fastrand-2.3.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libfastrand-b4060cc024c5fe86.rlib","/home/dom/stateset-api/target/debug/deps/libfastrand-b4060cc024c5fe86.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf8_iter-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utf8_iter","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf8_iter-1.0.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libutf8_iter-2379f75900dcbd97.rlib","/home/dom/stateset-api/target/debug/deps/libutf8_iter-2379f75900dcbd97.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fixedbitset@0.5.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fixedbitset-0.5.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fixedbitset","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fixedbitset-0.5.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libfixedbitset-f08ea2d7bb4f4eb0.rlib","/home/dom/stateset-api/target/debug/deps/libfixedbitset-f08ea2d7bb4f4eb0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#simd-adler32@0.3.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/simd-adler32-0.3.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"simd_adler32","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/simd-adler32-0.3.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsimd_adler32-6ed7ef004cc474a7.rlib","/home/dom/stateset-api/target/debug/deps/libsimd_adler32-6ed7ef004cc474a7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#native-tls@0.2.14","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/native-tls-0.2.14/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/native-tls-0.2.14/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/native-tls-0eb5a46bcb1bbf6f/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cpufeatures-0.2.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cpufeatures","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cpufeatures-0.2.17/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libcpufeatures-2efc13566f5cfc50.rlib","/home/dom/stateset-api/target/debug/deps/libcpufeatures-2efc13566f5cfc50.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#once_cell@1.21.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/once_cell-1.21.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"once_cell","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/once_cell-1.21.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","race","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libonce_cell-8d8f0f4e9d9a1d14.rlib","/home/dom/stateset-api/target/debug/deps/libonce_cell-8d8f0f4e9d9a1d14.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicase@2.8.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicase-2.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicase","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicase-2.8.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libunicase-eee2bf5726ab06ad.rlib","/home/dom/stateset-api/target/debug/deps/libunicase-eee2bf5726ab06ad.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bumpalo@3.19.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bumpalo-3.19.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bumpalo","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bumpalo-3.19.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libbumpalo-8d94b923e33f1669.rlib","/home/dom/stateset-api/target/debug/deps/libbumpalo-8d94b923e33f1669.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#idna@1.1.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna-1.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"idna","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna-1.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","compiled_data","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libidna-65f618e78af1ec42.rlib","/home/dom/stateset-api/target/debug/deps/libidna-65f618e78af1ec42.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#form_urlencoded@1.2.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/form_urlencoded-1.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"form_urlencoded","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/form_urlencoded-1.2.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libform_urlencoded-f166a5b3a91c04ca.rlib","/home/dom/stateset-api/target/debug/deps/libform_urlencoded-f166a5b3a91c04ca.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#clap_builder@4.5.44","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_builder-4.5.44/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"clap_builder","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_builder-4.5.44/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["color","env","error-context","help","std","suggestions","usage"],"filenames":["/home/dom/stateset-api/target/debug/deps/libclap_builder-4ad7d6459bca0d2f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#walkdir@2.5.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/walkdir-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"walkdir","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/walkdir-2.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libwalkdir-572c9b1825133edf.rlib","/home/dom/stateset-api/target/debug/deps/libwalkdir-572c9b1825133edf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sha2@0.10.9","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sha2-0.10.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sha2","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sha2-0.10.9/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsha2-48fdd9c6ac549f5f.rlib","/home/dom/stateset-api/target/debug/deps/libsha2-48fdd9c6ac549f5f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime_guess@2.0.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mime_guess-2.0.5/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mime_guess-2.0.5/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","rev-mappings"],"filenames":["/home/dom/stateset-api/target/debug/build/mime_guess-e25625b1c0da4f33/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zopfli@0.8.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zopfli-0.8.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zopfli","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zopfli-0.8.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","gzip","std","zlib"],"filenames":["/home/dom/stateset-api/target/debug/deps/libzopfli-05b3bee41140ad96.rlib","/home/dom/stateset-api/target/debug/deps/libzopfli-05b3bee41140ad96.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tempfile@3.21.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tempfile-3.21.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tempfile","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tempfile-3.21.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","getrandom"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtempfile-b64220ad010ef2a7.rlib","/home/dom/stateset-api/target/debug/deps/libtempfile-b64220ad010ef2a7.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#native-tls@0.2.14","linked_libs":[],"linked_paths":[],"cfgs":["have_min_max_version"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/native-tls-939a6896a9726fec/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#petgraph@0.7.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/petgraph-0.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"petgraph","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/petgraph-0.7.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libpetgraph-2862fdf519c80aba.rlib","/home/dom/stateset-api/target/debug/deps/libpetgraph-2862fdf519c80aba.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","linked_libs":[],"linked_paths":[],"cfgs":["has_total_cmp"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/num-traits-0f8b2e2de74c29c2/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl@0.10.74","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-0.10.74/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"openssl","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-0.10.74/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libopenssl-1c0a23b4871cf8b5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-subscriber@0.3.19","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-subscriber-0.3.19/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_subscriber","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-subscriber-0.3.19/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","ansi","default","env-filter","fmt","json","matchers","nu-ansi-term","once_cell","regex","registry","serde","serde_json","sharded-slab","smallvec","std","thread_local","tracing","tracing-log","tracing-serde"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtracing_subscriber-b843b4c8be307285.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.101","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.101/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.101/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/home/dom/stateset-api/target/debug/deps/libproc_macro2-927bf13b8a52fd1f.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/proc-macro-error-attr-9273c0f262b49d85/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#flate2@1.1.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flate2-1.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"flate2","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flate2-1.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["any_impl","default","miniz_oxide","rust_backend"],"filenames":["/home/dom/stateset-api/target/debug/deps/libflate2-34d83fb0caa3e409.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum@0.6.20","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/axum-b7500e6e8189f749/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prost-derive@0.11.9","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prost-derive-0.11.9/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"prost_derive","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prost-derive-0.11.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libprost_derive-a02b131a74f6d5eb.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sea-query-binder@0.7.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-query-binder-0.7.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sea_query_binder","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-query-binder-0.7.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bigdecimal","chrono","postgres-array","runtime-tokio-rustls","rust_decimal","serde_json","sqlx","sqlx-postgres","sqlx-sqlite","time","uuid","with-bigdecimal","with-chrono","with-json","with-rust_decimal","with-time","with-uuid"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsea_query_binder-bb795e28ede1e785.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zstd@0.13.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zstd-0.13.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zstd","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zstd-0.13.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libzstd-caf99162ab8267c6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#brotli@8.0.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/brotli-8.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"brotli","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/brotli-8.0.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc-stdlib","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libbrotli-99c500673b736e0b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prost-types@0.13.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prost-types-0.13.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"prost_types","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prost-types-0.13.5/src/lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libprost_types-8ad9f080e9a19175.rlib","/home/dom/stateset-api/target/debug/deps/libprost_types-8ad9f080e9a19175.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum-core@0.3.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-core-0.3.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"axum_core","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-core-0.3.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libaxum_core-c7be8ae050ec0d40.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sea-bae@0.2.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-bae-0.2.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"sea_bae","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-bae-0.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libsea_bae-e342456abb0c50f7.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ouroboros_macro@0.18.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ouroboros_macro-0.18.5/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"ouroboros_macro","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ouroboros_macro-0.18.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libouroboros_macro-354dcc4e77f12197.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower@0.4.13","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-0.4.13/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-0.4.13/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["__common","balance","buffer","discover","futures-core","futures-util","indexmap","limit","load","make","pin-project","pin-project-lite","rand","ready-cache","slab","timeout","tokio","tokio-util","tracing","util"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtower-1bdb93ba1dac8e05.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pest_meta@2.8.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pest_meta-2.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pest_meta","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pest_meta-2.8.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libpest_meta-011fd27f2090dde8.rlib","/home/dom/stateset-api/target/debug/deps/libpest_meta-011fd27f2090dde8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polling@3.10.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polling-3.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"polling","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polling-3.10.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libpolling-50d56cb88d765b96.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prettyplease@0.2.37","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prettyplease-0.2.37/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"prettyplease","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prettyplease-0.2.37/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libprettyplease-81c10b5b9a074105.rlib","/home/dom/stateset-api/target/debug/deps/libprettyplease-81c10b5b9a074105.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#flate2@1.1.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flate2-1.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"flate2","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flate2-1.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["any_impl","any_zlib","libz-rs-sys","zlib-rs"],"filenames":["/home/dom/stateset-api/target/debug/deps/libflate2-37db3845d29c75a8.rlib","/home/dom/stateset-api/target/debug/deps/libflate2-37db3845d29c75a8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-channel@2.5.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-channel-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_channel","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-channel-2.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libasync_channel-5d6c83f2eb1e9eb5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-lock@3.4.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-lock-3.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_lock","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-lock-3.4.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libasync_lock-69100fc7c98df724.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#piper@0.2.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/piper-0.2.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"piper","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/piper-0.2.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","futures-io","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libpiper-d65dbf418dc2844d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum-core@0.5.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-core-0.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"axum_core","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-core-0.5.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libaxum_core-856b3cd0bfafd5fe.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#clap_derive@4.5.45","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_derive-4.5.45/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"clap_derive","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_derive-4.5.45/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libclap_derive-69a286726a474017.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#strum_macros@0.26.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/strum_macros-0.26.4/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"strum_macros","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/strum_macros-0.26.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libstrum_macros-bcd882311e27773f.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures@0.3.31","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","async-await","default","executor","futures-executor","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libfutures-b533d2dff4ddbd9f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-io-timeout@1.2.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-io-timeout-1.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_io_timeout","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-io-timeout-1.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libtokio_io_timeout-2438a2b4a3bf563d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-stream-impl@0.3.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-stream-impl-0.3.6/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"async_stream_impl","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-stream-impl-0.3.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libasync_stream_impl-33770c34cb0c7d03.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error-1.0.4/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error-1.0.4/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","syn","syn-error"],"filenames":["/home/dom/stateset-api/target/debug/build/proc-macro-error-75dd2576901ee3d8/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#multimap@0.10.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/multimap-0.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"multimap","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/multimap-0.10.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libmultimap-9e86120a5e1f9af7.rlib","/home/dom/stateset-api/target/debug/deps/libmultimap-9e86120a5e1f9af7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#base64@0.13.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64-0.13.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"base64","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64-0.13.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libbase64-7426483b60b9f573.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#matchit@0.8.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/matchit-0.8.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"matchit","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/matchit-0.8.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libmatchit-ee3112b52c247dd1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#compression-core@0.4.28","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/compression-core-0.4.28/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"compression_core","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/compression-core-0.4.28/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libcompression_core-8c903376232eae7c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#same-file@1.0.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/same-file-1.0.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"same_file","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/same-file-1.0.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libsame_file-6b9c306dc931542e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","parsing","printing","proc-macro","quote"],"filenames":["/home/dom/stateset-api/target/debug/build/syn-f2b96d4756687640/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aliasable@0.1.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/aliasable-0.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aliasable","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/aliasable-0.1.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libaliasable-6fa5bec914ea70ce.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#static_assertions@1.1.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/static_assertions-1.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"static_assertions","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/static_assertions-1.1.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libstatic_assertions-be75733ca332ba0f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl-probe@0.1.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-probe-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"openssl_probe","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-probe-0.1.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libopenssl_probe-b4270100e2b62494.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#base64@0.21.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64-0.21.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"base64","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64-0.21.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libbase64-c5cb9a52f2075ae5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sync_wrapper@0.1.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sync_wrapper-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sync_wrapper","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sync_wrapper-0.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libsync_wrapper-cc574eb954b2ae89.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum@0.8.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.8.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"axum","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.8.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["json"],"filenames":["/home/dom/stateset-api/target/debug/deps/libaxum-5a0a425594604ebe.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","linked_libs":[],"linked_paths":[],"cfgs":["syn_disable_nightly_tests"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/syn-21566427da8c3456/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum@0.6.20","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"axum","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libaxum-9cdac4801899e7f5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#native-tls@0.2.14","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/native-tls-0.2.14/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"native_tls","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/native-tls-0.2.14/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libnative_tls-85ff156d7e0cbf02.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#walkdir@2.5.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/walkdir-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"walkdir","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/walkdir-2.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libwalkdir-e3c0dded7ecb8861.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ouroboros@0.18.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ouroboros-0.18.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ouroboros","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ouroboros-0.18.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libouroboros-0364420d85ac8f04.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#compression-codecs@0.4.28","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/compression-codecs-0.4.28/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"compression_codecs","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/compression-codecs-0.4.28/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["brotli","flate2","gzip","libzstd","zlib","zstd","zstd-safe"],"filenames":["/home/dom/stateset-api/target/debug/deps/libcompression_codecs-ead38a96e6a0e191.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4","linked_libs":[],"linked_paths":[],"cfgs":["use_fallback"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/proc-macro-error-1c3806fd5c9291ab/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper-timeout@0.4.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-timeout-0.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper_timeout","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-timeout-0.4.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libhyper_timeout-604ff8bb6e776779.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prost-build@0.13.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prost-build-0.13.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"prost_build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prost-build-0.13.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","format"],"filenames":["/home/dom/stateset-api/target/debug/deps/libprost_build-72d1123055cdd95f.rlib","/home/dom/stateset-api/target/debug/deps/libprost_build-72d1123055cdd95f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-stream@0.3.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-stream-0.3.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_stream","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-stream-0.3.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libasync_stream-18a20c67ea542b34.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zip@3.0.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zip-3.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zip","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zip-3.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["_deflate-any","deflate","deflate-flate2","deflate-flate2-zlib-rs","deflate-zopfli","zopfli"],"filenames":["/home/dom/stateset-api/target/debug/deps/libzip-5809fe53f86fb358.rlib","/home/dom/stateset-api/target/debug/deps/libzip-5809fe53f86fb358.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-io@2.5.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-io-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_io","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-io-2.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libasync_io-e9263b85bd7bda48.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#strum@0.26.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/strum-0.26.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"strum","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/strum-0.26.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","std","strum_macros"],"filenames":["/home/dom/stateset-api/target/debug/deps/libstrum-6188bcf3b8291669.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#clap@4.5.45","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-4.5.45/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"clap","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-4.5.45/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["color","default","derive","env","error-context","help","std","suggestions","usage"],"filenames":["/home/dom/stateset-api/target/debug/deps/libclap-2968b1af7d41c438.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#blocking@1.6.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/blocking-1.6.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"blocking","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/blocking-1.6.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libblocking-c91df01d991a81c1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sea-orm-macros@1.1.14","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-macros-1.1.14/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"sea_orm_macros","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-macros-1.1.14/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bae","derive","postgres-array","strum"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsea_orm_macros-80a1f27deb3ec9d2.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pest_generator@2.8.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pest_generator-2.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pest_generator","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pest_generator-2.8.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libpest_generator-f8547db9691b5dec.rlib","/home/dom/stateset-api/target/debug/deps/libpest_generator-f8547db9691b5dec.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prost@0.11.9","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prost-0.11.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"prost","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prost-0.11.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","prost-derive","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libprost-98e36d572d5d9d55.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.40/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.40/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["proc-macro"],"filenames":["/home/dom/stateset-api/target/debug/deps/libquote-ea34e8cc2ef58427.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error-attr-1.0.4/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"proc_macro_error_attr","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error-attr-1.0.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libproc_macro_error_attr-216a5379377418b0.so"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime_guess@2.0.5","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[["MIME_TYPES_GENERATED_PATH","/home/dom/stateset-api/target/debug/build/mime_guess-97bea976a54f6793/out/mime_types_generated.rs"]],"out_dir":"/home/dom/stateset-api/target/debug/build/mime_guess-97bea976a54f6793/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_traits","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libnum_traits-30f7301514164bb7.rlib","/home/dom/stateset-api/target/debug/deps/libnum_traits-30f7301514164bb7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust-embed-utils@8.7.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust-embed-utils-8.7.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rust_embed_utils","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust-embed-utils-8.7.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/librust_embed_utils-3a0c3a95295f5457.rlib","/home/dom/stateset-api/target/debug/deps/librust_embed_utils-3a0c3a95295f5457.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#url@2.5.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/url-2.5.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"url","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/url-2.5.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","serde","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/liburl-0903b7e673c1768d.rlib","/home/dom/stateset-api/target/debug/deps/liburl-0903b7e673c1768d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-executor@1.13.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-executor-1.13.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_executor","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-executor-1.13.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libasync_executor-b0275d4d7f9d90bb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#opentelemetry_sdk@0.21.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opentelemetry_sdk-0.21.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"opentelemetry_sdk","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opentelemetry_sdk-0.21.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["async-trait","crossbeam-channel","default","glob","metrics","percent-encoding","rand","rt-tokio","tokio","tokio-stream","trace"],"filenames":["/home/dom/stateset-api/target/debug/deps/libopentelemetry_sdk-063db7bd0a916949.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prost@0.13.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prost-0.13.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"prost","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prost-0.13.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","prost-derive","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libprost-edf8c53a5b66d770.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#uuid@1.18.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"uuid","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","serde","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libuuid-178145cfdf758aff.rlib","/home/dom/stateset-api/target/debug/deps/libuuid-178145cfdf758aff.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sea-schema-derive@0.3.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-schema-derive-0.3.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"sea_schema_derive","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-schema-derive-0.3.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libsea_schema_derive-e24705f2ef50bf50.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.16.20","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.16.20/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.16.20/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","dev_urandom_fallback","once_cell","std"],"filenames":["/home/dom/stateset-api/target/debug/build/ring-bbff24b1bf401985/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ahash-0.8.12/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ahash-0.8.12/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/ahash-a58a0b42ca789794/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iana-time-zone@0.1.63","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/iana-time-zone-0.1.63/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iana_time_zone","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/iana-time-zone-0.1.63/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["fallback"],"filenames":["/home/dom/stateset-api/target/debug/deps/libiana_time_zone-510e0ce6e1e8b496.rlib","/home/dom/stateset-api/target/debug/deps/libiana_time_zone-510e0ce6e1e8b496.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ucd-trie@0.1.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ucd-trie-0.1.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ucd_trie","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ucd-trie-0.1.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libucd_trie-d4678414430455fb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicase@2.8.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicase-2.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicase","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicase-2.8.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libunicase-b702adde543582bc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#protobuf@2.28.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/protobuf-2.28.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/protobuf-2.28.0/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/build/protobuf-5a1e847c2dea3fbf/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#event-listener@2.5.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/event-listener-2.5.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"event_listener","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/event-listener-2.5.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libevent_listener-94f7cffd21c377e7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dlv-list@0.3.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dlv-list-0.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dlv_list","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dlv-list-0.3.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libdlv_list-c66f9c95afc2434b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sea-schema@0.16.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-schema-0.16.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sea_schema","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-schema-0.16.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["def","discovery","futures","parser","postgres","probe","query","runtime-tokio-rustls","sea-query-binder","sqlite","sqlx","sqlx-dep","sqlx-postgres","sqlx-sqlite","writer"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsea_schema-ca61b5f0b71c09e9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-global-executor@2.4.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-global-executor-2.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_global_executor","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-global-executor-2.4.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["async-io","default","tokio","tokio-crate"],"filenames":["/home/dom/stateset-api/target/debug/deps/libasync_global_executor-c3867dc85ba17d63.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12","linked_libs":[],"linked_paths":[],"cfgs":["folded_multiply"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/ahash-040b9bb7ea7c9eab/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-channel@1.9.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-channel-1.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_channel","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-channel-1.9.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libasync_channel-83de2c0591ce4bbf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pest@2.8.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pest-2.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pest","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pest-2.8.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","memchr","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libpest-f98bb606c903c0f9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ordered-multimap@0.4.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ordered-multimap-0.4.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ordered_multimap","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ordered-multimap-0.4.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libordered_multimap-713ca4625345f3b8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime_guess@2.0.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mime_guess-2.0.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mime_guess","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mime_guess-2.0.5/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","rev-mappings"],"filenames":["/home/dom/stateset-api/target/debug/deps/libmime_guess-df312d3739df3a22.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#protobuf@2.28.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/protobuf-39ab6bbbf0f148d3/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.16.20","linked_libs":["static=ring-core","static=ring-test"],"linked_paths":["native=/home/dom/stateset-api/target/debug/build/ring-de7cce3bede1977c/out"],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/ring-de7cce3bede1977c/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa-gen@5.4.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-gen-5.4.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"utoipa_gen","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-gen-5.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["axum_extras","chrono","decimal","regex","uuid"],"filenames":["/home/dom/stateset-api/target/debug/deps/libutoipa_gen-ec1c2e416a10cb60.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chrono@0.4.41","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"chrono","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","android-tzdata","clock","default","iana-time-zone","js-sys","now","oldtime","serde","std","wasm-bindgen","wasmbind","winapi","windows-link"],"filenames":["/home/dom/stateset-api/target/debug/deps/libchrono-38bd06e3fc65e7b6.rlib","/home/dom/stateset-api/target/debug/deps/libchrono-38bd06e3fc65e7b6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa-swagger-ui@9.0.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-swagger-ui-9.0.2/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-swagger-ui-9.0.2/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["axum","default","url"],"filenames":["/home/dom/stateset-api/target/debug/build/utoipa-swagger-ui-c108dd744ab5b630/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust-embed-impl@8.7.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust-embed-impl-8.7.2/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"rust_embed_impl","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust-embed-impl-8.7.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/librust_embed_impl-8dc6ba965bc821fa.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pest_derive@2.8.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pest_derive-2.8.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"pest_derive","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pest_derive-2.8.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libpest_derive-40f1f24b36da87f9.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","parsing","printing","proc-macro","quote"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsyn-51e061b34a19386c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro_error","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error-1.0.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","syn","syn-error"],"filenames":["/home/dom/stateset-api/target/debug/deps/libproc_macro_error-78a9a3ad5009a67d.rlib","/home/dom/stateset-api/target/debug/deps/libproc_macro_error-78a9a3ad5009a67d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tonic@0.9.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tonic-0.9.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tonic","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tonic-0.9.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["channel","codegen","default","prost","transport"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtonic-68b726f27f4c7f37.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sea-orm@1.1.14","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sea_orm","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bigdecimal","chrono","debug-print","default","macros","postgres-array","runtime-tokio","runtime-tokio-rustls","rust_decimal","sea-query-binder","serde_json","sqlx","sqlx-dep","sqlx-postgres","sqlx-sqlite","time","uuid","with-bigdecimal","with-chrono","with-json","with-rust_decimal","with-time","with-uuid"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsea_orm-cfcc144004fb5f66.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sea-orm-cli@1.1.14","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-cli-1.1.14/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sea_orm_cli","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-cli-1.1.14/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clap","cli","dotenvy","runtime-tokio-rustls","sqlx-postgres","sqlx-sqlite"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsea_orm_cli-cab679a8b467243c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tonic-build@0.13.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tonic-build-0.13.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tonic_build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tonic-build-0.13.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","prost","prost-build","transport"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtonic_build-66ae510354dda5c7.rlib","/home/dom/stateset-api/target/debug/deps/libtonic_build-66ae510354dda5c7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-native-tls@0.3.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-native-tls-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_native_tls","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-native-tls-0.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libtokio_native_tls-025e5410d518f0be.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust-embed-utils@8.7.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust-embed-utils-8.7.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rust_embed_utils","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust-embed-utils-8.7.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/librust_embed_utils-67fb57914e04f362.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-compression@0.4.28","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-compression-0.4.28/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_compression","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-compression-0.4.28/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["brotli","flate2","gzip","libzstd","tokio","zlib","zstd","zstd-safe"],"filenames":["/home/dom/stateset-api/target/debug/deps/libasync_compression-c4d11569b612615d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper-timeout@0.5.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-timeout-0.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper_timeout","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-timeout-0.5.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libhyper_timeout-933b39d05f975013.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#opentelemetry@0.22.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opentelemetry-0.22.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"opentelemetry","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opentelemetry-0.22.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","pin-project-lite","trace"],"filenames":["/home/dom/stateset-api/target/debug/deps/libopentelemetry-3f1720fa4340026c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-attributes@1.1.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-attributes-1.1.2/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"async_attributes","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-attributes-1.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libasync_attributes-655d6408f57d39b9.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#validator_types@0.14.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/validator_types-0.14.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"validator_types","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/validator_types-0.14.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libvalidator_types-520db6902dbc621a.rlib","/home/dom/stateset-api/target/debug/deps/libvalidator_types-520db6902dbc621a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-rustls@0.26.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-rustls-0.26.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_rustls","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-rustls-0.26.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ring","tls12"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtokio_rustls-d8e42dce8f3162d2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#kv-log-macro@1.0.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/kv-log-macro-1.0.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kv_log_macro","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/kv-log-macro-1.0.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libkv_log_macro-f0cb5d70f8a22ce1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#base64ct@1.8.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64ct-1.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"base64ct","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64ct-1.8.0/src/lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libbase64ct-aa9d5afe53d4acf7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/untrusted-0.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"untrusted","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/untrusted-0.7.1/src/untrusted.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libuntrusted-c488fe2f069ee636.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#minimal-lexical@0.2.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/minimal-lexical-0.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"minimal_lexical","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/minimal-lexical-0.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libminimal_lexical-3e953c2482256a93.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/spin-0.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"spin","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/spin-0.5.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libspin-9cd13e53843fdf1f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#linked-hash-map@0.5.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linked-hash-map-0.5.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"linked_hash_map","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linked-hash-map-0.5.6/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/liblinked_hash_map-beb0275bf5048878.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prometheus@0.13.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prometheus-0.13.4/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prometheus-0.13.4/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","protobuf"],"filenames":["/home/dom/stateset-api/target/debug/build/prometheus-fb5211ca7b4c2300/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slog@2.7.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slog-2.7.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slog-2.7.0/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","max_level_trace","release_max_level_info","std"],"filenames":["/home/dom/stateset-api/target/debug/build/slog-4608872d0495ec9e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#if_chain@1.0.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/if_chain-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"if_chain","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/if_chain-1.0.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libif_chain-0f10e67beb8b507d.rlib","/home/dom/stateset-api/target/debug/deps/libif_chain-0f10e67beb8b507d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#matches@0.1.10","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/matches-0.1.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"matches","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/matches-0.1.10/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libmatches-62759305eec8b6aa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.5.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lazy_static-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lazy_static","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lazy_static-1.5.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/liblazy_static-4f23730150718286.rlib","/home/dom/stateset-api/target/debug/deps/liblazy_static-4f23730150718286.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iri-string@0.7.8","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/iri-string-0.7.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iri_string","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/iri-string-0.7.8/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libiri_string-f3d8495e7a18412f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.16.20","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.16.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ring","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.16.20/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","dev_urandom_fallback","once_cell","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libring-8e030fdbc343897f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yaml-rust@0.4.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yaml-rust-0.4.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"yaml_rust","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yaml-rust-0.4.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libyaml_rust-7877a760ec516f61.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper-rustls@0.27.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-rustls-0.27.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper_rustls","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-rustls-0.27.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["http1","http2","ring","tls12","webpki-roots","webpki-tokio"],"filenames":["/home/dom/stateset-api/target/debug/deps/libhyper_rustls-3cbc2d4c9cf99ad2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#validator_derive@0.14.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/validator_derive-0.14.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"validator_derive","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/validator_derive-0.14.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libvalidator_derive-e9427264436991f5.so"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#slog@2.7.0","linked_libs":[],"linked_paths":[],"cfgs":["integer128"],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/slog-e5499f84a8f47183/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower-http@0.6.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower_http","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["follow-redirect","futures-util","iri-string","tower"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtower_http-79584464e201e13c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#idna@0.2.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna-0.2.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"idna","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna-0.2.3/src/lib.rs","edition":"2018","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libidna-4dbf15c41fdb7963.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#password-hash@0.5.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/password-hash-0.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"password_hash","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/password-hash-0.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","rand_core","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libpassword_hash-ff164c9eb813ab63.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nom@7.1.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nom","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-7.1.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libnom-6907279c80f610bd.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#prometheus@0.13.4","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/prometheus-064e9ace8df46c26/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-std@1.13.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-std-1.13.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_std","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-std-1.13.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","async-attributes","async-channel","async-global-executor","async-io","async-lock","attributes","crossbeam-utils","default","futures-channel","futures-core","futures-io","futures-lite","gloo-timers","kv-log-macro","log","memchr","once_cell","pin-project-lite","pin-utils","slab","std","tokio1","wasm-bindgen-futures"],"filenames":["/home/dom/stateset-api/target/debug/deps/libasync_std-207bdaeae096cad6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#opentelemetry_sdk@0.22.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opentelemetry_sdk-0.22.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"opentelemetry_sdk","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opentelemetry_sdk-0.22.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["async-trait","crossbeam-channel","percent-encoding","rand","trace"],"filenames":["/home/dom/stateset-api/target/debug/deps/libopentelemetry_sdk-c222f1b5193dcd43.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper-tls@0.6.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-tls-0.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper_tls","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-tls-0.6.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libhyper_tls-2c50f1ab15cb1c0e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/dom/stateset-api/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/build/stateset-api-aa529a2fac5c192e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust-embed@8.7.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust-embed-8.7.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rust_embed","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust-embed-8.7.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/librust_embed-affb7a6eb806ede5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tonic@0.13.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tonic-0.13.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tonic","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tonic-0.13.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["channel","codegen","default","prost","router","server","transport"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtonic-3583d99bf78f318c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#json5@0.4.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/json5-0.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"json5","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/json5-0.4.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libjson5-bd141a8ef9b9a30f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#opentelemetry-proto@0.4.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opentelemetry-proto-0.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"opentelemetry_proto","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opentelemetry-proto-0.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["gen-tonic","gen-tonic-messages","prost","tonic","trace"],"filenames":["/home/dom/stateset-api/target/debug/deps/libopentelemetry_proto-2ac9aeacf8e100a3.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa-swagger-ui@9.0.2","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/dom/stateset-api/target/debug/build/utoipa-swagger-ui-0a4a0d3f8492ef94/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#validator_types@0.14.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/validator_types-0.14.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"validator_types","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/validator_types-0.14.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libvalidator_types-48c2861d152ed2a3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sea-orm-migration@1.1.14","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-migration-1.1.14/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sea_orm_migration","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-migration-1.1.14/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clap","cli","default","dotenvy","runtime-tokio-rustls","sea-orm-cli","sqlx-postgres","sqlx-sqlite"],"filenames":["/home/dom/stateset-api/target/debug/deps/libsea_orm_migration-219841f705f4ec53.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa@5.4.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utoipa","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["axum_extras","chrono","decimal","default","macros","uuid"],"filenames":["/home/dom/stateset-api/target/debug/deps/libutoipa-642b94883e0d5297.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust-ini@0.18.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust-ini-0.18.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ini","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust-ini-0.18.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libini-053b0b728862bc2d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#protobuf@2.28.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/protobuf-2.28.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"protobuf","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/protobuf-2.28.0/src/lib.rs","edition":"2018","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libprotobuf-d13b44e742928caf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ahash-0.8.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ahash","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ahash-0.8.12/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libahash-270690504b3dcd76.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ron@0.7.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ron-0.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ron","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ron-0.7.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libron-cab2ac387e57cc95.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pem@1.1.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pem-1.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pem","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pem-1.1.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libpem-7263518f5bf97211.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#opentelemetry-semantic-conventions@0.13.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opentelemetry-semantic-conventions-0.13.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"opentelemetry_semantic_conventions","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opentelemetry-semantic-conventions-0.13.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libopentelemetry_semantic_conventions-d8acb9b0803b998c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum-core@0.4.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-core-0.4.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"axum_core","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-core-0.4.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["tracing"],"filenames":["/home/dom/stateset-api/target/debug/deps/libaxum_core-bf2887e0d7a82923.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#simple_asn1@0.6.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/simple_asn1-0.6.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"simple_asn1","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/simple_asn1-0.6.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libsimple_asn1-e315159b79fd3972.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#blake2@0.10.6","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/blake2-0.10.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"blake2","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/blake2-0.10.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libblake2-8d2f915b76f0f40e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#combine@4.6.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/combine-4.6.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"combine","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/combine-4.6.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","bytes","futures-core-03","pin-project-lite","std","tokio","tokio-dep","tokio-util"],"filenames":["/home/dom/stateset-api/target/debug/deps/libcombine-20fdf41fcc842cd5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml@0.5.11","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml-0.5.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/toml-0.5.11/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtoml-4c6548d172c0f464.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#metrics-macros@0.7.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/metrics-macros-0.7.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"metrics_macros","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/metrics-macros-0.7.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libmetrics_macros-9d4640150fc682bb.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#encoding_rs@0.8.35","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/encoding_rs-0.8.35/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"encoding_rs","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/encoding_rs-0.8.35/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default"],"filenames":["/home/dom/stateset-api/target/debug/deps/libencoding_rs-10e55c842f376659.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http-range-header@0.4.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-range-header-0.4.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http_range_header","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-range-header-0.4.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libhttp_range_header-c134407cb25ca1af.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.14.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.14.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.14.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libhashbrown-ca82eda88d75a7f1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arc-swap@1.7.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arc-swap-1.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arc_swap","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arc-swap-1.7.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libarc_swap-e92620abeb57bd62.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pathdiff@0.2.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pathdiff-0.2.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pathdiff","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pathdiff-0.2.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libpathdiff-6844f19057df889f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#opentelemetry-otlp@0.14.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opentelemetry-otlp-0.14.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"opentelemetry_otlp","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opentelemetry-otlp-0.14.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","grpc-tonic","http","prost","tokio","tonic","trace"],"filenames":["/home/dom/stateset-api/target/debug/deps/libopentelemetry_otlp-ca61351501b0705d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#reqwest@0.12.24","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/reqwest-0.12.24/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"reqwest","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/reqwest-0.12.24/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["__rustls","__rustls-ring","__tls","charset","default","default-tls","gzip","h2","http2","json","rustls-tls","rustls-tls-webpki-roots","rustls-tls-webpki-roots-no-provider","system-proxy"],"filenames":["/home/dom/stateset-api/target/debug/deps/libreqwest-0652aede7ca05c07.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#jsonwebtoken@8.3.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jsonwebtoken-8.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"jsonwebtoken","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jsonwebtoken-8.3.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","pem","simple_asn1","use_pem"],"filenames":["/home/dom/stateset-api/target/debug/deps/libjsonwebtoken-89cb5b931660e0ee.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#argon2@0.5.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/argon2-0.5.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"argon2","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/argon2-0.5.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","password-hash","rand","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libargon2-444ff5c5da08ec0e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dashmap@5.5.3","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dashmap-5.5.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dashmap","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dashmap-5.5.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libdashmap-99e2c1d0b0e64eb3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#redis@0.21.7","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/redis-0.21.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"redis","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/redis-0.21.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["aio","arc-swap","bytes","connection-manager","futures","futures-util","pin-project-lite","tokio","tokio-comp","tokio-util"],"filenames":["/home/dom/stateset-api/target/debug/deps/libredis-d8cfcc0fe92cc317.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower-http@0.5.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower_http","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.5.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["async-compression","compression-br","compression-deflate","compression-full","compression-gzip","compression-zstd","cors","default","fs","futures-core","futures-util","httpdate","mime","mime_guess","percent-encoding","set-status","timeout","tokio","tokio-util","trace","tracing"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtower_http-550607e96f9ea95b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#config@0.13.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/config-0.13.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"config","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/config-0.13.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","ini","json","json5","json5_rs","ron","rust-ini","serde_json","toml","yaml","yaml-rust"],"filenames":["/home/dom/stateset-api/target/debug/deps/libconfig-cb5c4181422d31f5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum@0.7.9","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.7.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"axum","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.7.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","form","http1","json","matched-path","original-uri","query","tokio","tower-log","tracing"],"filenames":["/home/dom/stateset-api/target/debug/deps/libaxum-6fed8b4334822254.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#metrics@0.21.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/metrics-0.21.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"metrics","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/metrics-0.21.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libmetrics-69a1d108c1e502a2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa-swagger-ui@9.0.2","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-swagger-ui-9.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utoipa_swagger_ui","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-swagger-ui-9.0.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["axum","default","url"],"filenames":["/home/dom/stateset-api/target/debug/deps/libutoipa_swagger_ui-93cbe90e15726c65.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prometheus@0.13.4","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prometheus-0.13.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"prometheus","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prometheus-0.13.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","protobuf"],"filenames":["/home/dom/stateset-api/target/debug/deps/libprometheus-9af594122ba61184.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#validator@0.14.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/validator-0.14.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"validator","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/validator-0.14.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["derive","validator_derive"],"filenames":["/home/dom/stateset-api/target/debug/deps/libvalidator-6d15b5a8ae62a38b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///home/dom/stateset-api/migrations#0.1.0","manifest_path":"/home/dom/stateset-api/migrations/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"migrations","src_path":"/home/dom/stateset-api/migrations/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libmigrations-792832bb6f1de679.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tonic-web@0.13.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tonic-web-0.13.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tonic_web","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tonic-web-0.13.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libtonic_web-64b78183dc358e43.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"path+file:///home/dom/stateset-api#0.1.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[["GIT_HASH","67ad68a"],["BUILD_TIME","2025-10-19T18:56:40.518112943+00:00"]],"out_dir":"/home/dom/stateset-api/target/debug/build/stateset-api-318036816649904f/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#opentelemetry-stdout@0.3.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opentelemetry-stdout-0.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"opentelemetry_stdout","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/opentelemetry-stdout-0.3.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["futures-util","trace"],"filenames":["/home/dom/stateset-api/target/debug/deps/libopentelemetry_stdout-991fe1eba1512e89.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slog@2.7.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slog-2.7.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"slog","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slog-2.7.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","max_level_trace","release_max_level_info","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libslog-dba0696b4dfd0403.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-opentelemetry@0.22.0","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-opentelemetry-0.22.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_opentelemetry","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-opentelemetry-0.22.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","metrics","smallvec","tracing-log"],"filenames":["/home/dom/stateset-api/target/debug/deps/libtracing_opentelemetry-886e8a2a0a33f819.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prost-types@0.13.5","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prost-types-0.13.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"prost_types","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/prost-types-0.13.5/src/lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libprost_types-3b58a36ae58ebb2b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bigdecimal@0.3.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bigdecimal-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bigdecimal","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bigdecimal-0.3.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde"],"filenames":["/home/dom/stateset-api/target/debug/deps/libbigdecimal-139c6c60fcdd4884.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.99","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anyhow-1.0.99/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anyhow","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anyhow-1.0.99/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/dom/stateset-api/target/debug/deps/libanyhow-bd4207286f9386d7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust_decimal_macros@1.37.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust_decimal_macros-1.37.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"rust_decimal_macros","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust_decimal_macros-1.37.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/dom/stateset-api/target/debug/deps/librust_decimal_macros-9fe4c03f9a5e4d1a.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-recursion@1.1.1","manifest_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-recursion-1.1.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"async_recursion","src_path":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-recursion-1.1.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/dom/stateset-api/target/debug/deps/libasync_recursion-520c2dfcdbe29555.so"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `returns::ReturnService`, `shipments::ShipmentService`, `warranties::WarrantyService`, and `work_orders::WorkOrderService`\n --> src/api.rs:8:23\n  |\n8 | use crate::services::{returns::ReturnService, warranties::WarrantyService, shipments::ShipmentService, work_orders::WorkOrderService};\n  |                       ^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_imports)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":304,"byte_start":169,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/api.rs","is_primary":true,"label":null,"line_end":9,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":135,"highlight_start":1,"text":"use crate::services::{returns::ReturnService, warranties::WarrantyService, shipments::ShipmentService, work_orders::WorkOrderService};"},{"highlight_end":1,"highlight_start":1,"text":"use crate::{"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `returns::ReturnService`, `shipments::ShipmentService`, `warranties::WarrantyService`, and `work_orders::WorkOrderService`","spans":[{"byte_end":213,"byte_start":191,"column_end":45,"column_start":23,"expansion":null,"file_name":"src/api.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":23,"text":"use crate::services::{returns::ReturnService, warranties::WarrantyService, shipments::ShipmentService, work_orders::WorkOrderService};"}]},{"byte_end":242,"byte_start":215,"column_end":74,"column_start":47,"expansion":null,"file_name":"src/api.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":74,"highlight_start":47,"text":"use crate::services::{returns::ReturnService, warranties::WarrantyService, shipments::ShipmentService, work_orders::WorkOrderService};"}]},{"byte_end":270,"byte_start":244,"column_end":102,"column_start":76,"expansion":null,"file_name":"src/api.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":102,"highlight_start":76,"text":"use crate::services::{returns::ReturnService, warranties::WarrantyService, shipments::ShipmentService, work_orders::WorkOrderService};"}]},{"byte_end":301,"byte_start":272,"column_end":133,"column_start":104,"expansion":null,"file_name":"src/api.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":133,"highlight_start":104,"text":"use crate::services::{returns::ReturnService, warranties::WarrantyService, shipments::ShipmentService, work_orders::WorkOrderService};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n  --> src/auth/mod.rs:38:5\n   |\n38 | use async_trait::async_trait;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":1180,"byte_start":1150,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/auth/mod.rs","is_primary":true,"label":null,"line_end":39,"line_start":38,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":1178,"byte_start":1154,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/auth/mod.rs","is_primary":true,"label":null,"line_end":38,"line_start":38,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `tracing::debug`\n  --> src/auth/rate_limit.rs:20:5\n   |\n20 | use tracing::debug;\n   |     ^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":471,"byte_start":451,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/auth/rate_limit.rs","is_primary":true,"label":null,"line_end":21,"line_start":20,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":20,"highlight_start":1,"text":"use tracing::debug;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `tracing::debug`","spans":[{"byte_end":469,"byte_start":455,"column_end":19,"column_start":5,"expansion":null,"file_name":"src/auth/rate_limit.rs","is_primary":true,"label":null,"line_end":20,"line_start":20,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"use tracing::debug;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `bytes::Bytes`\n --> src/cache/middleware.rs:7:5\n  |\n7 | use bytes::Bytes;\n  |     ^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":173,"byte_start":155,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/cache/middleware.rs","is_primary":true,"label":null,"line_end":8,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":18,"highlight_start":1,"text":"use bytes::Bytes;"},{"highlight_end":1,"highlight_start":1,"text":"use dashmap::DashMap;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `bytes::Bytes`","spans":[{"byte_end":171,"byte_start":159,"column_end":17,"column_start":5,"expansion":null,"file_name":"src/cache/middleware.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":5,"text":"use bytes::Bytes;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Instant`\n  --> src/cache/middleware.rs:12:27\n   |\n12 | use std::time::{Duration, Instant};\n   |                           ^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":314,"byte_start":305,"column_end":34,"column_start":25,"expansion":null,"file_name":"src/cache/middleware.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":34,"highlight_start":25,"text":"use std::time::{Duration, Instant};"}]},{"byte_end":297,"byte_start":296,"column_end":17,"column_start":16,"expansion":null,"file_name":"src/cache/middleware.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":16,"text":"use std::time::{Duration, Instant};"}]},{"byte_end":315,"byte_start":314,"column_end":35,"column_start":34,"expansion":null,"file_name":"src/cache/middleware.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":35,"highlight_start":34,"text":"use std::time::{Duration, Instant};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Instant`","spans":[{"byte_end":314,"byte_start":307,"column_end":34,"column_start":27,"expansion":null,"file_name":"src/cache/middleware.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":27,"text":"use std::time::{Duration, Instant};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `info`\n  --> src/cache/middleware.rs:14:22\n   |\n14 | use tracing::{debug, info, warn};\n   |                      ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":371,"byte_start":365,"column_end":26,"column_start":20,"expansion":null,"file_name":"src/cache/middleware.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":26,"highlight_start":20,"text":"use tracing::{debug, info, warn};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `info`","spans":[{"byte_end":371,"byte_start":367,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/cache/middleware.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"use tracing::{debug, info, warn};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `ActiveValue`, `PaginatorTrait`, and `Statement`\n --> src/cache/query.rs:3:44\n  |\n3 |     ActiveModelBehavior, ActiveModelTrait, ActiveValue, ColumnTrait,\n  |                                            ^^^^^^^^^^^\n4 |     DatabaseConnection, EntityTrait,\n5 |     PaginatorTrait, QueryTrait, Select, Statement,\n  |     ^^^^^^^^^^^^^^                      ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":109,"byte_start":96,"column_end":55,"column_start":42,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":55,"highlight_start":42,"text":"    ActiveModelBehavior, ActiveModelTrait, ActiveValue, ColumnTrait,"}]},{"byte_end":179,"byte_start":159,"column_end":19,"column_start":36,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":5,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":37,"highlight_start":36,"text":"    DatabaseConnection, EntityTrait,"},{"highlight_end":19,"highlight_start":1,"text":"    PaginatorTrait, QueryTrait, Select, Statement,"}]},{"byte_end":210,"byte_start":199,"column_end":50,"column_start":39,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":50,"highlight_start":39,"text":"    PaginatorTrait, QueryTrait, Select, Statement,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `ActiveValue`, `PaginatorTrait`, and `Statement`","spans":[{"byte_end":109,"byte_start":98,"column_end":55,"column_start":44,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":44,"text":"    ActiveModelBehavior, ActiveModelTrait, ActiveValue, ColumnTrait,"}]},{"byte_end":179,"byte_start":165,"column_end":19,"column_start":5,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    PaginatorTrait, QueryTrait, Select, Statement,"}]},{"byte_end":210,"byte_start":201,"column_end":50,"column_start":41,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":41,"text":"    PaginatorTrait, QueryTrait, Select, Statement,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `info`\n  --> src/cache/query.rs:11:22\n   |\n11 | use tracing::{debug, info, warn};\n   |                      ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":343,"byte_start":337,"column_end":26,"column_start":20,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":26,"highlight_start":20,"text":"use tracing::{debug, info, warn};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `info`","spans":[{"byte_end":343,"byte_start":339,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"use tracing::{debug, info, warn};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `sha2::Sha256`\n --> src/cache/strategy.rs:2:5\n  |\n2 | use sha2::Sha256;\n  |     ^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":48,"byte_start":30,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/cache/strategy.rs","is_primary":true,"label":null,"line_end":3,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":18,"highlight_start":1,"text":"use sha2::Sha256;"},{"highlight_end":1,"highlight_start":1,"text":"use std::collections::HashMap;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `sha2::Sha256`","spans":[{"byte_end":46,"byte_start":34,"column_end":17,"column_start":5,"expansion":null,"file_name":"src/cache/strategy.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":5,"text":"use sha2::Sha256;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Entity as OrderItem`\n --> src/commands/orders/add_item_to_order_command.rs:6:39\n  |\n6 |     models::order_item_entity::{self, Entity as OrderItem},\n  |                                       ^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":169,"byte_start":148,"column_end":58,"column_start":37,"expansion":null,"file_name":"src/commands/orders/add_item_to_order_command.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":58,"highlight_start":37,"text":"    models::order_item_entity::{self, Entity as OrderItem},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Entity as OrderItem`","spans":[{"byte_end":169,"byte_start":150,"column_end":58,"column_start":39,"expansion":null,"file_name":"src/commands/orders/add_item_to_order_command.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":39,"text":"    models::order_item_entity::{self, Entity as OrderItem},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `uuid::Uuid`\n --> src/commands/orders/archive_order_command.rs:1:5\n  |\n1 | use uuid::Uuid;\n  |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":16,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/orders/archive_order_command.rs","is_primary":true,"label":null,"line_end":2,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use uuid::Uuid;"},{"highlight_end":1,"highlight_start":1,"text":"use async_trait::async_trait;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `uuid::Uuid`","spans":[{"byte_end":14,"byte_start":4,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/commands/orders/archive_order_command.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use uuid::Uuid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Entity as OrderItemEntity` and `Entity as Order`\n --> src/commands/orders/create_order_command.rs:7:30\n  |\n7 |         order_entity::{self, Entity as Order},\n  |                              ^^^^^^^^^^^^^^^\n8 |         order_item_entity::{self, Entity as OrderItemEntity},\n  |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":170,"byte_start":153,"column_end":45,"column_start":28,"expansion":null,"file_name":"src/commands/orders/create_order_command.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":45,"highlight_start":28,"text":"        order_entity::{self, Entity as Order},"}]},{"byte_end":232,"byte_start":205,"column_end":60,"column_start":33,"expansion":null,"file_name":"src/commands/orders/create_order_command.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":60,"highlight_start":33,"text":"        order_item_entity::{self, Entity as OrderItemEntity},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Entity as OrderItemEntity` and `Entity as Order`","spans":[{"byte_end":170,"byte_start":155,"column_end":45,"column_start":30,"expansion":null,"file_name":"src/commands/orders/create_order_command.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":30,"text":"        order_entity::{self, Entity as Order},"}]},{"byte_end":232,"byte_start":207,"column_end":60,"column_start":35,"expansion":null,"file_name":"src/commands/orders/create_order_command.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":35,"text":"        order_item_entity::{self, Entity as OrderItemEntity},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Counter`\n  --> src/commands/orders/create_order_command.rs:18:18\n   |\n18 | use prometheus::{Counter, IntCounter};\n   |                  ^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":452,"byte_start":443,"column_end":27,"column_start":18,"expansion":null,"file_name":"src/commands/orders/create_order_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":27,"highlight_start":18,"text":"use prometheus::{Counter, IntCounter};"}]},{"byte_end":443,"byte_start":442,"column_end":18,"column_start":17,"expansion":null,"file_name":"src/commands/orders/create_order_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":18,"highlight_start":17,"text":"use prometheus::{Counter, IntCounter};"}]},{"byte_end":463,"byte_start":462,"column_end":38,"column_start":37,"expansion":null,"file_name":"src/commands/orders/create_order_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":38,"highlight_start":37,"text":"use prometheus::{Counter, IntCounter};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Counter`","spans":[{"byte_end":450,"byte_start":443,"column_end":25,"column_start":18,"expansion":null,"file_name":"src/commands/orders/create_order_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":18,"text":"use prometheus::{Counter, IntCounter};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Entity as Order`\n  --> src/commands/orders/delete_order_command.rs:13:34\n   |\n13 |     models::order_entity::{self, Entity as Order},\n   |                                  ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":320,"byte_start":303,"column_end":49,"column_start":32,"expansion":null,"file_name":"src/commands/orders/delete_order_command.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":49,"highlight_start":32,"text":"    models::order_entity::{self, Entity as Order},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Entity as Order`","spans":[{"byte_end":320,"byte_start":305,"column_end":49,"column_start":34,"expansion":null,"file_name":"src/commands/orders/delete_order_command.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":34,"text":"    models::order_entity::{self, Entity as Order},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Entity as ASNItem`\n --> src/commands/advancedshippingnotice/add_item_to_asn_command.rs:6:31\n  |\n6 |     models::asn_items::{self, Entity as ASNItem},\n  |                               ^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":159,"byte_start":140,"column_end":48,"column_start":29,"expansion":null,"file_name":"src/commands/advancedshippingnotice/add_item_to_asn_command.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":48,"highlight_start":29,"text":"    models::asn_items::{self, Entity as ASNItem},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Entity as ASNItem`","spans":[{"byte_end":159,"byte_start":142,"column_end":48,"column_start":31,"expansion":null,"file_name":"src/commands/advancedshippingnotice/add_item_to_asn_command.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":31,"text":"    models::asn_items::{self, Entity as ASNItem},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Entity as ASN`, `Entity as CreateASNItem`, and `asn_package_entity`\n --> src/commands/advancedshippingnotice/create_asn_command.rs:7:28\n  |\n7 |         asn_entity::{self, Entity as ASN},\n  |                            ^^^^^^^^^^^^^\n8 |         asn_item_entity::{self, Entity as CreateASNItem},\n  |                                 ^^^^^^^^^^^^^^^^^^^^^^^\n9 |         asn_package_entity,\n  |         ^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":166,"byte_start":151,"column_end":41,"column_start":26,"expansion":null,"file_name":"src/commands/advancedshippingnotice/create_asn_command.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":41,"highlight_start":26,"text":"        asn_entity::{self, Entity as ASN},"}]},{"byte_end":224,"byte_start":199,"column_end":56,"column_start":31,"expansion":null,"file_name":"src/commands/advancedshippingnotice/create_asn_command.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":56,"highlight_start":31,"text":"        asn_item_entity::{self, Entity as CreateASNItem},"}]},{"byte_end":253,"byte_start":225,"column_end":27,"column_start":57,"expansion":null,"file_name":"src/commands/advancedshippingnotice/create_asn_command.rs","is_primary":true,"label":null,"line_end":9,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":58,"highlight_start":57,"text":"        asn_item_entity::{self, Entity as CreateASNItem},"},{"highlight_end":27,"highlight_start":1,"text":"        asn_package_entity,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Entity as ASN`, `Entity as CreateASNItem`, and `asn_package_entity`","spans":[{"byte_end":166,"byte_start":153,"column_end":41,"column_start":28,"expansion":null,"file_name":"src/commands/advancedshippingnotice/create_asn_command.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":28,"text":"        asn_entity::{self, Entity as ASN},"}]},{"byte_end":224,"byte_start":201,"column_end":56,"column_start":33,"expansion":null,"file_name":"src/commands/advancedshippingnotice/create_asn_command.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":33,"text":"        asn_item_entity::{self, Entity as CreateASNItem},"}]},{"byte_end":253,"byte_start":235,"column_end":27,"column_start":9,"expansion":null,"file_name":"src/commands/advancedshippingnotice/create_asn_command.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":9,"text":"        asn_package_entity,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `error`\n  --> src/commands/advancedshippingnotice/hold_asn_command.rs:17:15\n   |\n17 | use tracing::{error, info, instrument};\n   |               ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":391,"byte_start":384,"column_end":22,"column_start":15,"expansion":null,"file_name":"src/commands/advancedshippingnotice/hold_asn_command.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":22,"highlight_start":15,"text":"use tracing::{error, info, instrument};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `error`","spans":[{"byte_end":389,"byte_start":384,"column_end":20,"column_start":15,"expansion":null,"file_name":"src/commands/advancedshippingnotice/hold_asn_command.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":15,"text":"use tracing::{error, info, instrument};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `error`\n  --> src/commands/advancedshippingnotice/release_asn_from_hold_command.rs:17:15\n   |\n17 | use tracing::{error, info, instrument};\n   |               ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":391,"byte_start":384,"column_end":22,"column_start":15,"expansion":null,"file_name":"src/commands/advancedshippingnotice/release_asn_from_hold_command.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":22,"highlight_start":15,"text":"use tracing::{error, info, instrument};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `error`","spans":[{"byte_end":389,"byte_start":384,"column_end":20,"column_start":15,"expansion":null,"file_name":"src/commands/advancedshippingnotice/release_asn_from_hold_command.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":15,"text":"use tracing::{error, info, instrument};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `uuid::Uuid`\n --> src/commands/advancedshippingnotice/remove_item_from_asn_command.rs:3:5\n  |\n3 | use uuid::Uuid;\n  |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":82,"byte_start":66,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/advancedshippingnotice/remove_item_from_asn_command.rs","is_primary":true,"label":null,"line_end":4,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use uuid::Uuid;"},{"highlight_end":1,"highlight_start":1,"text":"use validator::Validate;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `uuid::Uuid`","spans":[{"byte_end":80,"byte_start":70,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/commands/advancedshippingnotice/remove_item_from_asn_command.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use uuid::Uuid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `uuid::Uuid`\n --> src/commands/advancedshippingnotice/update_asn_details_command.rs:3:5\n  |\n3 | use uuid::Uuid;\n  |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":82,"byte_start":66,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_details_command.rs","is_primary":true,"label":null,"line_end":4,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use uuid::Uuid;"},{"highlight_end":1,"highlight_start":1,"text":"use validator::Validate;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `uuid::Uuid`","spans":[{"byte_end":80,"byte_start":70,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_details_command.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use uuid::Uuid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `asn_note_entity` and `self`\n --> src/commands/advancedshippingnotice/update_asn_item_command.rs:7:22\n  |\n7 |         asn_entity::{self, Entity as ASN},\n  |                      ^^^^\n8 |         asn_item_entity::{self, Entity as ASNItem},\n9 |         asn_note_entity, ASNStatus,\n  |         ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":149,"byte_start":143,"column_end":28,"column_start":22,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":28,"highlight_start":22,"text":"        asn_entity::{self, Entity as ASN},"}]},{"byte_end":143,"byte_start":142,"column_end":22,"column_start":21,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":22,"highlight_start":21,"text":"        asn_entity::{self, Entity as ASN},"}]},{"byte_end":163,"byte_start":162,"column_end":42,"column_start":41,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":42,"highlight_start":41,"text":"        asn_entity::{self, Entity as ASN},"}]},{"byte_end":240,"byte_start":215,"column_end":24,"column_start":51,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":9,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":52,"highlight_start":51,"text":"        asn_item_entity::{self, Entity as ASNItem},"},{"highlight_end":24,"highlight_start":1,"text":"        asn_note_entity, ASNStatus,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `asn_note_entity` and `self`","spans":[{"byte_end":147,"byte_start":143,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"        asn_entity::{self, Entity as ASN},"}]},{"byte_end":240,"byte_start":225,"column_end":24,"column_start":9,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":9,"text":"        asn_note_entity, ASNStatus,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `chrono::Utc`\n  --> src/commands/advancedshippingnotice/update_asn_item_command.rs:12:5\n   |\n12 | use chrono::Utc;\n   |     ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":280,"byte_start":263,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":13,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":1,"text":"use chrono::Utc;"},{"highlight_end":1,"highlight_start":1,"text":"use lazy_static::lazy_static;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `chrono::Utc`","spans":[{"byte_end":278,"byte_start":267,"column_end":16,"column_start":5,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":5,"text":"use chrono::Utc;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `lazy_static::lazy_static`\n  --> src/commands/advancedshippingnotice/update_asn_item_command.rs:13:5\n   |\n13 | use lazy_static::lazy_static;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":310,"byte_start":280,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":14,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use lazy_static::lazy_static;"},{"highlight_end":1,"highlight_start":1,"text":"use prometheus::{IntCounter, IntCounterVec};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `lazy_static::lazy_static`","spans":[{"byte_end":308,"byte_start":284,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use lazy_static::lazy_static;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `IntCounterVec` and `IntCounter`\n  --> src/commands/advancedshippingnotice/update_asn_item_command.rs:14:18\n   |\n14 | use prometheus::{IntCounter, IntCounterVec};\n   |                  ^^^^^^^^^^  ^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":355,"byte_start":310,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":15,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":45,"highlight_start":1,"text":"use prometheus::{IntCounter, IntCounterVec};"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::{*, Set};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `IntCounterVec` and `IntCounter`","spans":[{"byte_end":337,"byte_start":327,"column_end":28,"column_start":18,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":18,"text":"use prometheus::{IntCounter, IntCounterVec};"}]},{"byte_end":352,"byte_start":339,"column_end":43,"column_start":30,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":30,"text":"use prometheus::{IntCounter, IntCounterVec};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `error`, `info`, `instrument`, and `warn`\n  --> src/commands/advancedshippingnotice/update_asn_item_command.rs:18:15\n   |\n18 | use tracing::{error, info, instrument, warn};\n   |               ^^^^^  ^^^^  ^^^^^^^^^^  ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":481,"byte_start":435,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":19,"line_start":18,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":46,"highlight_start":1,"text":"use tracing::{error, info, instrument, warn};"},{"highlight_end":1,"highlight_start":1,"text":"use uuid::Uuid;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `error`, `info`, `instrument`, and `warn`","spans":[{"byte_end":454,"byte_start":449,"column_end":20,"column_start":15,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":15,"text":"use tracing::{error, info, instrument, warn};"}]},{"byte_end":460,"byte_start":456,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"use tracing::{error, info, instrument, warn};"}]},{"byte_end":472,"byte_start":462,"column_end":38,"column_start":28,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":28,"text":"use tracing::{error, info, instrument, warn};"}]},{"byte_end":478,"byte_start":474,"column_end":44,"column_start":40,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":40,"text":"use tracing::{error, info, instrument, warn};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `uuid::Uuid`\n --> src/commands/advancedshippingnotice/update_asn_items_command.rs:3:5\n  |\n3 | use uuid::Uuid;\n  |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":82,"byte_start":66,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_items_command.rs","is_primary":true,"label":null,"line_end":4,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use uuid::Uuid;"},{"highlight_end":1,"highlight_start":1,"text":"use validator::Validate;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `uuid::Uuid`","spans":[{"byte_end":80,"byte_start":70,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_items_command.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use uuid::Uuid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Entity as PurchaseOrderItem` and `Entity as PurchaseOrder`\n --> src/commands/purchaseorders/create_purchase_order_command.rs:7:39\n  |\n7 |         purchase_order_entity::{self, Entity as PurchaseOrder, PurchaseOrderStatus},\n  |                                       ^^^^^^^^^^^^^^^^^^^^^^^\n8 |         purchase_order_item_entity::{self, Entity as PurchaseOrderItem},\n  |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":187,"byte_start":162,"column_end":62,"column_start":37,"expansion":null,"file_name":"src/commands/purchaseorders/create_purchase_order_command.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":62,"highlight_start":37,"text":"        purchase_order_entity::{self, Entity as PurchaseOrder, PurchaseOrderStatus},"}]},{"byte_end":281,"byte_start":252,"column_end":71,"column_start":42,"expansion":null,"file_name":"src/commands/purchaseorders/create_purchase_order_command.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":71,"highlight_start":42,"text":"        purchase_order_item_entity::{self, Entity as PurchaseOrderItem},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Entity as PurchaseOrderItem` and `Entity as PurchaseOrder`","spans":[{"byte_end":187,"byte_start":164,"column_end":62,"column_start":39,"expansion":null,"file_name":"src/commands/purchaseorders/create_purchase_order_command.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":39,"text":"        purchase_order_entity::{self, Entity as PurchaseOrder, PurchaseOrderStatus},"}]},{"byte_end":281,"byte_start":254,"column_end":71,"column_start":44,"expansion":null,"file_name":"src/commands/purchaseorders/create_purchase_order_command.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":71,"highlight_start":44,"text":"        purchase_order_item_entity::{self, Entity as PurchaseOrderItem},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Event`\n  --> src/commands/purchaseorders/receive_purchase_order_command.rs:12:14\n   |\n12 |     events::{Event, EventSender},\n   |              ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":260,"byte_start":253,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/commands/purchaseorders/receive_purchase_order_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":21,"highlight_start":14,"text":"    events::{Event, EventSender},"}]},{"byte_end":253,"byte_start":252,"column_end":14,"column_start":13,"expansion":null,"file_name":"src/commands/purchaseorders/receive_purchase_order_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"    events::{Event, EventSender},"}]},{"byte_end":272,"byte_start":271,"column_end":33,"column_start":32,"expansion":null,"file_name":"src/commands/purchaseorders/receive_purchase_order_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":32,"text":"    events::{Event, EventSender},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Event`","spans":[{"byte_end":258,"byte_start":253,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/commands/purchaseorders/receive_purchase_order_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"    events::{Event, EventSender},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Event`\n  --> src/commands/purchaseorders/update_purchase_order_command.rs:13:14\n   |\n13 |     events::{Event, EventSender},\n   |              ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":287,"byte_start":280,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/commands/purchaseorders/update_purchase_order_command.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":21,"highlight_start":14,"text":"    events::{Event, EventSender},"}]},{"byte_end":280,"byte_start":279,"column_end":14,"column_start":13,"expansion":null,"file_name":"src/commands/purchaseorders/update_purchase_order_command.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"    events::{Event, EventSender},"}]},{"byte_end":299,"byte_start":298,"column_end":33,"column_start":32,"expansion":null,"file_name":"src/commands/purchaseorders/update_purchase_order_command.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":32,"text":"    events::{Event, EventSender},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Event`","spans":[{"byte_end":285,"byte_start":280,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/commands/purchaseorders/update_purchase_order_command.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"    events::{Event, EventSender},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Event`\n --> src/commands/returns/add_note_command.rs:5:14\n  |\n5 |     events::{Event, EventSender},\n  |              ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":98,"byte_start":91,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/commands/returns/add_note_command.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":21,"highlight_start":14,"text":"    events::{Event, EventSender},"}]},{"byte_end":91,"byte_start":90,"column_end":14,"column_start":13,"expansion":null,"file_name":"src/commands/returns/add_note_command.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"    events::{Event, EventSender},"}]},{"byte_end":110,"byte_start":109,"column_end":33,"column_start":32,"expansion":null,"file_name":"src/commands/returns/add_note_command.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":32,"text":"    events::{Event, EventSender},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Event`","spans":[{"byte_end":96,"byte_start":91,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/commands/returns/add_note_command.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"    events::{Event, EventSender},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `info`\n  --> src/commands/returns/add_note_command.rs:12:22\n   |\n12 | use tracing::{error, info, instrument};\n   |                      ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":311,"byte_start":305,"column_end":26,"column_start":20,"expansion":null,"file_name":"src/commands/returns/add_note_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":26,"highlight_start":20,"text":"use tracing::{error, info, instrument};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `info`","spans":[{"byte_end":311,"byte_start":307,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/commands/returns/add_note_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"use tracing::{error, info, instrument};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Entity as Return`\n --> src/commands/returns/approve_return_command.rs:8:31\n  |\n8 |         return_entity::{self, Entity as Return},\n  |                               ^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":204,"byte_start":186,"column_end":47,"column_start":29,"expansion":null,"file_name":"src/commands/returns/approve_return_command.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":47,"highlight_start":29,"text":"        return_entity::{self, Entity as Return},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Entity as Return`","spans":[{"byte_end":204,"byte_start":188,"column_end":47,"column_start":31,"expansion":null,"file_name":"src/commands/returns/approve_return_command.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":31,"text":"        return_entity::{self, Entity as Return},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Entity as Return`\n --> src/commands/returns/cancel_return_command.rs:8:31\n  |\n8 |         return_entity::{self, Entity as Return},\n  |                               ^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":204,"byte_start":186,"column_end":47,"column_start":29,"expansion":null,"file_name":"src/commands/returns/cancel_return_command.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":47,"highlight_start":29,"text":"        return_entity::{self, Entity as Return},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Entity as Return`","spans":[{"byte_end":204,"byte_start":188,"column_end":47,"column_start":31,"expansion":null,"file_name":"src/commands/returns/cancel_return_command.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":31,"text":"        return_entity::{self, Entity as Return},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `commands::Command`\n --> src/commands/returns/close_return_command.rs:2:5\n  |\n2 |     commands::Command,\n  |     ^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":40,"byte_start":17,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/commands/returns/close_return_command.rs","is_primary":true,"label":null,"line_end":3,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":23,"highlight_start":5,"text":"    commands::Command,"},{"highlight_end":5,"highlight_start":1,"text":"    db::DbPool,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `commands::Command`","spans":[{"byte_end":34,"byte_start":17,"column_end":22,"column_start":5,"expansion":null,"file_name":"src/commands/returns/close_return_command.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":5,"text":"    commands::Command,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n  --> src/commands/returns/close_return_command.rs:13:5\n   |\n13 | use async_trait::async_trait;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":392,"byte_start":362,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/returns/close_return_command.rs","is_primary":true,"label":null,"line_end":14,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use chrono::Utc;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":390,"byte_start":366,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/returns/close_return_command.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `DatabaseConnection`\n  --> src/commands/returns/close_return_command.rs:18:5\n   |\n18 |     DatabaseConnection, DatabaseTransaction, Set, TransactionError, TransactionTrait,\n   |     ^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":475,"byte_start":451,"column_end":23,"column_start":13,"expansion":null,"file_name":"src/commands/returns/close_return_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":17,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"    query::*,"},{"highlight_end":23,"highlight_start":1,"text":"    DatabaseConnection, DatabaseTransaction, Set, TransactionError, TransactionTrait,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `DatabaseConnection`","spans":[{"byte_end":475,"byte_start":457,"column_end":23,"column_start":5,"expansion":null,"file_name":"src/commands/returns/close_return_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":5,"text":"    DatabaseConnection, DatabaseTransaction, Set, TransactionError, TransactionTrait,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Validate` and `ValidationError`\n  --> src/commands/returns/close_return_command.rs:24:17\n   |\n24 | use validator::{Validate, ValidationError};\n   |                 ^^^^^^^^  ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":712,"byte_start":668,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/returns/close_return_command.rs","is_primary":true,"label":null,"line_end":25,"line_start":24,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":44,"highlight_start":1,"text":"use validator::{Validate, ValidationError};"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Validate` and `ValidationError`","spans":[{"byte_end":692,"byte_start":684,"column_end":25,"column_start":17,"expansion":null,"file_name":"src/commands/returns/close_return_command.rs","is_primary":true,"label":null,"line_end":24,"line_start":24,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":17,"text":"use validator::{Validate, ValidationError};"}]},{"byte_end":709,"byte_start":694,"column_end":42,"column_start":27,"expansion":null,"file_name":"src/commands/returns/close_return_command.rs","is_primary":true,"label":null,"line_end":24,"line_start":24,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":27,"text":"use validator::{Validate, ValidationError};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `commands::Command` and `r#return::ReturnStatus`\n --> src/commands/returns/complete_return_command.rs:2:5\n  |\n2 |     commands::Command,\n  |     ^^^^^^^^^^^^^^^^^\n...\n7 |         r#return::ReturnStatus,\n  |         ^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":40,"byte_start":17,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/commands/returns/complete_return_command.rs","is_primary":true,"label":null,"line_end":3,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":23,"highlight_start":5,"text":"    commands::Command,"},{"highlight_end":5,"highlight_start":1,"text":"    db::DbPool,"}]},{"byte_end":166,"byte_start":134,"column_end":9,"column_start":9,"expansion":null,"file_name":"src/commands/returns/complete_return_command.rs","is_primary":true,"label":null,"line_end":8,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":32,"highlight_start":9,"text":"        r#return::ReturnStatus,"},{"highlight_end":9,"highlight_start":1,"text":"        return_entity::{self, Entity as Return, Model as ReturnEntity},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `commands::Command` and `r#return::ReturnStatus`","spans":[{"byte_end":34,"byte_start":17,"column_end":22,"column_start":5,"expansion":null,"file_name":"src/commands/returns/complete_return_command.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":5,"text":"    commands::Command,"}]},{"byte_end":156,"byte_start":134,"column_end":31,"column_start":9,"expansion":null,"file_name":"src/commands/returns/complete_return_command.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        r#return::ReturnStatus,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `DatabaseConnection`\n  --> src/commands/returns/complete_return_command.rs:18:5\n   |\n18 |     DatabaseConnection, DatabaseTransaction, Set, TransactionError, TransactionTrait,\n   |     ^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":475,"byte_start":451,"column_end":23,"column_start":13,"expansion":null,"file_name":"src/commands/returns/complete_return_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":17,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"    query::*,"},{"highlight_end":23,"highlight_start":1,"text":"    DatabaseConnection, DatabaseTransaction, Set, TransactionError, TransactionTrait,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `DatabaseConnection`","spans":[{"byte_end":475,"byte_start":457,"column_end":23,"column_start":5,"expansion":null,"file_name":"src/commands/returns/complete_return_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":5,"text":"    DatabaseConnection, DatabaseTransaction, Set, TransactionError, TransactionTrait,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `info`\n  --> src/commands/returns/complete_return_command.rs:22:22\n   |\n22 | use tracing::{error, info};\n   |                      ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":624,"byte_start":618,"column_end":26,"column_start":20,"expansion":null,"file_name":"src/commands/returns/complete_return_command.rs","is_primary":true,"label":null,"line_end":22,"line_start":22,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":26,"highlight_start":20,"text":"use tracing::{error, info};"}]},{"byte_end":613,"byte_start":612,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/commands/returns/complete_return_command.rs","is_primary":true,"label":null,"line_end":22,"line_start":22,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use tracing::{error, info};"}]},{"byte_end":625,"byte_start":624,"column_end":27,"column_start":26,"expansion":null,"file_name":"src/commands/returns/complete_return_command.rs","is_primary":true,"label":null,"line_end":22,"line_start":22,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":27,"highlight_start":26,"text":"use tracing::{error, info};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `info`","spans":[{"byte_end":624,"byte_start":620,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/commands/returns/complete_return_command.rs","is_primary":true,"label":null,"line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"use tracing::{error, info};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Validate` and `ValidationError`\n  --> src/commands/returns/complete_return_command.rs:24:17\n   |\n24 | use validator::{Validate, ValidationError};\n   |                 ^^^^^^^^  ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":687,"byte_start":643,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/returns/complete_return_command.rs","is_primary":true,"label":null,"line_end":25,"line_start":24,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":44,"highlight_start":1,"text":"use validator::{Validate, ValidationError};"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Validate` and `ValidationError`","spans":[{"byte_end":667,"byte_start":659,"column_end":25,"column_start":17,"expansion":null,"file_name":"src/commands/returns/complete_return_command.rs","is_primary":true,"label":null,"line_end":24,"line_start":24,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":17,"text":"use validator::{Validate, ValidationError};"}]},{"byte_end":684,"byte_start":669,"column_end":42,"column_start":27,"expansion":null,"file_name":"src/commands/returns/complete_return_command.rs","is_primary":true,"label":null,"line_end":24,"line_start":24,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":27,"text":"use validator::{Validate, ValidationError};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Entity as Return`\n --> src/commands/returns/create_return_command.rs:8:31\n  |\n8 |         return_entity::{self, Entity as Return},\n  |                               ^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":204,"byte_start":186,"column_end":47,"column_start":29,"expansion":null,"file_name":"src/commands/returns/create_return_command.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":47,"highlight_start":29,"text":"        return_entity::{self, Entity as Return},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Entity as Return`","spans":[{"byte_end":204,"byte_start":188,"column_end":47,"column_start":31,"expansion":null,"file_name":"src/commands/returns/create_return_command.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":31,"text":"        return_entity::{self, Entity as Return},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `proto::return_order::ReturnItem`\n  --> src/commands/returns/restock_returned_items_command.rs:10:5\n   |\n10 |     proto::return_order::ReturnItem,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":288,"byte_start":251,"column_end":36,"column_start":6,"expansion":null,"file_name":"src/commands/returns/restock_returned_items_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":7,"highlight_start":6,"text":"    },"},{"highlight_end":36,"highlight_start":1,"text":"    proto::return_order::ReturnItem,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `proto::return_order::ReturnItem`","spans":[{"byte_end":288,"byte_start":257,"column_end":36,"column_start":5,"expansion":null,"file_name":"src/commands/returns/restock_returned_items_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":5,"text":"    proto::return_order::ReturnItem,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `chrono::Utc`\n  --> src/commands/returns/restock_returned_items_command.rs:12:5\n   |\n12 | use chrono::Utc;\n   |     ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":310,"byte_start":293,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/returns/restock_returned_items_command.rs","is_primary":true,"label":null,"line_end":13,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":1,"text":"use chrono::Utc;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::{*, Set, TransactionError, TransactionTrait, EntityTrait, ColumnTrait};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `chrono::Utc`","spans":[{"byte_end":308,"byte_start":297,"column_end":16,"column_start":5,"expansion":null,"file_name":"src/commands/returns/restock_returned_items_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":5,"text":"use chrono::Utc;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `info`\n  --> src/commands/returns/update_return_command.rs:11:22\n   |\n11 | use tracing::{error, info, instrument};\n   |                      ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":273,"byte_start":267,"column_end":26,"column_start":20,"expansion":null,"file_name":"src/commands/returns/update_return_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":26,"highlight_start":20,"text":"use tracing::{error, info, instrument};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `info`","spans":[{"byte_end":273,"byte_start":269,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/commands/returns/update_return_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"use tracing::{error, info, instrument};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Entity as Shipment`\n --> src/commands/shipments/assign_shipment_carrier_command.rs:7:30\n  |\n7 |     models::shipment::{self, Entity as Shipment, ShippingCarrier},\n  |                              ^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":175,"byte_start":155,"column_end":48,"column_start":28,"expansion":null,"file_name":"src/commands/shipments/assign_shipment_carrier_command.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":48,"highlight_start":28,"text":"    models::shipment::{self, Entity as Shipment, ShippingCarrier},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Entity as Shipment`","spans":[{"byte_end":175,"byte_start":157,"column_end":48,"column_start":30,"expansion":null,"file_name":"src/commands/shipments/assign_shipment_carrier_command.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":30,"text":"    models::shipment::{self, Entity as Shipment, ShippingCarrier},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/commands/shipments/assign_shipment_carrier_command.rs:9:5\n  |\n9 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":228,"byte_start":198,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/shipments/assign_shipment_carrier_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::{ActiveModelTrait, ActiveValue::Set, ColumnTrait, EntityTrait, QueryFilter};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":226,"byte_start":202,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/shipments/assign_shipment_carrier_command.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `ColumnTrait` and `QueryFilter`\n  --> src/commands/shipments/assign_shipment_carrier_command.rs:10:51\n   |\n10 | use sea_orm::{ActiveModelTrait, ActiveValue::Set, ColumnTrait, EntityTrait, QueryFilter};\n   |                                                   ^^^^^^^^^^^               ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":289,"byte_start":276,"column_end":62,"column_start":49,"expansion":null,"file_name":"src/commands/shipments/assign_shipment_carrier_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":62,"highlight_start":49,"text":"use sea_orm::{ActiveModelTrait, ActiveValue::Set, ColumnTrait, EntityTrait, QueryFilter};"}]},{"byte_end":315,"byte_start":302,"column_end":88,"column_start":75,"expansion":null,"file_name":"src/commands/shipments/assign_shipment_carrier_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":88,"highlight_start":75,"text":"use sea_orm::{ActiveModelTrait, ActiveValue::Set, ColumnTrait, EntityTrait, QueryFilter};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `ColumnTrait` and `QueryFilter`","spans":[{"byte_end":289,"byte_start":278,"column_end":62,"column_start":51,"expansion":null,"file_name":"src/commands/shipments/assign_shipment_carrier_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":51,"text":"use sea_orm::{ActiveModelTrait, ActiveValue::Set, ColumnTrait, EntityTrait, QueryFilter};"}]},{"byte_end":315,"byte_start":304,"column_end":88,"column_start":77,"expansion":null,"file_name":"src/commands/shipments/assign_shipment_carrier_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":88,"highlight_start":77,"text":"use sea_orm::{ActiveModelTrait, ActiveValue::Set, ColumnTrait, EntityTrait, QueryFilter};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/commands/shipments/audit_shipment_command.rs:9:5\n  |\n9 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":174,"byte_start":144,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/shipments/audit_shipment_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::EntityTrait;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":172,"byte_start":148,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/shipments/audit_shipment_command.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `validator::Validate`\n  --> src/commands/shipments/audit_shipment_command.rs:14:5\n   |\n14 | use validator::Validate;\n   |     ^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":322,"byte_start":297,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/shipments/audit_shipment_command.rs","is_primary":true,"label":null,"line_end":15,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":25,"highlight_start":1,"text":"use validator::Validate;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `validator::Validate`","spans":[{"byte_end":320,"byte_start":301,"column_end":24,"column_start":5,"expansion":null,"file_name":"src/commands/shipments/audit_shipment_command.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":5,"text":"use validator::Validate;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n  --> src/commands/shipments/cancel_shipment_command.rs:12:5\n   |\n12 | use async_trait::async_trait;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":268,"byte_start":238,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/shipments/cancel_shipment_command.rs","is_primary":true,"label":null,"line_end":13,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::{ActiveModelTrait, ActiveValue::Set, EntityTrait, TransactionTrait};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":266,"byte_start":242,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/shipments/cancel_shipment_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/commands/shipments/confirm_shipment_delivery_command.rs:9:5\n  |\n9 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":207,"byte_start":177,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/shipments/confirm_shipment_delivery_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use chrono::Utc;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":205,"byte_start":181,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/shipments/confirm_shipment_delivery_command.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Shipment`\n --> src/commands/shipments/create_shipment_command.rs:7:49\n  |\n7 |     models::{shipment::{self, ShippingCarrier}, Shipment, ShipmentStatus},\n  |                                                 ^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":184,"byte_start":174,"column_end":57,"column_start":47,"expansion":null,"file_name":"src/commands/shipments/create_shipment_command.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":57,"highlight_start":47,"text":"    models::{shipment::{self, ShippingCarrier}, Shipment, ShipmentStatus},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Shipment`","spans":[{"byte_end":184,"byte_start":176,"column_end":57,"column_start":49,"expansion":null,"file_name":"src/commands/shipments/create_shipment_command.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":49,"text":"    models::{shipment::{self, ShippingCarrier}, Shipment, ShipmentStatus},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/commands/shipments/create_shipment_command.rs:9:5\n  |\n9 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":236,"byte_start":206,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/shipments/create_shipment_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use chrono::{DateTime, Utc};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":234,"byte_start":210,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/shipments/create_shipment_command.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `DateTime`\n  --> src/commands/shipments/create_shipment_command.rs:10:14\n   |\n10 | use chrono::{DateTime, Utc};\n   |              ^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":259,"byte_start":249,"column_end":24,"column_start":14,"expansion":null,"file_name":"src/commands/shipments/create_shipment_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":24,"highlight_start":14,"text":"use chrono::{DateTime, Utc};"}]},{"byte_end":249,"byte_start":248,"column_end":14,"column_start":13,"expansion":null,"file_name":"src/commands/shipments/create_shipment_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"use chrono::{DateTime, Utc};"}]},{"byte_end":263,"byte_start":262,"column_end":28,"column_start":27,"expansion":null,"file_name":"src/commands/shipments/create_shipment_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":28,"highlight_start":27,"text":"use chrono::{DateTime, Utc};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `DateTime`","spans":[{"byte_end":257,"byte_start":249,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/commands/shipments/create_shipment_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"use chrono::{DateTime, Utc};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n  --> src/commands/shipments/hold_shipment_command.rs:11:5\n   |\n11 | use async_trait::async_trait;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":223,"byte_start":193,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/shipments/hold_shipment_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":221,"byte_start":197,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/shipments/hold_shipment_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ColumnTrait`\n  --> src/commands/shipments/hold_shipment_command.rs:12:49\n   |\n12 | use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};\n   |                                                 ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":282,"byte_start":269,"column_end":60,"column_start":47,"expansion":null,"file_name":"src/commands/shipments/hold_shipment_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":60,"highlight_start":47,"text":"use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ColumnTrait`","spans":[{"byte_end":282,"byte_start":271,"column_end":60,"column_start":49,"expansion":null,"file_name":"src/commands/shipments/hold_shipment_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":49,"text":"use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/commands/shipments/release_hold_shipment_commad.rs:2:5\n  |\n2 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":46,"byte_start":16,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/shipments/release_hold_shipment_commad.rs","is_primary":true,"label":null,"line_end":3,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::{entity::prelude::*, ActiveValue::Set, DatabaseConnection, DatabaseTransaction, TransactionTrait};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":44,"byte_start":20,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/shipments/release_hold_shipment_commad.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `DatabaseConnection`\n --> src/commands/shipments/release_hold_shipment_commad.rs:3:53\n  |\n3 | use sea_orm::{entity::prelude::*, ActiveValue::Set, DatabaseConnection, DatabaseTransaction, TransactionTrait};\n  |                                                     ^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":116,"byte_start":96,"column_end":71,"column_start":51,"expansion":null,"file_name":"src/commands/shipments/release_hold_shipment_commad.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":71,"highlight_start":51,"text":"use sea_orm::{entity::prelude::*, ActiveValue::Set, DatabaseConnection, DatabaseTransaction, TransactionTrait};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `DatabaseConnection`","spans":[{"byte_end":116,"byte_start":98,"column_end":71,"column_start":53,"expansion":null,"file_name":"src/commands/shipments/release_hold_shipment_commad.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":71,"highlight_start":53,"text":"use sea_orm::{entity::prelude::*, ActiveValue::Set, DatabaseConnection, DatabaseTransaction, TransactionTrait};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n  --> src/commands/shipments/reschedule_shipment_command.rs:11:5\n   |\n11 | use async_trait::async_trait;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":211,"byte_start":181,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/shipments/reschedule_shipment_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use chrono::NaiveDateTime;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":209,"byte_start":185,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/shipments/reschedule_shipment_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ColumnTrait`\n  --> src/commands/shipments/reschedule_shipment_command.rs:13:49\n   |\n13 | use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};\n   |                                                 ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":297,"byte_start":284,"column_end":60,"column_start":47,"expansion":null,"file_name":"src/commands/shipments/reschedule_shipment_command.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":60,"highlight_start":47,"text":"use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ColumnTrait`","spans":[{"byte_end":297,"byte_start":286,"column_end":60,"column_start":49,"expansion":null,"file_name":"src/commands/shipments/reschedule_shipment_command.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":49,"text":"use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/commands/shipments/ship_command.rs:2:5\n  |\n2 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":46,"byte_start":16,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/shipments/ship_command.rs","is_primary":true,"label":null,"line_end":3,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::{entity::prelude::*, ActiveValue::Set, DatabaseConnection, DatabaseTransaction, TransactionTrait};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":44,"byte_start":20,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/shipments/ship_command.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `DatabaseConnection`\n --> src/commands/shipments/ship_command.rs:3:53\n  |\n3 | use sea_orm::{entity::prelude::*, ActiveValue::Set, DatabaseConnection, DatabaseTransaction, TransactionTrait};\n  |                                                     ^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":116,"byte_start":96,"column_end":71,"column_start":51,"expansion":null,"file_name":"src/commands/shipments/ship_command.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":71,"highlight_start":51,"text":"use sea_orm::{entity::prelude::*, ActiveValue::Set, DatabaseConnection, DatabaseTransaction, TransactionTrait};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `DatabaseConnection`","spans":[{"byte_end":116,"byte_start":98,"column_end":71,"column_start":53,"expansion":null,"file_name":"src/commands/shipments/ship_command.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":71,"highlight_start":53,"text":"use sea_orm::{entity::prelude::*, ActiveValue::Set, DatabaseConnection, DatabaseTransaction, TransactionTrait};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/commands/shipments/track_shipment_command.rs:2:5\n  |\n2 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":46,"byte_start":16,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/shipments/track_shipment_command.rs","is_primary":true,"label":null,"line_end":3,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::entity::prelude::*;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":44,"byte_start":20,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/shipments/track_shipment_command.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Set`\n --> src/commands/shipments/track_shipment_command.rs:4:35\n  |\n4 | use sea_orm::{DatabaseConnection, Set};\n  |                                   ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":116,"byte_start":111,"column_end":38,"column_start":33,"expansion":null,"file_name":"src/commands/shipments/track_shipment_command.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":38,"highlight_start":33,"text":"use sea_orm::{DatabaseConnection, Set};"}]},{"byte_end":93,"byte_start":92,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/commands/shipments/track_shipment_command.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use sea_orm::{DatabaseConnection, Set};"}]},{"byte_end":117,"byte_start":116,"column_end":39,"column_start":38,"expansion":null,"file_name":"src/commands/shipments/track_shipment_command.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":39,"highlight_start":38,"text":"use sea_orm::{DatabaseConnection, Set};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Set`","spans":[{"byte_end":116,"byte_start":113,"column_end":38,"column_start":35,"expansion":null,"file_name":"src/commands/shipments/track_shipment_command.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":35,"text":"use sea_orm::{DatabaseConnection, Set};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/commands/shipments/update_shipment_command.rs:9:5\n  |\n9 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":211,"byte_start":181,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/shipments/update_shipment_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":209,"byte_start":185,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/shipments/update_shipment_command.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ColumnTrait`\n  --> src/commands/shipments/update_shipment_command.rs:10:49\n   |\n10 | use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};\n   |                                                 ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":270,"byte_start":257,"column_end":60,"column_start":47,"expansion":null,"file_name":"src/commands/shipments/update_shipment_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":60,"highlight_start":47,"text":"use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ColumnTrait`","spans":[{"byte_end":270,"byte_start":259,"column_end":60,"column_start":49,"expansion":null,"file_name":"src/commands/shipments/update_shipment_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":49,"text":"use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/commands/shipments/update_shipment_general_command.rs:8:5\n  |\n8 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":179,"byte_start":149,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":true,"label":null,"line_end":9,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use chrono::{DateTime, Utc};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":177,"byte_start":153,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ColumnTrait`\n  --> src/commands/shipments/update_shipment_general_command.rs:10:49\n   |\n10 | use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};\n   |                                                 ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":267,"byte_start":254,"column_end":60,"column_start":47,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":60,"highlight_start":47,"text":"use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ColumnTrait`","spans":[{"byte_end":267,"byte_start":256,"column_end":60,"column_start":49,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":49,"text":"use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Shipment`\n --> src/commands/shipments/verify_shipment_address_command.rs:9:24\n  |\n9 |     models::{shipment, Shipment},\n  |                        ^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":175,"byte_start":165,"column_end":32,"column_start":22,"expansion":null,"file_name":"src/commands/shipments/verify_shipment_address_command.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":32,"highlight_start":22,"text":"    models::{shipment, Shipment},"}]},{"byte_end":157,"byte_start":156,"column_end":14,"column_start":13,"expansion":null,"file_name":"src/commands/shipments/verify_shipment_address_command.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"    models::{shipment, Shipment},"}]},{"byte_end":176,"byte_start":175,"column_end":33,"column_start":32,"expansion":null,"file_name":"src/commands/shipments/verify_shipment_address_command.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":32,"text":"    models::{shipment, Shipment},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Shipment`","spans":[{"byte_end":175,"byte_start":167,"column_end":32,"column_start":24,"expansion":null,"file_name":"src/commands/shipments/verify_shipment_address_command.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":24,"text":"    models::{shipment, Shipment},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n  --> src/commands/shipments/verify_shipment_address_command.rs:11:5\n   |\n11 | use async_trait::async_trait;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":211,"byte_start":181,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/shipments/verify_shipment_address_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::{entity::*, query::*, ColumnTrait, EntityTrait};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":209,"byte_start":185,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/shipments/verify_shipment_address_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ColumnTrait`\n  --> src/commands/shipments/verify_shipment_address_command.rs:12:36\n   |\n12 | use sea_orm::{entity::*, query::*, ColumnTrait, EntityTrait};\n   |                                    ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":257,"byte_start":244,"column_end":47,"column_start":34,"expansion":null,"file_name":"src/commands/shipments/verify_shipment_address_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":47,"highlight_start":34,"text":"use sea_orm::{entity::*, query::*, ColumnTrait, EntityTrait};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ColumnTrait`","spans":[{"byte_end":257,"byte_start":246,"column_end":47,"column_start":36,"expansion":null,"file_name":"src/commands/shipments/verify_shipment_address_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":36,"text":"use sea_orm::{entity::*, query::*, ColumnTrait, EntityTrait};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Counter`\n  --> src/commands/warranties/approve_warranty_claim_command.rs:11:18\n   |\n11 | use prometheus::{Counter, IntCounter};\n   |                  ^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":288,"byte_start":279,"column_end":27,"column_start":18,"expansion":null,"file_name":"src/commands/warranties/approve_warranty_claim_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":27,"highlight_start":18,"text":"use prometheus::{Counter, IntCounter};"}]},{"byte_end":279,"byte_start":278,"column_end":18,"column_start":17,"expansion":null,"file_name":"src/commands/warranties/approve_warranty_claim_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":18,"highlight_start":17,"text":"use prometheus::{Counter, IntCounter};"}]},{"byte_end":299,"byte_start":298,"column_end":38,"column_start":37,"expansion":null,"file_name":"src/commands/warranties/approve_warranty_claim_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":38,"highlight_start":37,"text":"use prometheus::{Counter, IntCounter};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Counter`","spans":[{"byte_end":286,"byte_start":279,"column_end":25,"column_start":18,"expansion":null,"file_name":"src/commands/warranties/approve_warranty_claim_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":18,"text":"use prometheus::{Counter, IntCounter};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Entity as WarrantyClaim` and `self`\n --> src/commands/warranties/claim_warranty_command.rs:5:20\n  |\n5 |         warranty::{self, Entity as Warranty},\n  |                    ^^^^\n6 |         warranty_claim::{self, Entity as WarrantyClaim},\n  |                                ^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":100,"byte_start":94,"column_end":26,"column_start":20,"expansion":null,"file_name":"src/commands/warranties/claim_warranty_command.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":26,"highlight_start":20,"text":"        warranty::{self, Entity as Warranty},"}]},{"byte_end":94,"byte_start":93,"column_end":20,"column_start":19,"expansion":null,"file_name":"src/commands/warranties/claim_warranty_command.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":20,"highlight_start":19,"text":"        warranty::{self, Entity as Warranty},"}]},{"byte_end":119,"byte_start":118,"column_end":45,"column_start":44,"expansion":null,"file_name":"src/commands/warranties/claim_warranty_command.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":45,"highlight_start":44,"text":"        warranty::{self, Entity as Warranty},"}]},{"byte_end":175,"byte_start":150,"column_end":55,"column_start":30,"expansion":null,"file_name":"src/commands/warranties/claim_warranty_command.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":55,"highlight_start":30,"text":"        warranty_claim::{self, Entity as WarrantyClaim},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Entity as WarrantyClaim` and `self`","spans":[{"byte_end":98,"byte_start":94,"column_end":24,"column_start":20,"expansion":null,"file_name":"src/commands/warranties/claim_warranty_command.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":20,"text":"        warranty::{self, Entity as Warranty},"}]},{"byte_end":175,"byte_start":152,"column_end":55,"column_start":32,"expansion":null,"file_name":"src/commands/warranties/claim_warranty_command.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":32,"text":"        warranty_claim::{self, Entity as WarrantyClaim},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Counter`\n  --> src/commands/warranties/claim_warranty_command.rs:14:18\n   |\n14 | use prometheus::{Counter, IntCounter};\n   |                  ^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":351,"byte_start":342,"column_end":27,"column_start":18,"expansion":null,"file_name":"src/commands/warranties/claim_warranty_command.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":27,"highlight_start":18,"text":"use prometheus::{Counter, IntCounter};"}]},{"byte_end":342,"byte_start":341,"column_end":18,"column_start":17,"expansion":null,"file_name":"src/commands/warranties/claim_warranty_command.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":18,"highlight_start":17,"text":"use prometheus::{Counter, IntCounter};"}]},{"byte_end":362,"byte_start":361,"column_end":38,"column_start":37,"expansion":null,"file_name":"src/commands/warranties/claim_warranty_command.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":38,"highlight_start":37,"text":"use prometheus::{Counter, IntCounter};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Counter`","spans":[{"byte_end":349,"byte_start":342,"column_end":25,"column_start":18,"expansion":null,"file_name":"src/commands/warranties/claim_warranty_command.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":18,"text":"use prometheus::{Counter, IntCounter};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Entity as Warranty`\n --> src/commands/warranties/create_warranty_command.rs:4:32\n  |\n4 |     entities::warranty::{self, Entity as Warranty},\n  |                                ^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":108,"byte_start":88,"column_end":50,"column_start":30,"expansion":null,"file_name":"src/commands/warranties/create_warranty_command.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":50,"highlight_start":30,"text":"    entities::warranty::{self, Entity as Warranty},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Entity as Warranty`","spans":[{"byte_end":108,"byte_start":90,"column_end":50,"column_start":32,"expansion":null,"file_name":"src/commands/warranties/create_warranty_command.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":32,"text":"    entities::warranty::{self, Entity as Warranty},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Counter`\n  --> src/commands/warranties/create_warranty_command.rs:11:18\n   |\n11 | use prometheus::{Counter, IntCounter};\n   |                  ^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":289,"byte_start":280,"column_end":27,"column_start":18,"expansion":null,"file_name":"src/commands/warranties/create_warranty_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":27,"highlight_start":18,"text":"use prometheus::{Counter, IntCounter};"}]},{"byte_end":280,"byte_start":279,"column_end":18,"column_start":17,"expansion":null,"file_name":"src/commands/warranties/create_warranty_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":18,"highlight_start":17,"text":"use prometheus::{Counter, IntCounter};"}]},{"byte_end":300,"byte_start":299,"column_end":38,"column_start":37,"expansion":null,"file_name":"src/commands/warranties/create_warranty_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":38,"highlight_start":37,"text":"use prometheus::{Counter, IntCounter};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Counter`","spans":[{"byte_end":287,"byte_start":280,"column_end":25,"column_start":18,"expansion":null,"file_name":"src/commands/warranties/create_warranty_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":18,"text":"use prometheus::{Counter, IntCounter};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Counter`\n  --> src/commands/warranties/reject_warranty_claim_command.rs:11:18\n   |\n11 | use prometheus::{Counter, IntCounter};\n   |                  ^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":288,"byte_start":279,"column_end":27,"column_start":18,"expansion":null,"file_name":"src/commands/warranties/reject_warranty_claim_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":27,"highlight_start":18,"text":"use prometheus::{Counter, IntCounter};"}]},{"byte_end":279,"byte_start":278,"column_end":18,"column_start":17,"expansion":null,"file_name":"src/commands/warranties/reject_warranty_claim_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":18,"highlight_start":17,"text":"use prometheus::{Counter, IntCounter};"}]},{"byte_end":299,"byte_start":298,"column_end":38,"column_start":37,"expansion":null,"file_name":"src/commands/warranties/reject_warranty_claim_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":38,"highlight_start":37,"text":"use prometheus::{Counter, IntCounter};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Counter`","spans":[{"byte_end":286,"byte_start":279,"column_end":25,"column_start":18,"expansion":null,"file_name":"src/commands/warranties/reject_warranty_claim_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":18,"text":"use prometheus::{Counter, IntCounter};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/commands/workorders/add_note_to_work_order_command.rs:9:5\n  |\n9 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":204,"byte_start":174,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/workorders/add_note_to_work_order_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use chrono::Utc;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":202,"byte_start":178,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/workorders/add_note_to_work_order_command.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/commands/workorders/assign_work_order_command.rs:5:5\n  |\n5 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":191,"byte_start":161,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/workorders/assign_work_order_command.rs","is_primary":true,"label":null,"line_end":6,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::{ActiveModelTrait, DatabaseTransaction, EntityTrait, Set, TransactionTrait};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":189,"byte_start":165,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/workorders/assign_work_order_command.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n  --> src/commands/workorders/calculate_average_cost_command.rs:10:5\n   |\n10 | use async_trait::async_trait;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":286,"byte_start":256,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/workorders/calculate_average_cost_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use bigdecimal::{BigDecimal, Zero};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":284,"byte_start":260,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/workorders/calculate_average_cost_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n  --> src/commands/workorders/calculate_cogs_command.rs:10:5\n   |\n10 | use async_trait::async_trait;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":308,"byte_start":278,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use bigdecimal::BigDecimal;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":306,"byte_start":282,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `DatabaseConnection` and `Order`\n  --> src/commands/workorders/calculate_cogs_command.rs:18:28\n   |\n18 | use sea_orm::{ColumnTrait, DatabaseConnection, EntityTrait, Order, QueryFilter};\n   |                            ^^^^^^^^^^^^^^^^^^               ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":573,"byte_start":553,"column_end":46,"column_start":26,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":46,"highlight_start":26,"text":"use sea_orm::{ColumnTrait, DatabaseConnection, EntityTrait, Order, QueryFilter};"}]},{"byte_end":593,"byte_start":586,"column_end":66,"column_start":59,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":66,"highlight_start":59,"text":"use sea_orm::{ColumnTrait, DatabaseConnection, EntityTrait, Order, QueryFilter};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `DatabaseConnection` and `Order`","spans":[{"byte_end":573,"byte_start":555,"column_end":46,"column_start":28,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":28,"text":"use sea_orm::{ColumnTrait, DatabaseConnection, EntityTrait, Order, QueryFilter};"}]},{"byte_end":593,"byte_start":588,"column_end":66,"column_start":61,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":61,"text":"use sea_orm::{ColumnTrait, DatabaseConnection, EntityTrait, Order, QueryFilter};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `uuid::Uuid`\n --> src/commands/workorders/calculate_monthly_cogs_command.rs:1:5\n  |\n1 | use uuid::Uuid;\n  |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":16,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/workorders/calculate_monthly_cogs_command.rs","is_primary":true,"label":null,"line_end":2,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use uuid::Uuid;"},{"highlight_end":1,"highlight_start":1,"text":"use std::str::FromStr;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `uuid::Uuid`","spans":[{"byte_end":14,"byte_start":4,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/commands/workorders/calculate_monthly_cogs_command.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use uuid::Uuid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n  --> src/commands/workorders/calculate_monthly_cogs_command.rs:11:5\n   |\n11 | use async_trait::async_trait;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":306,"byte_start":276,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/workorders/calculate_monthly_cogs_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use bigdecimal::BigDecimal;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":304,"byte_start":280,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/workorders/calculate_monthly_cogs_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Order`\n  --> src/commands/workorders/calculate_monthly_cogs_command.rs:18:61\n   |\n18 | use sea_orm::{ColumnTrait, DatabaseConnection, EntityTrait, Order, QueryFilter};\n   |                                                             ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":605,"byte_start":598,"column_end":66,"column_start":59,"expansion":null,"file_name":"src/commands/workorders/calculate_monthly_cogs_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":66,"highlight_start":59,"text":"use sea_orm::{ColumnTrait, DatabaseConnection, EntityTrait, Order, QueryFilter};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Order`","spans":[{"byte_end":605,"byte_start":600,"column_end":66,"column_start":61,"expansion":null,"file_name":"src/commands/workorders/calculate_monthly_cogs_command.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":61,"text":"use sea_orm::{ColumnTrait, DatabaseConnection, EntityTrait, Order, QueryFilter};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/commands/workorders/calculate_weighted_average_cogs_command.rs:9:5\n  |\n9 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":274,"byte_start":244,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/workorders/calculate_weighted_average_cogs_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use bigdecimal::{BigDecimal, Zero};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":272,"byte_start":248,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/commands/workorders/calculate_weighted_average_cogs_command.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Utc`\n  --> src/commands/workorders/calculate_weighted_average_cogs_command.rs:11:29\n   |\n11 | use chrono::{NaiveDateTime, Utc};\n   |                             ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":341,"byte_start":336,"column_end":32,"column_start":27,"expansion":null,"file_name":"src/commands/workorders/calculate_weighted_average_cogs_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":32,"highlight_start":27,"text":"use chrono::{NaiveDateTime, Utc};"}]},{"byte_end":323,"byte_start":322,"column_end":14,"column_start":13,"expansion":null,"file_name":"src/commands/workorders/calculate_weighted_average_cogs_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"use chrono::{NaiveDateTime, Utc};"}]},{"byte_end":342,"byte_start":341,"column_end":33,"column_start":32,"expansion":null,"file_name":"src/commands/workorders/calculate_weighted_average_cogs_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":32,"text":"use chrono::{NaiveDateTime, Utc};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Utc`","spans":[{"byte_end":341,"byte_start":338,"column_end":32,"column_start":29,"expansion":null,"file_name":"src/commands/workorders/calculate_weighted_average_cogs_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":29,"text":"use chrono::{NaiveDateTime, Utc};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Order`\n  --> src/commands/workorders/calculate_weighted_average_cogs_command.rs:14:61\n   |\n14 | use sea_orm::{ColumnTrait, DatabaseConnection, EntityTrait, Order, QueryFilter};\n   |                                                             ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":467,"byte_start":460,"column_end":66,"column_start":59,"expansion":null,"file_name":"src/commands/workorders/calculate_weighted_average_cogs_command.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":66,"highlight_start":59,"text":"use sea_orm::{ColumnTrait, DatabaseConnection, EntityTrait, Order, QueryFilter};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Order`","spans":[{"byte_end":467,"byte_start":462,"column_end":66,"column_start":61,"expansion":null,"file_name":"src/commands/workorders/calculate_weighted_average_cogs_command.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":61,"text":"use sea_orm::{ColumnTrait, DatabaseConnection, EntityTrait, Order, QueryFilter};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `std::cmp::Ordering`\n  --> src/commands/workorders/calculate_weighted_average_cogs_command.rs:16:5\n   |\n16 | use std::cmp::Ordering;\n   |     ^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":544,"byte_start":520,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/workorders/calculate_weighted_average_cogs_command.rs","is_primary":true,"label":null,"line_end":17,"line_start":16,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":24,"highlight_start":1,"text":"use std::cmp::Ordering;"},{"highlight_end":1,"highlight_start":1,"text":"use std::sync::Arc;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::cmp::Ordering`","spans":[{"byte_end":542,"byte_start":524,"column_end":23,"column_start":5,"expansion":null,"file_name":"src/commands/workorders/calculate_weighted_average_cogs_command.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":5,"text":"use std::cmp::Ordering;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `uuid::Uuid`\n --> src/commands/workorders/list_work_orders.rs:1:5\n  |\n1 | use uuid::Uuid;\n  |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":16,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/workorders/list_work_orders.rs","is_primary":true,"label":null,"line_end":2,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use uuid::Uuid;"},{"highlight_end":1,"highlight_start":1,"text":"use async_trait::async_trait;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `uuid::Uuid`","spans":[{"byte_end":14,"byte_start":4,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/commands/workorders/list_work_orders.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use uuid::Uuid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `EntityTrait`\n  --> src/db.rs:10:5\n   |\n10 |     EntityTrait, FromQueryResult, Statement,\n   |     ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":313,"byte_start":296,"column_end":16,"column_start":88,"expansion":null,"file_name":"src/db.rs","is_primary":true,"label":null,"line_end":10,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":89,"highlight_start":88,"text":"    ConnectOptions, Database, DatabaseConnection, DatabaseTransaction, DbBackend, DbErr,"},{"highlight_end":16,"highlight_start":1,"text":"    EntityTrait, FromQueryResult, Statement,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `EntityTrait`","spans":[{"byte_end":313,"byte_start":302,"column_end":16,"column_start":5,"expansion":null,"file_name":"src/db.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":5,"text":"    EntityTrait, FromQueryResult, Statement,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `rust_decimal::Decimal`\n --> src/entities/inventory_transaction.rs:3:5\n  |\n3 | use rust_decimal::Decimal;\n  |     ^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":86,"byte_start":59,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/entities/inventory_transaction.rs","is_primary":true,"label":null,"line_end":4,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":27,"highlight_start":1,"text":"use rust_decimal::Decimal;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::entity::prelude::*;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `rust_decimal::Decimal`","spans":[{"byte_end":84,"byte_start":63,"column_end":26,"column_start":5,"expansion":null,"file_name":"src/entities/inventory_transaction.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":5,"text":"use rust_decimal::Decimal;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ActiveValue::Set`\n --> src/entities/order.rs:4:35\n  |\n4 | use sea_orm::{entity::prelude::*, ActiveValue::Set};\n  |                                   ^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":136,"byte_start":118,"column_end":51,"column_start":33,"expansion":null,"file_name":"src/entities/order.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":51,"highlight_start":33,"text":"use sea_orm::{entity::prelude::*, ActiveValue::Set};"}]},{"byte_end":100,"byte_start":99,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/entities/order.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use sea_orm::{entity::prelude::*, ActiveValue::Set};"}]},{"byte_end":137,"byte_start":136,"column_end":52,"column_start":51,"expansion":null,"file_name":"src/entities/order.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":52,"highlight_start":51,"text":"use sea_orm::{entity::prelude::*, ActiveValue::Set};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ActiveValue::Set`","spans":[{"byte_end":136,"byte_start":120,"column_end":51,"column_start":35,"expansion":null,"file_name":"src/entities/order.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":35,"text":"use sea_orm::{entity::prelude::*, ActiveValue::Set};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ValidationError`\n --> src/entities/order.rs:7:27\n  |\n7 | use validator::{Validate, ValidationError};\n  |                           ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":233,"byte_start":216,"column_end":42,"column_start":25,"expansion":null,"file_name":"src/entities/order.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":42,"highlight_start":25,"text":"use validator::{Validate, ValidationError};"}]},{"byte_end":208,"byte_start":207,"column_end":17,"column_start":16,"expansion":null,"file_name":"src/entities/order.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":16,"text":"use validator::{Validate, ValidationError};"}]},{"byte_end":234,"byte_start":233,"column_end":43,"column_start":42,"expansion":null,"file_name":"src/entities/order.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":43,"highlight_start":42,"text":"use validator::{Validate, ValidationError};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ValidationError`","spans":[{"byte_end":233,"byte_start":218,"column_end":42,"column_start":27,"expansion":null,"file_name":"src/entities/order.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":27,"text":"use validator::{Validate, ValidationError};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/entities/product.rs:8:5\n  |\n8 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":281,"byte_start":251,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/entities/product.rs","is_primary":true,"label":null,"line_end":9,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":279,"byte_start":255,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/entities/product.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `std::collections::HashMap`\n --> src/entities/commerce/product_variant.rs:5:5\n  |\n5 | use std::collections::HashMap;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":157,"byte_start":126,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/entities/commerce/product_variant.rs","is_primary":true,"label":null,"line_end":6,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":31,"highlight_start":1,"text":"use std::collections::HashMap;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::collections::HashMap`","spans":[{"byte_end":155,"byte_start":130,"column_end":30,"column_start":5,"expansion":null,"file_name":"src/entities/commerce/product_variant.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":5,"text":"use std::collections::HashMap;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `serde_json`\n --> src/errors.rs:6:5\n  |\n6 | use serde_json;\n  |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":103,"byte_start":87,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":7,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use serde_json;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::error::DbErr;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `serde_json`","spans":[{"byte_end":101,"byte_start":91,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use serde_json;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `thiserror::Error`\n --> src/errors.rs:9:5\n  |\n9 | use thiserror::Error;\n  |     ^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":174,"byte_start":152,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":10,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":22,"highlight_start":1,"text":"use thiserror::Error;"},{"highlight_end":1,"highlight_start":1,"text":"use utoipa::ToSchema;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `thiserror::Error`","spans":[{"byte_end":172,"byte_start":156,"column_end":21,"column_start":5,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":5,"text":"use thiserror::Error;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `BoxFuture` and `join_all`\n --> src/events/mod.rs:3:23\n  |\n3 | use futures::future::{join_all, BoxFuture};\n  |                       ^^^^^^^^  ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":103,"byte_start":59,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":4,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":44,"highlight_start":1,"text":"use futures::future::{join_all, BoxFuture};"},{"highlight_end":1,"highlight_start":1,"text":"use serde::{Deserialize, Serialize};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `BoxFuture` and `join_all`","spans":[{"byte_end":89,"byte_start":81,"column_end":31,"column_start":23,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":23,"text":"use futures::future::{join_all, BoxFuture};"}]},{"byte_end":100,"byte_start":91,"column_end":42,"column_start":33,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":33,"text":"use futures::future::{join_all, BoxFuture};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `std::sync::Arc`\n --> src/events/mod.rs:5:5\n  |\n5 | use std::sync::Arc;\n  |     ^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":160,"byte_start":140,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":6,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":20,"highlight_start":1,"text":"use std::sync::Arc;"},{"highlight_end":1,"highlight_start":1,"text":"use tokio::sync::{broadcast, mpsc};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::sync::Arc`","spans":[{"byte_end":158,"byte_start":144,"column_end":19,"column_start":5,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"use std::sync::Arc;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `broadcast`\n --> src/events/mod.rs:6:19\n  |\n6 | use tokio::sync::{broadcast, mpsc};\n  |                   ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":189,"byte_start":178,"column_end":30,"column_start":19,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":19,"text":"use tokio::sync::{broadcast, mpsc};"}]},{"byte_end":178,"byte_start":177,"column_end":19,"column_start":18,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":18,"text":"use tokio::sync::{broadcast, mpsc};"}]},{"byte_end":194,"byte_start":193,"column_end":35,"column_start":34,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":35,"highlight_start":34,"text":"use tokio::sync::{broadcast, mpsc};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `broadcast`","spans":[{"byte_end":187,"byte_start":178,"column_end":28,"column_start":19,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":19,"text":"use tokio::sync::{broadcast, mpsc};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `chrono::Utc`\n --> src/events/outbox.rs:6:5\n  |\n6 | use chrono::Utc;\n  |     ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":221,"byte_start":204,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/events/outbox.rs","is_primary":true,"label":null,"line_end":7,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":1,"text":"use chrono::Utc;"},{"highlight_end":1,"highlight_start":1,"text":"use tokio::time::{sleep, Duration, Instant};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `chrono::Utc`","spans":[{"byte_end":219,"byte_start":208,"column_end":16,"column_start":5,"expansion":null,"file_name":"src/events/outbox.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":5,"text":"use chrono::Utc;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Instant`\n --> src/events/outbox.rs:7:36\n  |\n7 | use tokio::time::{sleep, Duration, Instant};\n  |                                    ^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":263,"byte_start":254,"column_end":43,"column_start":34,"expansion":null,"file_name":"src/events/outbox.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":43,"highlight_start":34,"text":"use tokio::time::{sleep, Duration, Instant};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Instant`","spans":[{"byte_end":263,"byte_start":256,"column_end":43,"column_start":36,"expansion":null,"file_name":"src/events/outbox.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":36,"text":"use tokio::time::{sleep, Duration, Instant};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ServiceError`\n --> src/handlers/auth.rs:2:24\n  |\n2 |     errors::{ApiError, ServiceError},\n  |                        ^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":48,"byte_start":34,"column_end":36,"column_start":22,"expansion":null,"file_name":"src/handlers/auth.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":36,"highlight_start":22,"text":"    errors::{ApiError, ServiceError},"}]},{"byte_end":26,"byte_start":25,"column_end":14,"column_start":13,"expansion":null,"file_name":"src/handlers/auth.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"    errors::{ApiError, ServiceError},"}]},{"byte_end":49,"byte_start":48,"column_end":37,"column_start":36,"expansion":null,"file_name":"src/handlers/auth.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":37,"highlight_start":36,"text":"    errors::{ApiError, ServiceError},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ServiceError`","spans":[{"byte_end":48,"byte_start":36,"column_end":36,"column_start":24,"expansion":null,"file_name":"src/handlers/auth.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":24,"text":"    errors::{ApiError, ServiceError},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Algorithm`, `DecodingKey`, `Validation`, and `decode`\n  --> src/handlers/auth.rs:24:28\n   |\n24 | use jsonwebtoken::{encode, Algorithm, DecodingKey, EncodingKey, Header, Validation, decode};\n   |                            ^^^^^^^^^  ^^^^^^^^^^^                       ^^^^^^^^^^  ^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":555,"byte_start":531,"column_end":50,"column_start":26,"expansion":null,"file_name":"src/handlers/auth.rs","is_primary":true,"label":null,"line_end":24,"line_start":24,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":50,"highlight_start":26,"text":"use jsonwebtoken::{encode, Algorithm, DecodingKey, EncodingKey, Header, Validation, decode};"}]},{"byte_end":596,"byte_start":576,"column_end":91,"column_start":71,"expansion":null,"file_name":"src/handlers/auth.rs","is_primary":true,"label":null,"line_end":24,"line_start":24,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":91,"highlight_start":71,"text":"use jsonwebtoken::{encode, Algorithm, DecodingKey, EncodingKey, Header, Validation, decode};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Algorithm`, `DecodingKey`, `Validation`, and `decode`","spans":[{"byte_end":542,"byte_start":533,"column_end":37,"column_start":28,"expansion":null,"file_name":"src/handlers/auth.rs","is_primary":true,"label":null,"line_end":24,"line_start":24,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":28,"text":"use jsonwebtoken::{encode, Algorithm, DecodingKey, EncodingKey, Header, Validation, decode};"}]},{"byte_end":555,"byte_start":544,"column_end":50,"column_start":39,"expansion":null,"file_name":"src/handlers/auth.rs","is_primary":true,"label":null,"line_end":24,"line_start":24,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":39,"text":"use jsonwebtoken::{encode, Algorithm, DecodingKey, EncodingKey, Header, Validation, decode};"}]},{"byte_end":588,"byte_start":578,"column_end":83,"column_start":73,"expansion":null,"file_name":"src/handlers/auth.rs","is_primary":true,"label":null,"line_end":24,"line_start":24,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":83,"highlight_start":73,"text":"use jsonwebtoken::{encode, Algorithm, DecodingKey, EncodingKey, Header, Validation, decode};"}]},{"byte_end":596,"byte_start":590,"column_end":91,"column_start":85,"expansion":null,"file_name":"src/handlers/auth.rs","is_primary":true,"label":null,"line_end":24,"line_start":24,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":91,"highlight_start":85,"text":"use jsonwebtoken::{encode, Algorithm, DecodingKey, EncodingKey, Header, Validation, decode};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `warn`\n  --> src/handlers/auth.rs:26:21\n   |\n26 | use tracing::{info, warn};\n   |                     ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":660,"byte_start":654,"column_end":25,"column_start":19,"expansion":null,"file_name":"src/handlers/auth.rs","is_primary":true,"label":null,"line_end":26,"line_start":26,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":25,"highlight_start":19,"text":"use tracing::{info, warn};"}]},{"byte_end":650,"byte_start":649,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/handlers/auth.rs","is_primary":true,"label":null,"line_end":26,"line_start":26,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use tracing::{info, warn};"}]},{"byte_end":661,"byte_start":660,"column_end":26,"column_start":25,"expansion":null,"file_name":"src/handlers/auth.rs","is_primary":true,"label":null,"line_end":26,"line_start":26,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":26,"highlight_start":25,"text":"use tracing::{info, warn};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `warn`","spans":[{"byte_end":660,"byte_start":656,"column_end":25,"column_start":21,"expansion":null,"file_name":"src/handlers/auth.rs","is_primary":true,"label":null,"line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":21,"text":"use tracing::{info, warn};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `std::collections::HashMap`\n --> src/handlers/orders.rs:8:5\n  |\n8 | use std::collections::HashMap;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":198,"byte_start":167,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/handlers/orders.rs","is_primary":true,"label":null,"line_end":9,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":31,"highlight_start":1,"text":"use std::collections::HashMap;"},{"highlight_end":1,"highlight_start":1,"text":"use uuid::Uuid;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::collections::HashMap`","spans":[{"byte_end":196,"byte_start":171,"column_end":30,"column_start":5,"expansion":null,"file_name":"src/handlers/orders.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":5,"text":"use std::collections::HashMap;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `std::str::FromStr`\n  --> src/handlers/orders.rs:21:5\n   |\n21 | use std::str::FromStr;\n   |     ^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":513,"byte_start":490,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/handlers/orders.rs","is_primary":true,"label":null,"line_end":22,"line_start":21,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":23,"highlight_start":1,"text":"use std::str::FromStr;"},{"highlight_end":1,"highlight_start":1,"text":"use crate::services::orders as svc_orders;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::str::FromStr`","spans":[{"byte_end":511,"byte_start":494,"column_end":22,"column_start":5,"expansion":null,"file_name":"src/handlers/orders.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":5,"text":"use std::str::FromStr;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unnecessary parentheses around block return value\n   --> src/handlers/orders.rs:317:106\n    |\n317 | ...   it.tax_amount.map(|t| if it.total_price.is_zero() { rust_decimal::Decimal::ZERO } else { (t / it.total_price) }).or(Some(rust_decim...\n    |                                                                                                ^                  ^\n    |\n    = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n    |\n317 -                 it.tax_amount.map(|t| if it.total_price.is_zero() { rust_decimal::Decimal::ZERO } else { (t / it.total_price) }).or(Some(rust_decimal::Decimal::ZERO)),\n317 +                 it.tax_amount.map(|t| if it.total_price.is_zero() { rust_decimal::Decimal::ZERO } else { t / it.total_price }).or(Some(rust_decimal::Decimal::ZERO)),\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_parens)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove these parentheses","rendered":null,"spans":[{"byte_end":11538,"byte_start":11537,"column_end":107,"column_start":106,"expansion":null,"file_name":"src/handlers/orders.rs","is_primary":true,"label":null,"line_end":317,"line_start":317,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":107,"highlight_start":106,"text":"                it.tax_amount.map(|t| if it.total_price.is_zero() { rust_decimal::Decimal::ZERO } else { (t / it.total_price) }).or(Some(rust_decimal::Decimal::ZERO)),"}]},{"byte_end":11557,"byte_start":11556,"column_end":126,"column_start":125,"expansion":null,"file_name":"src/handlers/orders.rs","is_primary":true,"label":null,"line_end":317,"line_start":317,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":126,"highlight_start":125,"text":"                it.tax_amount.map(|t| if it.total_price.is_zero() { rust_decimal::Decimal::ZERO } else { (t / it.total_price) }).or(Some(rust_decimal::Decimal::ZERO)),"}]}]}],"code":{"code":"unused_parens","explanation":null},"level":"warning","message":"unnecessary parentheses around block return value","spans":[{"byte_end":11538,"byte_start":11537,"column_end":107,"column_start":106,"expansion":null,"file_name":"src/handlers/orders.rs","is_primary":true,"label":null,"line_end":317,"line_start":317,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":107,"highlight_start":106,"text":"                it.tax_amount.map(|t| if it.total_price.is_zero() { rust_decimal::Decimal::ZERO } else { (t / it.total_price) }).or(Some(rust_decimal::Decimal::ZERO)),"}]},{"byte_end":11557,"byte_start":11556,"column_end":126,"column_start":125,"expansion":null,"file_name":"src/handlers/orders.rs","is_primary":true,"label":null,"line_end":317,"line_start":317,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":126,"highlight_start":125,"text":"                it.tax_amount.map(|t| if it.total_price.is_zero() { rust_decimal::Decimal::ZERO } else { (t / it.total_price) }).or(Some(rust_decimal::Decimal::ZERO)),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `delete` and `put`\n --> src/handlers/inventory.rs:6:15\n  |\n6 |     routing::{delete, get, post, put},\n  |               ^^^^^^             ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":186,"byte_start":178,"column_end":23,"column_start":15,"expansion":null,"file_name":"src/handlers/inventory.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":23,"highlight_start":15,"text":"    routing::{delete, get, post, put},"}]},{"byte_end":200,"byte_start":195,"column_end":37,"column_start":32,"expansion":null,"file_name":"src/handlers/inventory.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":37,"highlight_start":32,"text":"    routing::{delete, get, post, put},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `delete` and `put`","spans":[{"byte_end":184,"byte_start":178,"column_end":21,"column_start":15,"expansion":null,"file_name":"src/handlers/inventory.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":15,"text":"    routing::{delete, get, post, put},"}]},{"byte_end":200,"byte_start":197,"column_end":37,"column_start":34,"expansion":null,"file_name":"src/handlers/inventory.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":34,"text":"    routing::{delete, get, post, put},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `std::sync::Arc`\n  --> src/handlers/inventory.rs:15:5\n   |\n15 | use std::sync::Arc;\n   |     ^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":386,"byte_start":366,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/handlers/inventory.rs","is_primary":true,"label":null,"line_end":16,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":20,"highlight_start":1,"text":"use std::sync::Arc;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::sync::Arc`","spans":[{"byte_end":384,"byte_start":370,"column_end":19,"column_start":5,"expansion":null,"file_name":"src/handlers/inventory.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"use std::sync::Arc;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `delete` and `put`\n --> src/handlers/returns.rs:5:15\n  |\n5 |     routing::{delete, get, post, put},\n  |               ^^^^^^             ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":136,"byte_start":128,"column_end":23,"column_start":15,"expansion":null,"file_name":"src/handlers/returns.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":23,"highlight_start":15,"text":"    routing::{delete, get, post, put},"}]},{"byte_end":150,"byte_start":145,"column_end":37,"column_start":32,"expansion":null,"file_name":"src/handlers/returns.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":37,"highlight_start":32,"text":"    routing::{delete, get, post, put},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `delete` and `put`","spans":[{"byte_end":134,"byte_start":128,"column_end":21,"column_start":15,"expansion":null,"file_name":"src/handlers/returns.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":15,"text":"    routing::{delete, get, post, put},"}]},{"byte_end":150,"byte_start":147,"column_end":37,"column_start":34,"expansion":null,"file_name":"src/handlers/returns.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":34,"text":"    routing::{delete, get, post, put},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `std::sync::Arc`\n  --> src/handlers/returns.rs:14:5\n   |\n14 | use std::sync::Arc;\n   |     ^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":350,"byte_start":330,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/handlers/returns.rs","is_primary":true,"label":null,"line_end":15,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":20,"highlight_start":1,"text":"use std::sync::Arc;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::sync::Arc`","spans":[{"byte_end":348,"byte_start":334,"column_end":19,"column_start":5,"expansion":null,"file_name":"src/handlers/returns.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"use std::sync::Arc;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `delete` and `put`\n --> src/handlers/shipments.rs:5:15\n  |\n5 |     routing::{delete, get, post, put},\n  |               ^^^^^^             ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":136,"byte_start":128,"column_end":23,"column_start":15,"expansion":null,"file_name":"src/handlers/shipments.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":23,"highlight_start":15,"text":"    routing::{delete, get, post, put},"}]},{"byte_end":150,"byte_start":145,"column_end":37,"column_start":32,"expansion":null,"file_name":"src/handlers/shipments.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":37,"highlight_start":32,"text":"    routing::{delete, get, post, put},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `delete` and `put`","spans":[{"byte_end":134,"byte_start":128,"column_end":21,"column_start":15,"expansion":null,"file_name":"src/handlers/shipments.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":15,"text":"    routing::{delete, get, post, put},"}]},{"byte_end":150,"byte_start":147,"column_end":37,"column_start":34,"expansion":null,"file_name":"src/handlers/shipments.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":34,"text":"    routing::{delete, get, post, put},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `std::sync::Arc`\n  --> src/handlers/shipments.rs:14:5\n   |\n14 | use std::sync::Arc;\n   |     ^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":350,"byte_start":330,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/handlers/shipments.rs","is_primary":true,"label":null,"line_end":15,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":20,"highlight_start":1,"text":"use std::sync::Arc;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::sync::Arc`","spans":[{"byte_end":348,"byte_start":334,"column_end":19,"column_start":5,"expansion":null,"file_name":"src/handlers/shipments.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"use std::sync::Arc;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `delete` and `put`\n --> src/handlers/warranties.rs:6:15\n  |\n6 |     routing::{delete, get, post, put},\n  |               ^^^^^^             ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":158,"byte_start":150,"column_end":23,"column_start":15,"expansion":null,"file_name":"src/handlers/warranties.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":23,"highlight_start":15,"text":"    routing::{delete, get, post, put},"}]},{"byte_end":172,"byte_start":167,"column_end":37,"column_start":32,"expansion":null,"file_name":"src/handlers/warranties.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":37,"highlight_start":32,"text":"    routing::{delete, get, post, put},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `delete` and `put`","spans":[{"byte_end":156,"byte_start":150,"column_end":21,"column_start":15,"expansion":null,"file_name":"src/handlers/warranties.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":15,"text":"    routing::{delete, get, post, put},"}]},{"byte_end":172,"byte_start":169,"column_end":37,"column_start":34,"expansion":null,"file_name":"src/handlers/warranties.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":34,"text":"    routing::{delete, get, post, put},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `std::sync::Arc`\n  --> src/handlers/warranties.rs:12:5\n   |\n12 | use std::sync::Arc;\n   |     ^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":298,"byte_start":278,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/handlers/warranties.rs","is_primary":true,"label":null,"line_end":13,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":20,"highlight_start":1,"text":"use std::sync::Arc;"},{"highlight_end":1,"highlight_start":1,"text":"use uuid::Uuid;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::sync::Arc`","spans":[{"byte_end":296,"byte_start":282,"column_end":19,"column_start":5,"expansion":null,"file_name":"src/handlers/warranties.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"use std::sync::Arc;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `delete`\n --> src/handlers/work_orders.rs:6:15\n  |\n6 |     routing::{delete, get, post, put},\n  |               ^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":158,"byte_start":150,"column_end":23,"column_start":15,"expansion":null,"file_name":"src/handlers/work_orders.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":23,"highlight_start":15,"text":"    routing::{delete, get, post, put},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `delete`","spans":[{"byte_end":156,"byte_start":150,"column_end":21,"column_start":15,"expansion":null,"file_name":"src/handlers/work_orders.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":15,"text":"    routing::{delete, get, post, put},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `std::sync::Arc`\n  --> src/handlers/work_orders.rs:13:5\n   |\n13 | use std::sync::Arc;\n   |     ^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":334,"byte_start":314,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/handlers/work_orders.rs","is_primary":true,"label":null,"line_end":14,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":20,"highlight_start":1,"text":"use std::sync::Arc;"},{"highlight_end":1,"highlight_start":1,"text":"use uuid::Uuid;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::sync::Arc`","spans":[{"byte_end":332,"byte_start":318,"column_end":19,"column_start":5,"expansion":null,"file_name":"src/handlers/work_orders.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"use std::sync::Arc;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `super::common::PaginationParams`\n --> src/handlers/customers.rs:1:5\n  |\n1 | use super::common::PaginationParams;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":37,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/handlers/customers.rs","is_primary":true,"label":null,"line_end":2,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":37,"highlight_start":1,"text":"use super::common::PaginationParams;"},{"highlight_end":1,"highlight_start":1,"text":"use crate::auth::AuthenticatedUser;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `super::common::PaginationParams`","spans":[{"byte_end":35,"byte_start":4,"column_end":36,"column_start":5,"expansion":null,"file_name":"src/handlers/customers.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":5,"text":"use super::common::PaginationParams;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Query` and `delete`\n --> src/handlers/customers.rs:6:27\n  |\n6 |     extract::{Json, Path, Query, State},\n  |                           ^^^^^\n...\n9 |     routing::{delete, get, post, put},\n  |               ^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":180,"byte_start":173,"column_end":32,"column_start":25,"expansion":null,"file_name":"src/handlers/customers.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":32,"highlight_start":25,"text":"    extract::{Json, Path, Query, State},"}]},{"byte_end":262,"byte_start":254,"column_end":23,"column_start":15,"expansion":null,"file_name":"src/handlers/customers.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":23,"highlight_start":15,"text":"    routing::{delete, get, post, put},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Query` and `delete`","spans":[{"byte_end":180,"byte_start":175,"column_end":32,"column_start":27,"expansion":null,"file_name":"src/handlers/customers.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":27,"text":"    extract::{Json, Path, Query, State},"}]},{"byte_end":260,"byte_start":254,"column_end":21,"column_start":15,"expansion":null,"file_name":"src/handlers/customers.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":15,"text":"    routing::{delete, get, post, put},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `put`\n  --> src/handlers/payments.rs:10:26\n   |\n10 |     routing::{get, post, put},\n   |                          ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":392,"byte_start":387,"column_end":29,"column_start":24,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":29,"highlight_start":24,"text":"    routing::{get, post, put},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `put`","spans":[{"byte_end":392,"byte_start":389,"column_end":29,"column_start":26,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":26,"text":"    routing::{get, post, put},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `std::sync::Arc`\n --> src/handlers/payment_webhooks.rs:6:5\n  |\n6 | use std::sync::Arc;\n  |     ^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":211,"byte_start":191,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/handlers/payment_webhooks.rs","is_primary":true,"label":null,"line_end":7,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":20,"highlight_start":1,"text":"use std::sync::Arc;"},{"highlight_end":1,"highlight_start":1,"text":"use tracing::{info, warn, error};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::sync::Arc`","spans":[{"byte_end":209,"byte_start":195,"column_end":19,"column_start":5,"expansion":null,"file_name":"src/handlers/payment_webhooks.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"use std::sync::Arc;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `error`\n --> src/handlers/payment_webhooks.rs:7:27\n  |\n7 | use tracing::{info, warn, error};\n  |                           ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":242,"byte_start":235,"column_end":32,"column_start":25,"expansion":null,"file_name":"src/handlers/payment_webhooks.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":32,"highlight_start":25,"text":"use tracing::{info, warn, error};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `error`","spans":[{"byte_end":242,"byte_start":237,"column_end":32,"column_start":27,"expansion":null,"file_name":"src/handlers/payment_webhooks.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":27,"text":"use tracing::{info, warn, error};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `delete_user_notifications`\n --> src/handlers/notifications.rs:5:31\n  |\n5 |     delete_user_notification, delete_user_notifications, get_user_notifications, mark_notification_as_read,\n  |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":185,"byte_start":158,"column_end":56,"column_start":29,"expansion":null,"file_name":"src/handlers/notifications.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":56,"highlight_start":29,"text":"    delete_user_notification, delete_user_notifications, get_user_notifications, mark_notification_as_read,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `delete_user_notifications`","spans":[{"byte_end":185,"byte_start":160,"column_end":56,"column_start":31,"expansion":null,"file_name":"src/handlers/notifications.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":31,"text":"    delete_user_notification, delete_user_notifications, get_user_notifications, mark_notification_as_read,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `map_service_error`\n --> src/handlers/users.rs:2:23\n  |\n2 |     created_response, map_service_error, no_content_response, success_response, validate_input,\n  |                       ^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":60,"byte_start":41,"column_end":40,"column_start":21,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":40,"highlight_start":21,"text":"    created_response, map_service_error, no_content_response, success_response, validate_input,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `map_service_error`","spans":[{"byte_end":60,"byte_start":43,"column_end":40,"column_start":23,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":23,"text":"    created_response, map_service_error, no_content_response, success_response, validate_input,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `http::StatusCode`\n  --> src/handlers/users.rs:12:5\n   |\n12 |     http::StatusCode,\n   |     ^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":322,"byte_start":300,"column_end":21,"column_start":40,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":12,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":41,"highlight_start":40,"text":"    extract::{Json, Path, Query, State},"},{"highlight_end":21,"highlight_start":1,"text":"    http::StatusCode,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `http::StatusCode`","spans":[{"byte_end":322,"byte_start":306,"column_end":21,"column_start":5,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":5,"text":"    http::StatusCode,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `error`\n  --> src/handlers/users.rs:20:15\n   |\n20 | use tracing::{error, info};\n   |               ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":506,"byte_start":499,"column_end":22,"column_start":15,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":20,"line_start":20,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":22,"highlight_start":15,"text":"use tracing::{error, info};"}]},{"byte_end":499,"byte_start":498,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":20,"line_start":20,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use tracing::{error, info};"}]},{"byte_end":511,"byte_start":510,"column_end":27,"column_start":26,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":20,"line_start":20,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":27,"highlight_start":26,"text":"use tracing::{error, info};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `error`","spans":[{"byte_end":504,"byte_start":499,"column_end":20,"column_start":15,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":20,"line_start":20,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":15,"text":"use tracing::{error, info};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `tracing::info`\n  --> src/handlers/commerce/products.rs:20:5\n   |\n20 | use tracing::info;\n   |     ^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":536,"byte_start":517,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/handlers/commerce/products.rs","is_primary":true,"label":null,"line_end":21,"line_start":20,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":1,"text":"use tracing::info;"},{"highlight_end":1,"highlight_start":1,"text":"use uuid::Uuid;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `tracing::info`","spans":[{"byte_end":534,"byte_start":521,"column_end":18,"column_start":5,"expansion":null,"file_name":"src/handlers/commerce/products.rs","is_primary":true,"label":null,"line_end":20,"line_start":20,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":5,"text":"use tracing::info;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `auth::AuthenticatedUser`\n --> src/handlers/commerce/carts.rs:3:5\n  |\n3 |     auth::AuthenticatedUser,\n  |     ^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":169,"byte_start":140,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/handlers/commerce/carts.rs","is_primary":true,"label":null,"line_end":4,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":29,"highlight_start":5,"text":"    auth::AuthenticatedUser,"},{"highlight_end":5,"highlight_start":1,"text":"    errors::ApiError,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `auth::AuthenticatedUser`","spans":[{"byte_end":163,"byte_start":140,"column_end":28,"column_start":5,"expansion":null,"file_name":"src/handlers/commerce/carts.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":5,"text":"    auth::AuthenticatedUser,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Serialize`\n  --> src/handlers/commerce/carts.rs:13:26\n   |\n13 | use serde::{Deserialize, Serialize};\n   |                          ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":411,"byte_start":400,"column_end":35,"column_start":24,"expansion":null,"file_name":"src/handlers/commerce/carts.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":35,"highlight_start":24,"text":"use serde::{Deserialize, Serialize};"}]},{"byte_end":389,"byte_start":388,"column_end":13,"column_start":12,"expansion":null,"file_name":"src/handlers/commerce/carts.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":13,"highlight_start":12,"text":"use serde::{Deserialize, Serialize};"}]},{"byte_end":412,"byte_start":411,"column_end":36,"column_start":35,"expansion":null,"file_name":"src/handlers/commerce/carts.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":36,"highlight_start":35,"text":"use serde::{Deserialize, Serialize};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Serialize`","spans":[{"byte_end":411,"byte_start":402,"column_end":35,"column_start":26,"expansion":null,"file_name":"src/handlers/commerce/carts.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":26,"text":"use serde::{Deserialize, Serialize};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `CustomerInfoInput`, `PaymentInfo`, and `auth::AuthenticatedUser`\n --> src/handlers/commerce/checkout.rs:3:5\n  |\n3 |     auth::AuthenticatedUser,\n  |     ^^^^^^^^^^^^^^^^^^^^^^^\n...\n6 |         Address, CheckoutSession, CustomerInfoInput, PaymentInfo, ShippingMethod,\n  |                                   ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":148,"byte_start":119,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/handlers/commerce/checkout.rs","is_primary":true,"label":null,"line_end":4,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":29,"highlight_start":5,"text":"    auth::AuthenticatedUser,"},{"highlight_end":5,"highlight_start":1,"text":"    errors::ApiError,"}]},{"byte_end":274,"byte_start":242,"column_end":65,"column_start":33,"expansion":null,"file_name":"src/handlers/commerce/checkout.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":65,"highlight_start":33,"text":"        Address, CheckoutSession, CustomerInfoInput, PaymentInfo, ShippingMethod,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `CustomerInfoInput`, `PaymentInfo`, and `auth::AuthenticatedUser`","spans":[{"byte_end":142,"byte_start":119,"column_end":28,"column_start":5,"expansion":null,"file_name":"src/handlers/commerce/checkout.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":5,"text":"    auth::AuthenticatedUser,"}]},{"byte_end":261,"byte_start":244,"column_end":52,"column_start":35,"expansion":null,"file_name":"src/handlers/commerce/checkout.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":35,"text":"        Address, CheckoutSession, CustomerInfoInput, PaymentInfo, ShippingMethod,"}]},{"byte_end":274,"byte_start":263,"column_end":65,"column_start":54,"expansion":null,"file_name":"src/handlers/commerce/checkout.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":65,"highlight_start":54,"text":"        Address, CheckoutSession, CustomerInfoInput, PaymentInfo, ShippingMethod,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Path`\n  --> src/handlers/commerce/customers.rs:11:21\n   |\n11 |     extract::{Json, Path, State},\n   |                     ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":359,"byte_start":353,"column_end":25,"column_start":19,"expansion":null,"file_name":"src/handlers/commerce/customers.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":25,"highlight_start":19,"text":"    extract::{Json, Path, State},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Path`","spans":[{"byte_end":359,"byte_start":355,"column_end":25,"column_start":21,"expansion":null,"file_name":"src/handlers/commerce/customers.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":21,"text":"    extract::{Json, Path, State},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Serialize`\n  --> src/handlers/commerce/customers.rs:15:26\n   |\n15 | use serde::{Deserialize, Serialize};\n   |                          ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":449,"byte_start":438,"column_end":35,"column_start":24,"expansion":null,"file_name":"src/handlers/commerce/customers.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":35,"highlight_start":24,"text":"use serde::{Deserialize, Serialize};"}]},{"byte_end":427,"byte_start":426,"column_end":13,"column_start":12,"expansion":null,"file_name":"src/handlers/commerce/customers.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":13,"highlight_start":12,"text":"use serde::{Deserialize, Serialize};"}]},{"byte_end":450,"byte_start":449,"column_end":36,"column_start":35,"expansion":null,"file_name":"src/handlers/commerce/customers.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":36,"highlight_start":35,"text":"use serde::{Deserialize, Serialize};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Serialize`","spans":[{"byte_end":449,"byte_start":440,"column_end":35,"column_start":26,"expansion":null,"file_name":"src/handlers/commerce/customers.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":26,"text":"use serde::{Deserialize, Serialize};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `sea_orm::DatabaseConnection`\n  --> src/handlers/mod.rs:28:5\n   |\n28 | use sea_orm::DatabaseConnection;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":902,"byte_start":869,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/handlers/mod.rs","is_primary":true,"label":null,"line_end":29,"line_start":28,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":1,"text":"use sea_orm::DatabaseConnection;"},{"highlight_end":1,"highlight_start":1,"text":"use slog::Logger;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `sea_orm::DatabaseConnection`","spans":[{"byte_end":900,"byte_start":873,"column_end":32,"column_start":5,"expansion":null,"file_name":"src/handlers/mod.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":5,"text":"use sea_orm::DatabaseConnection;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `http::StatusCode`\n --> src/handlers/analytics.rs:4:5\n  |\n4 |     http::StatusCode,\n  |     ^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":72,"byte_start":50,"column_end":21,"column_start":19,"expansion":null,"file_name":"src/handlers/analytics.rs","is_primary":true,"label":null,"line_end":4,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":20,"highlight_start":19,"text":"    response::Json,"},{"highlight_end":21,"highlight_start":1,"text":"    http::StatusCode,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `http::StatusCode`","spans":[{"byte_end":72,"byte_start":56,"column_end":21,"column_start":5,"expansion":null,"file_name":"src/handlers/analytics.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":5,"text":"    http::StatusCode,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Serialize`\n --> src/handlers/analytics.rs:6:26\n  |\n6 | use serde::{Deserialize, Serialize};\n  |                          ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":111,"byte_start":100,"column_end":35,"column_start":24,"expansion":null,"file_name":"src/handlers/analytics.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":35,"highlight_start":24,"text":"use serde::{Deserialize, Serialize};"}]},{"byte_end":89,"byte_start":88,"column_end":13,"column_start":12,"expansion":null,"file_name":"src/handlers/analytics.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":13,"highlight_start":12,"text":"use serde::{Deserialize, Serialize};"}]},{"byte_end":112,"byte_start":111,"column_end":36,"column_start":35,"expansion":null,"file_name":"src/handlers/analytics.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":36,"highlight_start":35,"text":"use serde::{Deserialize, Serialize};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Serialize`","spans":[{"byte_end":111,"byte_start":102,"column_end":35,"column_start":26,"expansion":null,"file_name":"src/handlers/analytics.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":26,"text":"use serde::{Deserialize, Serialize};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `DateTime` and `Utc`\n --> src/handlers/analytics.rs:7:14\n  |\n7 | use chrono::{DateTime, Utc};\n  |              ^^^^^^^^  ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":143,"byte_start":114,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/handlers/analytics.rs","is_primary":true,"label":null,"line_end":8,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":29,"highlight_start":1,"text":"use chrono::{DateTime, Utc};"},{"highlight_end":1,"highlight_start":1,"text":"use rust_decimal::Decimal;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `DateTime` and `Utc`","spans":[{"byte_end":135,"byte_start":127,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/handlers/analytics.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"use chrono::{DateTime, Utc};"}]},{"byte_end":140,"byte_start":137,"column_end":27,"column_start":24,"expansion":null,"file_name":"src/handlers/analytics.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":24,"text":"use chrono::{DateTime, Utc};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `utoipa::ToSchema`\n --> src/handlers/analytics.rs:9:5\n  |\n9 | use utoipa::ToSchema;\n  |     ^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":192,"byte_start":170,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/handlers/analytics.rs","is_primary":true,"label":null,"line_end":10,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":22,"highlight_start":1,"text":"use utoipa::ToSchema;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `utoipa::ToSchema`","spans":[{"byte_end":190,"byte_start":174,"column_end":21,"column_start":5,"expansion":null,"file_name":"src/handlers/analytics.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":5,"text":"use utoipa::ToSchema;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ConnectionTrait`\n  --> src/health/mod.rs:21:35\n   |\n21 | use sea_orm::{DatabaseConnection, ConnectionTrait};\n   |                                   ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":656,"byte_start":639,"column_end":50,"column_start":33,"expansion":null,"file_name":"src/health/mod.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":50,"highlight_start":33,"text":"use sea_orm::{DatabaseConnection, ConnectionTrait};"}]},{"byte_end":621,"byte_start":620,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/health/mod.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use sea_orm::{DatabaseConnection, ConnectionTrait};"}]},{"byte_end":657,"byte_start":656,"column_end":51,"column_start":50,"expansion":null,"file_name":"src/health/mod.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":51,"highlight_start":50,"text":"use sea_orm::{DatabaseConnection, ConnectionTrait};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ConnectionTrait`","spans":[{"byte_end":656,"byte_start":641,"column_end":50,"column_start":35,"expansion":null,"file_name":"src/health/mod.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":35,"text":"use sea_orm::{DatabaseConnection, ConnectionTrait};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `crate::db`\n  --> src/health/mod.rs:30:5\n   |\n30 | use crate::db;\n   |     ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":883,"byte_start":868,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/health/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":30,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":1,"text":"use crate::db;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `crate::db`","spans":[{"byte_end":881,"byte_start":872,"column_end":14,"column_start":5,"expansion":null,"file_name":"src/health/mod.rs","is_primary":true,"label":null,"line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":5,"text":"use crate::db;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Instant`\n  --> src/metrics/mod.rs:31:29\n   |\n31 | use tokio::time::{Duration, Instant};\n   |                             ^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":962,"byte_start":953,"column_end":36,"column_start":27,"expansion":null,"file_name":"src/metrics/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":36,"highlight_start":27,"text":"use tokio::time::{Duration, Instant};"}]},{"byte_end":945,"byte_start":944,"column_end":19,"column_start":18,"expansion":null,"file_name":"src/metrics/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":18,"text":"use tokio::time::{Duration, Instant};"}]},{"byte_end":963,"byte_start":962,"column_end":37,"column_start":36,"expansion":null,"file_name":"src/metrics/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":37,"highlight_start":36,"text":"use tokio::time::{Duration, Instant};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Instant`","spans":[{"byte_end":962,"byte_start":955,"column_end":36,"column_start":29,"expansion":null,"file_name":"src/metrics/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":29,"text":"use tokio::time::{Duration, Instant};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `body::Body`\n --> src/middleware_helpers/sanitize.rs:2:5\n  |\n2 |     body::Body,\n  |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":32,"byte_start":16,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/middleware_helpers/sanitize.rs","is_primary":true,"label":null,"line_end":3,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":5,"text":"    body::Body,"},{"highlight_end":5,"highlight_start":1,"text":"    extract::Request,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `body::Body`","spans":[{"byte_end":26,"byte_start":16,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/middleware_helpers/sanitize.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"    body::Body,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `time::Duration`\n --> src/middleware_helpers/idempotency_redis.rs:5:22\n  |\n5 | use std::{sync::Arc, time::Duration};\n  |                      ^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":232,"byte_start":216,"column_end":36,"column_start":20,"expansion":null,"file_name":"src/middleware_helpers/idempotency_redis.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":36,"highlight_start":20,"text":"use std::{sync::Arc, time::Duration};"}]},{"byte_end":207,"byte_start":206,"column_end":11,"column_start":10,"expansion":null,"file_name":"src/middleware_helpers/idempotency_redis.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":11,"highlight_start":10,"text":"use std::{sync::Arc, time::Duration};"}]},{"byte_end":233,"byte_start":232,"column_end":37,"column_start":36,"expansion":null,"file_name":"src/middleware_helpers/idempotency_redis.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":37,"highlight_start":36,"text":"use std::{sync::Arc, time::Duration};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `time::Duration`","spans":[{"byte_end":232,"byte_start":218,"column_end":36,"column_start":22,"expansion":null,"file_name":"src/middleware_helpers/idempotency_redis.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":22,"text":"use std::{sync::Arc, time::Duration};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ValidationError`\n --> src/models/customer.rs:5:27\n  |\n5 | use validator::{Validate, ValidationError};\n  |                           ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":156,"byte_start":139,"column_end":42,"column_start":25,"expansion":null,"file_name":"src/models/customer.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":42,"highlight_start":25,"text":"use validator::{Validate, ValidationError};"}]},{"byte_end":131,"byte_start":130,"column_end":17,"column_start":16,"expansion":null,"file_name":"src/models/customer.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":16,"text":"use validator::{Validate, ValidationError};"}]},{"byte_end":157,"byte_start":156,"column_end":43,"column_start":42,"expansion":null,"file_name":"src/models/customer.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":43,"highlight_start":42,"text":"use validator::{Validate, ValidationError};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ValidationError`","spans":[{"byte_end":156,"byte_start":141,"column_end":42,"column_start":27,"expansion":null,"file_name":"src/models/customer.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":27,"text":"use validator::{Validate, ValidationError};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ValidationError`\n --> src/models/order.rs:5:27\n  |\n5 | use validator::{Validate, ValidationError};\n  |                           ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":156,"byte_start":139,"column_end":42,"column_start":25,"expansion":null,"file_name":"src/models/order.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":42,"highlight_start":25,"text":"use validator::{Validate, ValidationError};"}]},{"byte_end":131,"byte_start":130,"column_end":17,"column_start":16,"expansion":null,"file_name":"src/models/order.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":16,"text":"use validator::{Validate, ValidationError};"}]},{"byte_end":157,"byte_start":156,"column_end":43,"column_start":42,"expansion":null,"file_name":"src/models/order.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":43,"highlight_start":42,"text":"use validator::{Validate, ValidationError};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ValidationError`","spans":[{"byte_end":156,"byte_start":141,"column_end":42,"column_start":27,"expansion":null,"file_name":"src/models/order.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":27,"text":"use validator::{Validate, ValidationError};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ValidationErrors`\n --> src/models/order_entity/mod.rs:6:44\n  |\n6 | use validator::{Validate, ValidationError, ValidationErrors};\n  |                                            ^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":213,"byte_start":195,"column_end":60,"column_start":42,"expansion":null,"file_name":"src/models/order_entity/mod.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":60,"highlight_start":42,"text":"use validator::{Validate, ValidationError, ValidationErrors};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ValidationErrors`","spans":[{"byte_end":213,"byte_start":197,"column_end":60,"column_start":44,"expansion":null,"file_name":"src/models/order_entity/mod.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":44,"text":"use validator::{Validate, ValidationError, ValidationErrors};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/models/order_note_entity/mod.rs:1:5\n  |\n1 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":30,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/order_note_entity/mod.rs","is_primary":true,"label":null,"line_end":2,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use chrono::{DateTime, NaiveDateTime, Utc};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":28,"byte_start":4,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/models/order_note_entity/mod.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `DateTime`\n --> src/models/order_note_entity/mod.rs:2:14\n  |\n2 | use chrono::{DateTime, NaiveDateTime, Utc};\n  |              ^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":53,"byte_start":43,"column_end":24,"column_start":14,"expansion":null,"file_name":"src/models/order_note_entity/mod.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":24,"highlight_start":14,"text":"use chrono::{DateTime, NaiveDateTime, Utc};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `DateTime`","spans":[{"byte_end":51,"byte_start":43,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/models/order_note_entity/mod.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"use chrono::{DateTime, NaiveDateTime, Utc};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `sea_orm::Set`\n --> src/models/order_note_entity/mod.rs:4:5\n  |\n4 | use sea_orm::Set;\n  |     ^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":125,"byte_start":107,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/order_note_entity/mod.rs","is_primary":true,"label":null,"line_end":5,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":18,"highlight_start":1,"text":"use sea_orm::Set;"},{"highlight_end":1,"highlight_start":1,"text":"use serde::{Deserialize, Serialize};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `sea_orm::Set`","spans":[{"byte_end":123,"byte_start":111,"column_end":17,"column_start":5,"expansion":null,"file_name":"src/models/order_note_entity/mod.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":5,"text":"use sea_orm::Set;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `uuid::Uuid`\n --> src/models/order_shipment_entity.rs:4:5\n  |\n4 | use uuid::Uuid;\n  |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":115,"byte_start":99,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/order_shipment_entity.rs","is_primary":true,"label":null,"line_end":5,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use uuid::Uuid;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `uuid::Uuid`","spans":[{"byte_end":113,"byte_start":103,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/models/order_shipment_entity.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use uuid::Uuid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `rust_decimal_macros::dec`\n --> src/models/return_line_item.rs:3:5\n  |\n3 | use rust_decimal_macros::dec;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":86,"byte_start":56,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/return_line_item.rs","is_primary":true,"label":null,"line_end":4,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use rust_decimal_macros::dec;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::entity::prelude::*;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `rust_decimal_macros::dec`","spans":[{"byte_end":84,"byte_start":60,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/models/return_line_item.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use rust_decimal_macros::dec;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/models/shipment.rs:2:5\n  |\n2 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":59,"byte_start":29,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":3,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::entity::prelude::*;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":57,"byte_start":33,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ActiveValue`\n --> src/models/shipment.rs:4:36\n  |\n4 | use sea_orm::{ActiveModelBehavior, ActiveValue, Set};\n  |                                    ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":138,"byte_start":125,"column_end":47,"column_start":34,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":47,"highlight_start":34,"text":"use sea_orm::{ActiveModelBehavior, ActiveValue, Set};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ActiveValue`","spans":[{"byte_end":138,"byte_start":127,"column_end":47,"column_start":36,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":36,"text":"use sea_orm::{ActiveModelBehavior, ActiveValue, Set};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/models/suppliers.rs:2:5\n  |\n2 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":80,"byte_start":50,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":3,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"// use phonelib::PhoneValidator; // Commented out - dependency not available"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":78,"byte_start":54,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `ActiveValue` and `Set`\n --> src/models/suppliers.rs:5:36\n  |\n5 | use sea_orm::{ActiveModelBehavior, ActiveValue, Set, Condition, DatabaseConnection, QueryOrder, QuerySelect};\n  |                                    ^^^^^^^^^^^  ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":241,"byte_start":223,"column_end":52,"column_start":34,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":52,"highlight_start":34,"text":"use sea_orm::{ActiveModelBehavior, ActiveValue, Set, Condition, DatabaseConnection, QueryOrder, QuerySelect};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `ActiveValue` and `Set`","spans":[{"byte_end":236,"byte_start":225,"column_end":47,"column_start":36,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":36,"text":"use sea_orm::{ActiveModelBehavior, ActiveValue, Set, Condition, DatabaseConnection, QueryOrder, QuerySelect};"}]},{"byte_end":241,"byte_start":238,"column_end":52,"column_start":49,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":49,"text":"use sea_orm::{ActiveModelBehavior, ActiveValue, Set, Condition, DatabaseConnection, QueryOrder, QuerySelect};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `uuid::Uuid`\n  --> src/models/suppliers.rs:10:5\n   |\n10 | use uuid::Uuid;\n   |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":433,"byte_start":417,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":11,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use uuid::Uuid;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `uuid::Uuid`","spans":[{"byte_end":431,"byte_start":421,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use uuid::Uuid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `NaiveDate`\n --> src/models/work_order.rs:1:24\n  |\n1 | use chrono::{DateTime, NaiveDate, Utc};\n  |                        ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":32,"byte_start":21,"column_end":33,"column_start":22,"expansion":null,"file_name":"src/models/work_order.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":22,"text":"use chrono::{DateTime, NaiveDate, Utc};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `NaiveDate`","spans":[{"byte_end":32,"byte_start":23,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/models/work_order.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"use chrono::{DateTime, NaiveDate, Utc};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `ActiveValue` and `Set`\n --> src/models/work_order.rs:3:36\n  |\n3 | use sea_orm::{ActiveModelBehavior, ActiveValue, Set};\n  |                                    ^^^^^^^^^^^  ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":124,"byte_start":106,"column_end":52,"column_start":34,"expansion":null,"file_name":"src/models/work_order.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":52,"highlight_start":34,"text":"use sea_orm::{ActiveModelBehavior, ActiveValue, Set};"}]},{"byte_end":87,"byte_start":86,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/models/work_order.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use sea_orm::{ActiveModelBehavior, ActiveValue, Set};"}]},{"byte_end":125,"byte_start":124,"column_end":53,"column_start":52,"expansion":null,"file_name":"src/models/work_order.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":53,"highlight_start":52,"text":"use sea_orm::{ActiveModelBehavior, ActiveValue, Set};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `ActiveValue` and `Set`","spans":[{"byte_end":119,"byte_start":108,"column_end":47,"column_start":36,"expansion":null,"file_name":"src/models/work_order.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":36,"text":"use sea_orm::{ActiveModelBehavior, ActiveValue, Set};"}]},{"byte_end":124,"byte_start":121,"column_end":52,"column_start":49,"expansion":null,"file_name":"src/models/work_order.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":49,"text":"use sea_orm::{ActiveModelBehavior, ActiveValue, Set};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `NaiveDateTime`\n --> src/models/work_order_note_entity.rs:1:24\n  |\n1 | use chrono::{DateTime, NaiveDateTime, Utc};\n  |                        ^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":36,"byte_start":21,"column_end":37,"column_start":22,"expansion":null,"file_name":"src/models/work_order_note_entity.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":37,"highlight_start":22,"text":"use chrono::{DateTime, NaiveDateTime, Utc};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `NaiveDateTime`","spans":[{"byte_end":36,"byte_start":23,"column_end":37,"column_start":24,"expansion":null,"file_name":"src/models/work_order_note_entity.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":24,"text":"use chrono::{DateTime, NaiveDateTime, Utc};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/models/work_order_note_entity.rs:2:5\n  |\n2 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":74,"byte_start":44,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/work_order_note_entity.rs","is_primary":true,"label":null,"line_end":3,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::entity::prelude::*;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":72,"byte_start":48,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/models/work_order_note_entity.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `sea_orm::Set`\n --> src/models/work_order_note_entity.rs:4:5\n  |\n4 | use sea_orm::Set;\n  |     ^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":125,"byte_start":107,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/work_order_note_entity.rs","is_primary":true,"label":null,"line_end":5,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":18,"highlight_start":1,"text":"use sea_orm::Set;"},{"highlight_end":1,"highlight_start":1,"text":"use serde::{Deserialize, Serialize};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `sea_orm::Set`","spans":[{"byte_end":123,"byte_start":111,"column_end":17,"column_start":5,"expansion":null,"file_name":"src/models/work_order_note_entity.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":5,"text":"use sea_orm::Set;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `uuid::Uuid`\n --> src/models/work_order_note_entity.rs:7:5\n  |\n7 | use uuid::Uuid;\n  |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":222,"byte_start":206,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/work_order_note_entity.rs","is_primary":true,"label":null,"line_end":8,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use uuid::Uuid;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `uuid::Uuid`","spans":[{"byte_end":220,"byte_start":210,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/models/work_order_note_entity.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use uuid::Uuid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `DateTime` and `Utc`\n --> src/models/picks.rs:1:14\n  |\n1 | use chrono::{DateTime, Utc};\n  |              ^^^^^^^^  ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":29,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/picks.rs","is_primary":true,"label":null,"line_end":2,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":29,"highlight_start":1,"text":"use chrono::{DateTime, Utc};"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::entity::prelude::*;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `DateTime` and `Utc`","spans":[{"byte_end":21,"byte_start":13,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/models/picks.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"use chrono::{DateTime, Utc};"}]},{"byte_end":26,"byte_start":23,"column_end":27,"column_start":24,"expansion":null,"file_name":"src/models/picks.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":24,"text":"use chrono::{DateTime, Utc};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ValidationError`\n --> src/models/waste_and_scrap.rs:5:27\n  |\n5 | use validator::{Validate, ValidationError};\n  |                           ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":156,"byte_start":139,"column_end":42,"column_start":25,"expansion":null,"file_name":"src/models/waste_and_scrap.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":42,"highlight_start":25,"text":"use validator::{Validate, ValidationError};"}]},{"byte_end":131,"byte_start":130,"column_end":17,"column_start":16,"expansion":null,"file_name":"src/models/waste_and_scrap.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":16,"text":"use validator::{Validate, ValidationError};"}]},{"byte_end":157,"byte_start":156,"column_end":43,"column_start":42,"expansion":null,"file_name":"src/models/waste_and_scrap.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":43,"highlight_start":42,"text":"use validator::{Validate, ValidationError};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ValidationError`","spans":[{"byte_end":156,"byte_start":141,"column_end":42,"column_start":27,"expansion":null,"file_name":"src/models/waste_and_scrap.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":27,"text":"use validator::{Validate, ValidationError};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `DatabaseConnection` and `Set`\n --> src/models/bom_line_item/mod.rs:4:15\n  |\n4 | use sea_orm::{DatabaseConnection, Set};\n  |               ^^^^^^^^^^^^^^^^^^  ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":178,"byte_start":138,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/bom_line_item/mod.rs","is_primary":true,"label":null,"line_end":5,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":40,"highlight_start":1,"text":"use sea_orm::{DatabaseConnection, Set};"},{"highlight_end":1,"highlight_start":1,"text":"use serde::{Deserialize, Serialize};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `DatabaseConnection` and `Set`","spans":[{"byte_end":170,"byte_start":152,"column_end":33,"column_start":15,"expansion":null,"file_name":"src/models/bom_line_item/mod.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":15,"text":"use sea_orm::{DatabaseConnection, Set};"}]},{"byte_end":175,"byte_start":172,"column_end":38,"column_start":35,"expansion":null,"file_name":"src/models/bom_line_item/mod.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":35,"text":"use sea_orm::{DatabaseConnection, Set};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `uuid::Uuid`\n --> src/models/bom_line_item/mod.rs:7:5\n  |\n7 | use uuid::Uuid;\n  |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":275,"byte_start":259,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/bom_line_item/mod.rs","is_primary":true,"label":null,"line_end":8,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use uuid::Uuid;"},{"highlight_end":1,"highlight_start":1,"text":"use async_trait::async_trait;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `uuid::Uuid`","spans":[{"byte_end":273,"byte_start":263,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/models/bom_line_item/mod.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use uuid::Uuid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/models/bom_line_item/mod.rs:8:5\n  |\n8 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":305,"byte_start":275,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/bom_line_item/mod.rs","is_primary":true,"label":null,"line_end":9,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":303,"byte_start":279,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/models/bom_line_item/mod.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `DateTime` and `Utc`\n --> src/models/manufacture_order_line_item.rs:1:14\n  |\n1 | use chrono::{DateTime, NaiveDate, Utc};\n  |              ^^^^^^^^             ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":23,"byte_start":13,"column_end":24,"column_start":14,"expansion":null,"file_name":"src/models/manufacture_order_line_item.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":24,"highlight_start":14,"text":"use chrono::{DateTime, NaiveDate, Utc};"}]},{"byte_end":37,"byte_start":32,"column_end":38,"column_start":33,"expansion":null,"file_name":"src/models/manufacture_order_line_item.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":38,"highlight_start":33,"text":"use chrono::{DateTime, NaiveDate, Utc};"}]},{"byte_end":13,"byte_start":12,"column_end":14,"column_start":13,"expansion":null,"file_name":"src/models/manufacture_order_line_item.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"use chrono::{DateTime, NaiveDate, Utc};"}]},{"byte_end":38,"byte_start":37,"column_end":39,"column_start":38,"expansion":null,"file_name":"src/models/manufacture_order_line_item.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":39,"highlight_start":38,"text":"use chrono::{DateTime, NaiveDate, Utc};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `DateTime` and `Utc`","spans":[{"byte_end":21,"byte_start":13,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/models/manufacture_order_line_item.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"use chrono::{DateTime, NaiveDate, Utc};"}]},{"byte_end":37,"byte_start":34,"column_end":38,"column_start":35,"expansion":null,"file_name":"src/models/manufacture_order_line_item.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":35,"text":"use chrono::{DateTime, NaiveDate, Utc};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ValidationError`\n --> src/models/order_line_item.rs:5:27\n  |\n5 | use validator::{Validate, ValidationError};\n  |                           ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":156,"byte_start":139,"column_end":42,"column_start":25,"expansion":null,"file_name":"src/models/order_line_item.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":42,"highlight_start":25,"text":"use validator::{Validate, ValidationError};"}]},{"byte_end":131,"byte_start":130,"column_end":17,"column_start":16,"expansion":null,"file_name":"src/models/order_line_item.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":16,"text":"use validator::{Validate, ValidationError};"}]},{"byte_end":157,"byte_start":156,"column_end":43,"column_start":42,"expansion":null,"file_name":"src/models/order_line_item.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":43,"highlight_start":42,"text":"use validator::{Validate, ValidationError};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ValidationError`","spans":[{"byte_end":156,"byte_start":141,"column_end":42,"column_start":27,"expansion":null,"file_name":"src/models/order_line_item.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":27,"text":"use validator::{Validate, ValidationError};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `DateTime` and `Utc`\n --> src/models/work_order_line_item.rs:1:14\n  |\n1 | use chrono::{DateTime, Utc};\n  |              ^^^^^^^^  ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":29,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/work_order_line_item.rs","is_primary":true,"label":null,"line_end":2,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":29,"highlight_start":1,"text":"use chrono::{DateTime, Utc};"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::entity::prelude::*;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `DateTime` and `Utc`","spans":[{"byte_end":21,"byte_start":13,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/models/work_order_line_item.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"use chrono::{DateTime, Utc};"}]},{"byte_end":26,"byte_start":23,"column_end":27,"column_start":24,"expansion":null,"file_name":"src/models/work_order_line_item.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":24,"text":"use chrono::{DateTime, Utc};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Set`\n --> src/models/cog_entries.rs:5:35\n  |\n5 | use sea_orm::{DatabaseConnection, Set};\n  |                                   ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":162,"byte_start":157,"column_end":38,"column_start":33,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":38,"highlight_start":33,"text":"use sea_orm::{DatabaseConnection, Set};"}]},{"byte_end":139,"byte_start":138,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use sea_orm::{DatabaseConnection, Set};"}]},{"byte_end":163,"byte_start":162,"column_end":39,"column_start":38,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":39,"highlight_start":38,"text":"use sea_orm::{DatabaseConnection, Set};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Set`","spans":[{"byte_end":162,"byte_start":159,"column_end":38,"column_start":35,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":35,"text":"use sea_orm::{DatabaseConnection, Set};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `uuid::Uuid`\n  --> src/models/cog_entries.rs:10:5\n   |\n10 | use uuid::Uuid;\n   |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":298,"byte_start":282,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":11,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use uuid::Uuid;"},{"highlight_end":1,"highlight_start":1,"text":"use async_trait::async_trait;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `uuid::Uuid`","spans":[{"byte_end":296,"byte_start":286,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use uuid::Uuid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n  --> src/models/cog_entries.rs:11:5\n   |\n11 | use async_trait::async_trait;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":328,"byte_start":298,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":12,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":326,"byte_start":302,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/models/cycle_count_line_item.rs:9:5\n  |\n9 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":289,"byte_start":259,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":10,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":287,"byte_start":263,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `CycleCountError as LineItemCycleCountError`\n --> src/models/cyclecounts.rs:2:5\n  |\n2 |     CycleCountError as LineItemCycleCountError, LineItemStatus,\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":92,"byte_start":48,"column_end":49,"column_start":5,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":49,"highlight_start":5,"text":"    CycleCountError as LineItemCycleCountError, LineItemStatus,"}]},{"byte_end":48,"byte_start":42,"column_end":5,"column_start":43,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":2,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":44,"highlight_start":43,"text":"use crate::models::cycle_count_line_item::{"},{"highlight_end":5,"highlight_start":1,"text":"    CycleCountError as LineItemCycleCountError, LineItemStatus,"}]},{"byte_end":109,"byte_start":106,"column_end":2,"column_start":63,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":3,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":64,"highlight_start":63,"text":"    CycleCountError as LineItemCycleCountError, LineItemStatus,"},{"highlight_end":2,"highlight_start":1,"text":"};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `CycleCountError as LineItemCycleCountError`","spans":[{"byte_end":90,"byte_start":48,"column_end":47,"column_start":5,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":5,"text":"    CycleCountError as LineItemCycleCountError, LineItemStatus,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `sea_orm::QueryOrder`\n --> src/models/cyclecounts.rs:8:5\n  |\n8 | use sea_orm::QueryOrder;\n  |     ^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":276,"byte_start":251,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":9,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":25,"highlight_start":1,"text":"use sea_orm::QueryOrder;"},{"highlight_end":1,"highlight_start":1,"text":"use serde::{Deserialize, Serialize};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `sea_orm::QueryOrder`","spans":[{"byte_end":274,"byte_start":255,"column_end":24,"column_start":5,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":5,"text":"use sea_orm::QueryOrder;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n  --> src/models/cyclecounts.rs:14:5\n   |\n14 | use async_trait::async_trait;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":439,"byte_start":409,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":15,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":437,"byte_start":413,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `uuid::Uuid`\n --> src/models/invoices.rs:6:5\n  |\n6 | use uuid::Uuid;\n  |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":171,"byte_start":155,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/invoices.rs","is_primary":true,"label":null,"line_end":7,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use uuid::Uuid;"},{"highlight_end":1,"highlight_start":1,"text":"use validator::{Validate, ValidationError};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `uuid::Uuid`","spans":[{"byte_end":169,"byte_start":159,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/models/invoices.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use uuid::Uuid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ValidationError`\n --> src/models/invoices.rs:7:27\n  |\n7 | use validator::{Validate, ValidationError};\n  |                           ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":212,"byte_start":195,"column_end":42,"column_start":25,"expansion":null,"file_name":"src/models/invoices.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":42,"highlight_start":25,"text":"use validator::{Validate, ValidationError};"}]},{"byte_end":187,"byte_start":186,"column_end":17,"column_start":16,"expansion":null,"file_name":"src/models/invoices.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":16,"text":"use validator::{Validate, ValidationError};"}]},{"byte_end":213,"byte_start":212,"column_end":43,"column_start":42,"expansion":null,"file_name":"src/models/invoices.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":43,"highlight_start":42,"text":"use validator::{Validate, ValidationError};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ValidationError`","spans":[{"byte_end":212,"byte_start":197,"column_end":42,"column_start":27,"expansion":null,"file_name":"src/models/invoices.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":27,"text":"use validator::{Validate, ValidationError};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ValidationError`\n --> src/models/reconciles.rs:7:27\n  |\n7 | use validator::{Validate, ValidationError};\n  |                           ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":212,"byte_start":195,"column_end":42,"column_start":25,"expansion":null,"file_name":"src/models/reconciles.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":42,"highlight_start":25,"text":"use validator::{Validate, ValidationError};"}]},{"byte_end":187,"byte_start":186,"column_end":17,"column_start":16,"expansion":null,"file_name":"src/models/reconciles.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":16,"text":"use validator::{Validate, ValidationError};"}]},{"byte_end":213,"byte_start":212,"column_end":43,"column_start":42,"expansion":null,"file_name":"src/models/reconciles.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":43,"highlight_start":42,"text":"use validator::{Validate, ValidationError};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ValidationError`","spans":[{"byte_end":212,"byte_start":197,"column_end":42,"column_start":27,"expansion":null,"file_name":"src/models/reconciles.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":27,"text":"use validator::{Validate, ValidationError};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ActiveValue`\n --> src/models/billofmaterials.rs:3:20\n  |\n3 | use sea_orm::{Set, ActiveValue};\n  |                    ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":92,"byte_start":79,"column_end":31,"column_start":18,"expansion":null,"file_name":"src/models/billofmaterials.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":31,"highlight_start":18,"text":"use sea_orm::{Set, ActiveValue};"}]},{"byte_end":76,"byte_start":75,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/models/billofmaterials.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use sea_orm::{Set, ActiveValue};"}]},{"byte_end":93,"byte_start":92,"column_end":32,"column_start":31,"expansion":null,"file_name":"src/models/billofmaterials.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":32,"highlight_start":31,"text":"use sea_orm::{Set, ActiveValue};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ActiveValue`","spans":[{"byte_end":92,"byte_start":81,"column_end":31,"column_start":20,"expansion":null,"file_name":"src/models/billofmaterials.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":20,"text":"use sea_orm::{Set, ActiveValue};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/models/billofmaterials.rs:7:5\n  |\n7 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":220,"byte_start":190,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/billofmaterials.rs","is_primary":true,"label":null,"line_end":8,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use uuid::Uuid;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":218,"byte_start":194,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/models/billofmaterials.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `uuid::Uuid`\n --> src/models/billofmaterials.rs:8:5\n  |\n8 | use uuid::Uuid;\n  |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":236,"byte_start":220,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/billofmaterials.rs","is_primary":true,"label":null,"line_end":9,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use uuid::Uuid;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `uuid::Uuid`","spans":[{"byte_end":234,"byte_start":224,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/models/billofmaterials.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use uuid::Uuid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `ActiveValue`, `Condition`, `IntoActiveModel`, `Set`, and `TransactionTrait`\n --> src/models/machine.rs:4:26\n  |\n4 |     ActiveModelBehavior, ActiveValue, ColumnTrait, Condition, DatabaseConnection, EntityTrait, IntoActiveModel,\n  |                          ^^^^^^^^^^^               ^^^^^^^^^                                   ^^^^^^^^^^^^^^^\n5 |     QueryFilter, QuerySelect, Set, TransactionTrait, QueryOrder,\n  |                               ^^^  ^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":134,"byte_start":121,"column_end":37,"column_start":24,"expansion":null,"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":37,"highlight_start":24,"text":"    ActiveModelBehavior, ActiveValue, ColumnTrait, Condition, DatabaseConnection, EntityTrait, IntoActiveModel,"}]},{"byte_end":158,"byte_start":147,"column_end":61,"column_start":50,"expansion":null,"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":61,"highlight_start":50,"text":"    ActiveModelBehavior, ActiveValue, ColumnTrait, Condition, DatabaseConnection, EntityTrait, IntoActiveModel,"}]},{"byte_end":208,"byte_start":191,"column_end":111,"column_start":94,"expansion":null,"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":111,"highlight_start":94,"text":"    ActiveModelBehavior, ActiveValue, ColumnTrait, Condition, DatabaseConnection, EntityTrait, IntoActiveModel,"}]},{"byte_end":261,"byte_start":238,"column_end":52,"column_start":29,"expansion":null,"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":52,"highlight_start":29,"text":"    QueryFilter, QuerySelect, Set, TransactionTrait, QueryOrder,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `ActiveValue`, `Condition`, `IntoActiveModel`, `Set`, and `TransactionTrait`","spans":[{"byte_end":134,"byte_start":123,"column_end":37,"column_start":26,"expansion":null,"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":26,"text":"    ActiveModelBehavior, ActiveValue, ColumnTrait, Condition, DatabaseConnection, EntityTrait, IntoActiveModel,"}]},{"byte_end":158,"byte_start":149,"column_end":61,"column_start":52,"expansion":null,"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":52,"text":"    ActiveModelBehavior, ActiveValue, ColumnTrait, Condition, DatabaseConnection, EntityTrait, IntoActiveModel,"}]},{"byte_end":208,"byte_start":193,"column_end":111,"column_start":96,"expansion":null,"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":111,"highlight_start":96,"text":"    ActiveModelBehavior, ActiveValue, ColumnTrait, Condition, DatabaseConnection, EntityTrait, IntoActiveModel,"}]},{"byte_end":243,"byte_start":240,"column_end":34,"column_start":31,"expansion":null,"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":31,"text":"    QueryFilter, QuerySelect, Set, TransactionTrait, QueryOrder,"}]},{"byte_end":261,"byte_start":245,"column_end":52,"column_start":36,"expansion":null,"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":36,"text":"    QueryFilter, QuerySelect, Set, TransactionTrait, QueryOrder,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `uuid::Uuid`\n  --> src/models/machine.rs:12:5\n   |\n12 | use uuid::Uuid;\n   |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":434,"byte_start":418,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":13,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use uuid::Uuid;"},{"highlight_end":1,"highlight_start":1,"text":"use async_trait::async_trait;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `uuid::Uuid`","spans":[{"byte_end":432,"byte_start":422,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use uuid::Uuid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n  --> src/models/machine.rs:13:5\n   |\n13 | use async_trait::async_trait;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":464,"byte_start":434,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":14,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":462,"byte_start":438,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `ActiveValue` and `Set`\n --> src/models/maintenance_record/mod.rs:5:36\n  |\n5 | use sea_orm::{ActiveModelBehavior, ActiveValue, Set};\n  |                                    ^^^^^^^^^^^  ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":211,"byte_start":193,"column_end":52,"column_start":34,"expansion":null,"file_name":"src/models/maintenance_record/mod.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":52,"highlight_start":34,"text":"use sea_orm::{ActiveModelBehavior, ActiveValue, Set};"}]},{"byte_end":174,"byte_start":173,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/models/maintenance_record/mod.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use sea_orm::{ActiveModelBehavior, ActiveValue, Set};"}]},{"byte_end":212,"byte_start":211,"column_end":53,"column_start":52,"expansion":null,"file_name":"src/models/maintenance_record/mod.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":53,"highlight_start":52,"text":"use sea_orm::{ActiveModelBehavior, ActiveValue, Set};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `ActiveValue` and `Set`","spans":[{"byte_end":206,"byte_start":195,"column_end":47,"column_start":36,"expansion":null,"file_name":"src/models/maintenance_record/mod.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":36,"text":"use sea_orm::{ActiveModelBehavior, ActiveValue, Set};"}]},{"byte_end":211,"byte_start":208,"column_end":52,"column_start":49,"expansion":null,"file_name":"src/models/maintenance_record/mod.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":49,"text":"use sea_orm::{ActiveModelBehavior, ActiveValue, Set};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `uuid::Uuid`\n --> src/models/maintenance_record/mod.rs:9:5\n  |\n9 | use uuid::Uuid;\n  |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":336,"byte_start":320,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/maintenance_record/mod.rs","is_primary":true,"label":null,"line_end":10,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use uuid::Uuid;"},{"highlight_end":1,"highlight_start":1,"text":"use async_trait::async_trait;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `uuid::Uuid`","spans":[{"byte_end":334,"byte_start":324,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/models/maintenance_record/mod.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use uuid::Uuid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n  --> src/models/maintenance_record/mod.rs:10:5\n   |\n10 | use async_trait::async_trait;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":366,"byte_start":336,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/maintenance_record/mod.rs","is_primary":true,"label":null,"line_end":11,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":364,"byte_start":340,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/models/maintenance_record/mod.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `sea_orm::Set`\n --> src/models/manufacturing_cost_entity.rs:4:5\n  |\n4 | use sea_orm::Set;\n  |     ^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":107,"byte_start":89,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/manufacturing_cost_entity.rs","is_primary":true,"label":null,"line_end":5,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":18,"highlight_start":1,"text":"use sea_orm::Set;"},{"highlight_end":1,"highlight_start":1,"text":"use serde::{Deserialize, Serialize};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `sea_orm::Set`","spans":[{"byte_end":105,"byte_start":93,"column_end":17,"column_start":5,"expansion":null,"file_name":"src/models/manufacturing_cost_entity.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":5,"text":"use sea_orm::Set;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `uuid::Uuid`\n --> src/models/manufacturing_cost_entity.rs:7:5\n  |\n7 | use uuid::Uuid;\n  |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":185,"byte_start":169,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/manufacturing_cost_entity.rs","is_primary":true,"label":null,"line_end":8,"line_start":7,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":16,"highlight_start":1,"text":"use uuid::Uuid;"},{"highlight_end":1,"highlight_start":1,"text":"use async_trait::async_trait;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `uuid::Uuid`","spans":[{"byte_end":183,"byte_start":173,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/models/manufacturing_cost_entity.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"use uuid::Uuid;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n --> src/models/manufacturing_cost_entity.rs:8:5\n  |\n8 | use async_trait::async_trait;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":215,"byte_start":185,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/models/manufacturing_cost_entity.rs","is_primary":true,"label":null,"line_end":9,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":213,"byte_start":189,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/models/manufacturing_cost_entity.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `ApiKeyValue`, `ApiKey`, `HttpAuthScheme`, `HttpBuilder`, and `SecurityScheme`\n --> src/openapi/mod.rs:2:33\n  |\n2 | use utoipa::openapi::security::{ApiKey, ApiKeyValue, HttpAuthScheme, HttpBuilder, SecurityScheme};\n  |                                 ^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":132,"byte_start":33,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":null,"line_end":3,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":99,"highlight_start":1,"text":"use utoipa::openapi::security::{ApiKey, ApiKeyValue, HttpAuthScheme, HttpBuilder, SecurityScheme};"},{"highlight_end":1,"highlight_start":1,"text":"use utoipa_swagger_ui::SwaggerUi;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `ApiKeyValue`, `ApiKey`, `HttpAuthScheme`, `HttpBuilder`, and `SecurityScheme`","spans":[{"byte_end":71,"byte_start":65,"column_end":39,"column_start":33,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":33,"text":"use utoipa::openapi::security::{ApiKey, ApiKeyValue, HttpAuthScheme, HttpBuilder, SecurityScheme};"}]},{"byte_end":84,"byte_start":73,"column_end":52,"column_start":41,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":41,"text":"use utoipa::openapi::security::{ApiKey, ApiKeyValue, HttpAuthScheme, HttpBuilder, SecurityScheme};"}]},{"byte_end":100,"byte_start":86,"column_end":68,"column_start":54,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":68,"highlight_start":54,"text":"use utoipa::openapi::security::{ApiKey, ApiKeyValue, HttpAuthScheme, HttpBuilder, SecurityScheme};"}]},{"byte_end":113,"byte_start":102,"column_end":81,"column_start":70,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":81,"highlight_start":70,"text":"use utoipa::openapi::security::{ApiKey, ApiKeyValue, HttpAuthScheme, HttpBuilder, SecurityScheme};"}]},{"byte_end":129,"byte_start":115,"column_end":97,"column_start":83,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":97,"highlight_start":83,"text":"use utoipa::openapi::security::{ApiKey, ApiKeyValue, HttpAuthScheme, HttpBuilder, SecurityScheme};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `HeaderMap`\n  --> src/rate_limiter/mod.rs:43:34\n   |\n43 |     http::{Response, StatusCode, HeaderMap},\n   |                                  ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":1312,"byte_start":1301,"column_end":43,"column_start":32,"expansion":null,"file_name":"src/rate_limiter/mod.rs","is_primary":true,"label":null,"line_end":43,"line_start":43,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":43,"highlight_start":32,"text":"    http::{Response, StatusCode, HeaderMap},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `HeaderMap`","spans":[{"byte_end":1312,"byte_start":1303,"column_end":43,"column_start":34,"expansion":null,"file_name":"src/rate_limiter/mod.rs","is_primary":true,"label":null,"line_end":43,"line_start":43,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":34,"text":"    http::{Response, StatusCode, HeaderMap},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Deserialize`\n  --> src/rate_limiter/mod.rs:49:13\n   |\n49 | use serde::{Deserialize, Serialize};\n   |             ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":1446,"byte_start":1433,"column_end":26,"column_start":13,"expansion":null,"file_name":"src/rate_limiter/mod.rs","is_primary":true,"label":null,"line_end":49,"line_start":49,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":26,"highlight_start":13,"text":"use serde::{Deserialize, Serialize};"}]},{"byte_end":1433,"byte_start":1432,"column_end":13,"column_start":12,"expansion":null,"file_name":"src/rate_limiter/mod.rs","is_primary":true,"label":null,"line_end":49,"line_start":49,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":13,"highlight_start":12,"text":"use serde::{Deserialize, Serialize};"}]},{"byte_end":1456,"byte_start":1455,"column_end":36,"column_start":35,"expansion":null,"file_name":"src/rate_limiter/mod.rs","is_primary":true,"label":null,"line_end":49,"line_start":49,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":36,"highlight_start":35,"text":"use serde::{Deserialize, Serialize};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Deserialize`","spans":[{"byte_end":1444,"byte_start":1433,"column_end":24,"column_start":13,"expansion":null,"file_name":"src/rate_limiter/mod.rs","is_primary":true,"label":null,"line_end":49,"line_start":49,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":13,"text":"use serde::{Deserialize, Serialize};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `info`\n  --> src/rate_limiter/mod.rs:54:22\n   |\n54 | use tracing::{debug, info, warn};\n   |                      ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":1583,"byte_start":1577,"column_end":26,"column_start":20,"expansion":null,"file_name":"src/rate_limiter/mod.rs","is_primary":true,"label":null,"line_end":54,"line_start":54,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":26,"highlight_start":20,"text":"use tracing::{debug, info, warn};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `info`","spans":[{"byte_end":1583,"byte_start":1579,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/rate_limiter/mod.rs","is_primary":true,"label":null,"line_end":54,"line_start":54,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"use tracing::{debug, info, warn};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Event`\n  --> src/services/returns.rs:14:14\n   |\n14 |     events::{Event, EventSender},\n   |              ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":631,"byte_start":624,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":21,"highlight_start":14,"text":"    events::{Event, EventSender},"}]},{"byte_end":624,"byte_start":623,"column_end":14,"column_start":13,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"    events::{Event, EventSender},"}]},{"byte_end":643,"byte_start":642,"column_end":33,"column_start":32,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":32,"text":"    events::{Event, EventSender},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Event`","spans":[{"byte_end":629,"byte_start":624,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"    events::{Event, EventSender},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `ActiveModelTrait`, `ColumnTrait`, `DatabaseConnection`, `QueryFilter`, and `Set`\n  --> src/services/returns.rs:23:15\n   |\n23 | use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set, QueryOrder};\n   |               ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^               ^^^^^^^^^^^  ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":946,"byte_start":895,"column_end":66,"column_start":15,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":66,"highlight_start":15,"text":"use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set, QueryOrder};"}]},{"byte_end":975,"byte_start":957,"column_end":95,"column_start":77,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":95,"highlight_start":77,"text":"use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set, QueryOrder};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `ActiveModelTrait`, `ColumnTrait`, `DatabaseConnection`, `QueryFilter`, and `Set`","spans":[{"byte_end":911,"byte_start":895,"column_end":31,"column_start":15,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":15,"text":"use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set, QueryOrder};"}]},{"byte_end":924,"byte_start":913,"column_end":44,"column_start":33,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":33,"text":"use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set, QueryOrder};"}]},{"byte_end":944,"byte_start":926,"column_end":64,"column_start":46,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":64,"highlight_start":46,"text":"use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set, QueryOrder};"}]},{"byte_end":970,"byte_start":959,"column_end":90,"column_start":79,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":90,"highlight_start":79,"text":"use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set, QueryOrder};"}]},{"byte_end":975,"byte_start":972,"column_end":95,"column_start":92,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":95,"highlight_start":92,"text":"use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set, QueryOrder};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `info`\n  --> src/services/returns.rs:26:22\n   |\n26 | use tracing::{error, info, instrument};\n   |                      ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":1053,"byte_start":1047,"column_end":26,"column_start":20,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":26,"line_start":26,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":26,"highlight_start":20,"text":"use tracing::{error, info, instrument};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `info`","spans":[{"byte_end":1053,"byte_start":1049,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"use tracing::{error, info, instrument};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `sea_orm::Paginator`\n   --> src/services/returns.rs:174:13\n    |\n174 |         use sea_orm::Paginator;\n    |             ^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":5428,"byte_start":5405,"column_end":32,"column_start":9,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":174,"line_start":174,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":32,"highlight_start":9,"text":"        use sea_orm::Paginator;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `sea_orm::Paginator`","spans":[{"byte_end":5427,"byte_start":5409,"column_end":31,"column_start":13,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":174,"line_start":174,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":13,"text":"        use sea_orm::Paginator;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Event`\n  --> src/services/shipments.rs:15:14\n   |\n15 |     events::{Event, EventSender},\n   |              ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":618,"byte_start":611,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/services/shipments.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":21,"highlight_start":14,"text":"    events::{Event, EventSender},"}]},{"byte_end":611,"byte_start":610,"column_end":14,"column_start":13,"expansion":null,"file_name":"src/services/shipments.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"    events::{Event, EventSender},"}]},{"byte_end":630,"byte_start":629,"column_end":33,"column_start":32,"expansion":null,"file_name":"src/services/shipments.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":32,"text":"    events::{Event, EventSender},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Event`","spans":[{"byte_end":616,"byte_start":611,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/services/shipments.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"    events::{Event, EventSender},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `DatabaseConnection`\n  --> src/services/shipments.rs:20:46\n   |\n20 | use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set, QueryOrder};\n   |                                              ^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":774,"byte_start":754,"column_end":64,"column_start":44,"expansion":null,"file_name":"src/services/shipments.rs","is_primary":true,"label":null,"line_end":20,"line_start":20,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":64,"highlight_start":44,"text":"use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set, QueryOrder};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `DatabaseConnection`","spans":[{"byte_end":774,"byte_start":756,"column_end":64,"column_start":46,"expansion":null,"file_name":"src/services/shipments.rs","is_primary":true,"label":null,"line_end":20,"line_start":20,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":64,"highlight_start":46,"text":"use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set, QueryOrder};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `error` and `info`\n  --> src/services/shipments.rs:23:15\n   |\n23 | use tracing::{error, info, instrument};\n   |               ^^^^^  ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":885,"byte_start":872,"column_end":28,"column_start":15,"expansion":null,"file_name":"src/services/shipments.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":28,"highlight_start":15,"text":"use tracing::{error, info, instrument};"}]},{"byte_end":872,"byte_start":871,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/services/shipments.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use tracing::{error, info, instrument};"}]},{"byte_end":896,"byte_start":895,"column_end":39,"column_start":38,"expansion":null,"file_name":"src/services/shipments.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":39,"highlight_start":38,"text":"use tracing::{error, info, instrument};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `error` and `info`","spans":[{"byte_end":877,"byte_start":872,"column_end":20,"column_start":15,"expansion":null,"file_name":"src/services/shipments.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":15,"text":"use tracing::{error, info, instrument};"}]},{"byte_end":883,"byte_start":879,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/services/shipments.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"use tracing::{error, info, instrument};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `sea_orm::Paginator`\n   --> src/services/shipments.rs:198:13\n    |\n198 |         use sea_orm::Paginator;\n    |             ^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":6106,"byte_start":6083,"column_end":32,"column_start":9,"expansion":null,"file_name":"src/services/shipments.rs","is_primary":true,"label":null,"line_end":198,"line_start":198,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":32,"highlight_start":9,"text":"        use sea_orm::Paginator;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `sea_orm::Paginator`","spans":[{"byte_end":6105,"byte_start":6087,"column_end":31,"column_start":13,"expansion":null,"file_name":"src/services/shipments.rs","is_primary":true,"label":null,"line_end":198,"line_start":198,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":13,"text":"        use sea_orm::Paginator;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Event`\n  --> src/services/warranties.rs:13:14\n   |\n13 |     events::{Event, EventSender},\n   |              ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":463,"byte_start":456,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":21,"highlight_start":14,"text":"    events::{Event, EventSender},"}]},{"byte_end":456,"byte_start":455,"column_end":14,"column_start":13,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"    events::{Event, EventSender},"}]},{"byte_end":475,"byte_start":474,"column_end":33,"column_start":32,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":32,"text":"    events::{Event, EventSender},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Event`","spans":[{"byte_end":461,"byte_start":456,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"    events::{Event, EventSender},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `DateTime`\n  --> src/services/warranties.rs:17:14\n   |\n17 | use chrono::{DateTime, Utc};\n   |              ^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":545,"byte_start":535,"column_end":24,"column_start":14,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":24,"highlight_start":14,"text":"use chrono::{DateTime, Utc};"}]},{"byte_end":535,"byte_start":534,"column_end":14,"column_start":13,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"use chrono::{DateTime, Utc};"}]},{"byte_end":549,"byte_start":548,"column_end":28,"column_start":27,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":28,"highlight_start":27,"text":"use chrono::{DateTime, Utc};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `DateTime`","spans":[{"byte_end":543,"byte_start":535,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"use chrono::{DateTime, Utc};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `DbErr` and `Set`\n  --> src/services/warranties.rs:20:53\n   |\n20 |     ActiveModelTrait, ColumnTrait, ConnectionTrait, DbErr, EntityTrait, PaginatorTrait,\n   |                                                     ^^^^^\n21 |     QueryFilter, QueryOrder, QuerySelect, Set,\n   |                                           ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":657,"byte_start":650,"column_end":58,"column_start":51,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":20,"line_start":20,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":58,"highlight_start":51,"text":"    ActiveModelTrait, ColumnTrait, ConnectionTrait, DbErr, EntityTrait, PaginatorTrait,"}]},{"byte_end":733,"byte_start":728,"column_end":46,"column_start":41,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":46,"highlight_start":41,"text":"    QueryFilter, QueryOrder, QuerySelect, Set,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `DbErr` and `Set`","spans":[{"byte_end":657,"byte_start":652,"column_end":58,"column_start":53,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":20,"line_start":20,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":53,"text":"    ActiveModelTrait, ColumnTrait, ConnectionTrait, DbErr, EntityTrait, PaginatorTrait,"}]},{"byte_end":733,"byte_start":730,"column_end":46,"column_start":43,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":43,"text":"    QueryFilter, QueryOrder, QuerySelect, Set,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `error` and `info`\n  --> src/services/warranties.rs:25:15\n   |\n25 | use tracing::{error, info, instrument};\n   |               ^^^^^  ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":803,"byte_start":790,"column_end":28,"column_start":15,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":25,"line_start":25,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":28,"highlight_start":15,"text":"use tracing::{error, info, instrument};"}]},{"byte_end":790,"byte_start":789,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":25,"line_start":25,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use tracing::{error, info, instrument};"}]},{"byte_end":814,"byte_start":813,"column_end":39,"column_start":38,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":25,"line_start":25,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":39,"highlight_start":38,"text":"use tracing::{error, info, instrument};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `error` and `info`","spans":[{"byte_end":795,"byte_start":790,"column_end":20,"column_start":15,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":25,"line_start":25,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":15,"text":"use tracing::{error, info, instrument};"}]},{"byte_end":801,"byte_start":797,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":25,"line_start":25,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"use tracing::{error, info, instrument};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Event` and `auth::Claims`\n  --> src/services/work_orders.rs:17:14\n   |\n17 |     events::{Event, EventSender},\n   |              ^^^^^\n18 |     models::work_order,\n19 |     auth::Claims,\n   |     ^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":720,"byte_start":713,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":21,"highlight_start":14,"text":"    events::{Event, EventSender},"}]},{"byte_end":713,"byte_start":712,"column_end":14,"column_start":13,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"    events::{Event, EventSender},"}]},{"byte_end":732,"byte_start":731,"column_end":33,"column_start":32,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":32,"text":"    events::{Event, EventSender},"}]},{"byte_end":774,"byte_start":756,"column_end":17,"column_start":23,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":19,"line_start":18,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":24,"highlight_start":23,"text":"    models::work_order,"},{"highlight_end":17,"highlight_start":1,"text":"    auth::Claims,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Event` and `auth::Claims`","spans":[{"byte_end":718,"byte_start":713,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"    events::{Event, EventSender},"}]},{"byte_end":774,"byte_start":762,"column_end":17,"column_start":5,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":19,"line_start":19,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":5,"text":"    auth::Claims,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `ActiveModelTrait`, `DbErr`, and `Set`\n  --> src/services/work_orders.rs:25:5\n   |\n25 |     ActiveModelTrait, ColumnTrait, ConnectionTrait, DbErr, EntityTrait, PaginatorTrait,\n   |     ^^^^^^^^^^^^^^^^                                ^^^^^\n26 |     QueryFilter, QueryOrder, QuerySelect, Set,\n   |                                           ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":914,"byte_start":896,"column_end":23,"column_start":5,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":25,"line_start":25,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":23,"highlight_start":5,"text":"    ActiveModelTrait, ColumnTrait, ConnectionTrait, DbErr, EntityTrait, PaginatorTrait,"}]},{"byte_end":949,"byte_start":942,"column_end":58,"column_start":51,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":25,"line_start":25,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":58,"highlight_start":51,"text":"    ActiveModelTrait, ColumnTrait, ConnectionTrait, DbErr, EntityTrait, PaginatorTrait,"}]},{"byte_end":1025,"byte_start":1020,"column_end":46,"column_start":41,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":26,"line_start":26,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":46,"highlight_start":41,"text":"    QueryFilter, QueryOrder, QuerySelect, Set,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `ActiveModelTrait`, `DbErr`, and `Set`","spans":[{"byte_end":912,"byte_start":896,"column_end":21,"column_start":5,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":25,"line_start":25,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":5,"text":"    ActiveModelTrait, ColumnTrait, ConnectionTrait, DbErr, EntityTrait, PaginatorTrait,"}]},{"byte_end":949,"byte_start":944,"column_end":58,"column_start":53,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":25,"line_start":25,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":53,"text":"    ActiveModelTrait, ColumnTrait, ConnectionTrait, DbErr, EntityTrait, PaginatorTrait,"}]},{"byte_end":1025,"byte_start":1022,"column_end":46,"column_start":43,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":43,"text":"    QueryFilter, QueryOrder, QuerySelect, Set,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `error` and `info`\n  --> src/services/work_orders.rs:30:15\n   |\n30 | use tracing::{error, info, instrument};\n   |               ^^^^^  ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":1095,"byte_start":1082,"column_end":28,"column_start":15,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":30,"line_start":30,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":28,"highlight_start":15,"text":"use tracing::{error, info, instrument};"}]},{"byte_end":1082,"byte_start":1081,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":30,"line_start":30,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use tracing::{error, info, instrument};"}]},{"byte_end":1106,"byte_start":1105,"column_end":39,"column_start":38,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":30,"line_start":30,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":39,"highlight_start":38,"text":"use tracing::{error, info, instrument};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `error` and `info`","spans":[{"byte_end":1087,"byte_start":1082,"column_end":20,"column_start":15,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":15,"text":"use tracing::{error, info, instrument};"}]},{"byte_end":1093,"byte_start":1089,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"use tracing::{error, info, instrument};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Entity as InventoryTransaction`, `Entity as ItemMaster`, and `self`\n --> src/services/inventory_adjustment_service.rs:5:39\n  |\n5 |         inventory_transaction::{self, Entity as InventoryTransaction, TransactionType},\n  |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n6 |         item_master::{self, Entity as ItemMaster},\n  |                       ^^^^  ^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":176,"byte_start":144,"column_end":69,"column_start":37,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":69,"highlight_start":37,"text":"        inventory_transaction::{self, Entity as InventoryTransaction, TransactionType},"}]},{"byte_end":245,"byte_start":194,"column_end":50,"column_start":87,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":6,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":88,"highlight_start":87,"text":"        inventory_transaction::{self, Entity as InventoryTransaction, TransactionType},"},{"highlight_end":50,"highlight_start":1,"text":"        item_master::{self, Entity as ItemMaster},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Entity as InventoryTransaction`, `Entity as ItemMaster`, and `self`","spans":[{"byte_end":176,"byte_start":146,"column_end":69,"column_start":39,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":69,"highlight_start":39,"text":"        inventory_transaction::{self, Entity as InventoryTransaction, TransactionType},"}]},{"byte_end":222,"byte_start":218,"column_end":27,"column_start":23,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":23,"text":"        item_master::{self, Entity as ItemMaster},"}]},{"byte_end":244,"byte_start":224,"column_end":49,"column_start":29,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":29,"text":"        item_master::{self, Entity as ItemMaster},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `error` and `warn`\n  --> src/services/inventory_adjustment_service.rs:17:21\n   |\n17 | use tracing::{info, error, warn};\n   |                     ^^^^^  ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":580,"byte_start":567,"column_end":32,"column_start":19,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":32,"highlight_start":19,"text":"use tracing::{info, error, warn};"}]},{"byte_end":563,"byte_start":562,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use tracing::{info, error, warn};"}]},{"byte_end":581,"byte_start":580,"column_end":33,"column_start":32,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":32,"text":"use tracing::{info, error, warn};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `error` and `warn`","spans":[{"byte_end":574,"byte_start":569,"column_end":26,"column_start":21,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":21,"text":"use tracing::{info, error, warn};"}]},{"byte_end":580,"byte_start":576,"column_end":32,"column_start":28,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":28,"text":"use tracing::{info, error, warn};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `DbErr`\n --> src/services/inventory_sync.rs:6:31\n  |\n6 |     QueryFilter, ColumnTrait, DbErr,\n  |                               ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":205,"byte_start":198,"column_end":36,"column_start":29,"expansion":null,"file_name":"src/services/inventory_sync.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":36,"highlight_start":29,"text":"    QueryFilter, ColumnTrait, DbErr,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `DbErr`","spans":[{"byte_end":205,"byte_start":200,"column_end":36,"column_start":31,"expansion":null,"file_name":"src/services/inventory_sync.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":31,"text":"    QueryFilter, ColumnTrait, DbErr,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `warn`\n --> src/services/inventory_sync.rs:8:40\n  |\n8 | use tracing::{error, info, instrument, warn};\n  |                                        ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":253,"byte_start":247,"column_end":44,"column_start":38,"expansion":null,"file_name":"src/services/inventory_sync.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":44,"highlight_start":38,"text":"use tracing::{error, info, instrument, warn};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `warn`","spans":[{"byte_end":253,"byte_start":249,"column_end":44,"column_start":40,"expansion":null,"file_name":"src/services/inventory_sync.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":40,"text":"use tracing::{error, info, instrument, warn};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Entity as InventoryTransactionEntity`, `Entity as ItemMasterEntity`, and `self`\n  --> src/services/inventory_sync.rs:13:23\n   |\n13 |         item_master::{self, Entity as ItemMasterEntity},\n   |                       ^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^\n14 |         inventory_transaction::{self, Entity as InventoryTransactionEntity},\n   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":410,"byte_start":353,"column_end":56,"column_start":68,"expansion":null,"file_name":"src/services/inventory_sync.rs","is_primary":true,"label":null,"line_end":13,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":69,"highlight_start":68,"text":"        inventory_balance::{self, Entity as InventoryBalanceEntity},"},{"highlight_end":56,"highlight_start":1,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]},{"byte_end":486,"byte_start":448,"column_end":75,"column_start":37,"expansion":null,"file_name":"src/services/inventory_sync.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":75,"highlight_start":37,"text":"        inventory_transaction::{self, Entity as InventoryTransactionEntity},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Entity as InventoryTransactionEntity`, `Entity as ItemMasterEntity`, and `self`","spans":[{"byte_end":381,"byte_start":377,"column_end":27,"column_start":23,"expansion":null,"file_name":"src/services/inventory_sync.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":23,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]},{"byte_end":409,"byte_start":383,"column_end":55,"column_start":29,"expansion":null,"file_name":"src/services/inventory_sync.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":29,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]},{"byte_end":486,"byte_start":450,"column_end":75,"column_start":39,"expansion":null,"file_name":"src/services/inventory_sync.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":75,"highlight_start":39,"text":"        inventory_transaction::{self, Entity as InventoryTransactionEntity},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `DbErr` and `ModelTrait`\n --> src/services/bom.rs:6:31\n  |\n6 |     QueryFilter, ColumnTrait, DbErr, ModelTrait,\n  |                               ^^^^^  ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":217,"byte_start":198,"column_end":48,"column_start":29,"expansion":null,"file_name":"src/services/bom.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":48,"highlight_start":29,"text":"    QueryFilter, ColumnTrait, DbErr, ModelTrait,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `DbErr` and `ModelTrait`","spans":[{"byte_end":205,"byte_start":200,"column_end":36,"column_start":31,"expansion":null,"file_name":"src/services/bom.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":31,"text":"    QueryFilter, ColumnTrait, DbErr, ModelTrait,"}]},{"byte_end":217,"byte_start":207,"column_end":48,"column_start":38,"expansion":null,"file_name":"src/services/bom.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":38,"text":"    QueryFilter, ColumnTrait, DbErr, ModelTrait,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `warn`\n --> src/services/bom.rs:8:40\n  |\n8 | use tracing::{error, info, instrument, warn};\n  |                                        ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":265,"byte_start":259,"column_end":44,"column_start":38,"expansion":null,"file_name":"src/services/bom.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":44,"highlight_start":38,"text":"use tracing::{error, info, instrument, warn};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `warn`","spans":[{"byte_end":265,"byte_start":261,"column_end":44,"column_start":40,"expansion":null,"file_name":"src/services/bom.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":40,"text":"use tracing::{error, info, instrument, warn};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `self`\n  --> src/services/bom.rs:14:23\n   |\n14 |         item_master::{self, Entity as ItemMasterEntity},\n   |                       ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":432,"byte_start":426,"column_end":29,"column_start":23,"expansion":null,"file_name":"src/services/bom.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":29,"highlight_start":23,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]},{"byte_end":426,"byte_start":425,"column_end":23,"column_start":22,"expansion":null,"file_name":"src/services/bom.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":23,"highlight_start":22,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]},{"byte_end":459,"byte_start":458,"column_end":56,"column_start":55,"expansion":null,"file_name":"src/services/bom.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":56,"highlight_start":55,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `self`","spans":[{"byte_end":430,"byte_start":426,"column_end":27,"column_start":23,"expansion":null,"file_name":"src/services/bom.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":23,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `self`\n  --> src/services/manufacturing.rs:14:23\n   |\n14 |         item_master::{self, Entity as ItemMasterEntity},\n   |                       ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":445,"byte_start":439,"column_end":29,"column_start":23,"expansion":null,"file_name":"src/services/manufacturing.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":29,"highlight_start":23,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]},{"byte_end":439,"byte_start":438,"column_end":23,"column_start":22,"expansion":null,"file_name":"src/services/manufacturing.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":23,"highlight_start":22,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]},{"byte_end":472,"byte_start":471,"column_end":56,"column_start":55,"expansion":null,"file_name":"src/services/manufacturing.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":56,"highlight_start":55,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `self`","spans":[{"byte_end":443,"byte_start":439,"column_end":27,"column_start":23,"expansion":null,"file_name":"src/services/manufacturing.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":23,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ModelTrait`\n --> src/services/purchase_receipt.rs:6:31\n  |\n6 |     QueryFilter, ColumnTrait, ModelTrait,\n  |                               ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":210,"byte_start":198,"column_end":41,"column_start":29,"expansion":null,"file_name":"src/services/purchase_receipt.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":41,"highlight_start":29,"text":"    QueryFilter, ColumnTrait, ModelTrait,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ModelTrait`","spans":[{"byte_end":210,"byte_start":200,"column_end":41,"column_start":31,"expansion":null,"file_name":"src/services/purchase_receipt.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":31,"text":"    QueryFilter, ColumnTrait, ModelTrait,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Entity as ItemMasterEntity`, `Entity as POHeaderEntity`, `self`, and `self`\n  --> src/services/purchase_receipt.rs:14:34\n   |\n14 |         purchase_order_headers::{self, Entity as POHeaderEntity},\n   |                                  ^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^\n15 |         purchase_order_lines::{self, Entity as POLineEntity},\n16 |         item_master::{self, Entity as ItemMasterEntity},\n   |                       ^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":479,"byte_start":413,"column_end":65,"column_start":62,"expansion":null,"file_name":"src/services/purchase_receipt.rs","is_primary":true,"label":null,"line_end":14,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":63,"highlight_start":62,"text":"        po_receipt_lines::{self, Entity as ReceiptLineEntity},"},{"highlight_end":65,"highlight_start":1,"text":"        purchase_order_headers::{self, Entity as POHeaderEntity},"}]},{"byte_end":598,"byte_start":541,"column_end":56,"column_start":61,"expansion":null,"file_name":"src/services/purchase_receipt.rs","is_primary":true,"label":null,"line_end":16,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":62,"highlight_start":61,"text":"        purchase_order_lines::{self, Entity as POLineEntity},"},{"highlight_end":56,"highlight_start":1,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Entity as ItemMasterEntity`, `Entity as POHeaderEntity`, `self`, and `self`","spans":[{"byte_end":452,"byte_start":448,"column_end":38,"column_start":34,"expansion":null,"file_name":"src/services/purchase_receipt.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":34,"text":"        purchase_order_headers::{self, Entity as POHeaderEntity},"}]},{"byte_end":478,"byte_start":454,"column_end":64,"column_start":40,"expansion":null,"file_name":"src/services/purchase_receipt.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":64,"highlight_start":40,"text":"        purchase_order_headers::{self, Entity as POHeaderEntity},"}]},{"byte_end":569,"byte_start":565,"column_end":27,"column_start":23,"expansion":null,"file_name":"src/services/purchase_receipt.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":23,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]},{"byte_end":597,"byte_start":571,"column_end":55,"column_start":29,"expansion":null,"file_name":"src/services/purchase_receipt.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":29,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ModelTrait`\n --> src/services/sales_fulfillment.rs:6:31\n  |\n6 |     QueryFilter, ColumnTrait, ModelTrait,\n  |                               ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":223,"byte_start":211,"column_end":41,"column_start":29,"expansion":null,"file_name":"src/services/sales_fulfillment.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":41,"highlight_start":29,"text":"    QueryFilter, ColumnTrait, ModelTrait,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ModelTrait`","spans":[{"byte_end":223,"byte_start":213,"column_end":41,"column_start":31,"expansion":null,"file_name":"src/services/sales_fulfillment.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":31,"text":"    QueryFilter, ColumnTrait, ModelTrait,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `warn`\n --> src/services/sales_fulfillment.rs:8:40\n  |\n8 | use tracing::{error, info, instrument, warn};\n  |                                        ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":271,"byte_start":265,"column_end":44,"column_start":38,"expansion":null,"file_name":"src/services/sales_fulfillment.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":44,"highlight_start":38,"text":"use tracing::{error, info, instrument, warn};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `warn`","spans":[{"byte_end":271,"byte_start":267,"column_end":44,"column_start":40,"expansion":null,"file_name":"src/services/sales_fulfillment.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":40,"text":"use tracing::{error, info, instrument, warn};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Entity as InventoryBalanceEntity`, `Entity as ItemMasterEntity`, `self`, and `self`\n  --> src/services/sales_fulfillment.rs:15:29\n   |\n15 |         inventory_balance::{self, Entity as InventoryBalanceEntity},\n   |                             ^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n16 |         item_master::{self, Entity as ItemMasterEntity},\n   |                       ^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":634,"byte_start":508,"column_end":56,"column_start":69,"expansion":null,"file_name":"src/services/sales_fulfillment.rs","is_primary":true,"label":null,"line_end":16,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":70,"highlight_start":69,"text":"        order_fulfillments::{self, Entity as OrderFulfillmentEntity},"},{"highlight_end":69,"highlight_start":1,"text":"        inventory_balance::{self, Entity as InventoryBalanceEntity},"},{"highlight_end":56,"highlight_start":1,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Entity as InventoryBalanceEntity`, `Entity as ItemMasterEntity`, `self`, and `self`","spans":[{"byte_end":542,"byte_start":538,"column_end":33,"column_start":29,"expansion":null,"file_name":"src/services/sales_fulfillment.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":29,"text":"        inventory_balance::{self, Entity as InventoryBalanceEntity},"}]},{"byte_end":576,"byte_start":544,"column_end":67,"column_start":35,"expansion":null,"file_name":"src/services/sales_fulfillment.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":67,"highlight_start":35,"text":"        inventory_balance::{self, Entity as InventoryBalanceEntity},"}]},{"byte_end":605,"byte_start":601,"column_end":27,"column_start":23,"expansion":null,"file_name":"src/services/sales_fulfillment.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":23,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]},{"byte_end":633,"byte_start":607,"column_end":55,"column_start":29,"expansion":null,"file_name":"src/services/sales_fulfillment.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":29,"text":"        item_master::{self, Entity as ItemMasterEntity},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Event` and `supplier`\n  --> src/services/procurement.rs:14:14\n   |\n14 |     events::{Event, EventSender},\n   |              ^^^^^\n15 |     models::{purchase_order, supplier},\n   |                              ^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":581,"byte_start":574,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":21,"highlight_start":14,"text":"    events::{Event, EventSender},"}]},{"byte_end":574,"byte_start":573,"column_end":14,"column_start":13,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"    events::{Event, EventSender},"}]},{"byte_end":593,"byte_start":592,"column_end":33,"column_start":32,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":32,"text":"    events::{Event, EventSender},"}]},{"byte_end":632,"byte_start":622,"column_end":38,"column_start":28,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":38,"highlight_start":28,"text":"    models::{purchase_order, supplier},"}]},{"byte_end":608,"byte_start":607,"column_end":14,"column_start":13,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":13,"text":"    models::{purchase_order, supplier},"}]},{"byte_end":633,"byte_start":632,"column_end":39,"column_start":38,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":39,"highlight_start":38,"text":"    models::{purchase_order, supplier},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Event` and `supplier`","spans":[{"byte_end":579,"byte_start":574,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"    events::{Event, EventSender},"}]},{"byte_end":632,"byte_start":624,"column_end":38,"column_start":30,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":30,"text":"    models::{purchase_order, supplier},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `ActiveModelTrait`, `DatabaseConnection`, and `Set`\n  --> src/services/procurement.rs:27:15\n   |\n27 | use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set};\n   |               ^^^^^^^^^^^^^^^^               ^^^^^^^^^^^^^^^^^^                            ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":955,"byte_start":937,"column_end":33,"column_start":15,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":27,"line_start":27,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":15,"text":"use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set};"}]},{"byte_end":986,"byte_start":966,"column_end":64,"column_start":44,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":27,"line_start":27,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":64,"highlight_start":44,"text":"use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set};"}]},{"byte_end":1017,"byte_start":1012,"column_end":95,"column_start":90,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":27,"line_start":27,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":95,"highlight_start":90,"text":"use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `ActiveModelTrait`, `DatabaseConnection`, and `Set`","spans":[{"byte_end":953,"byte_start":937,"column_end":31,"column_start":15,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":27,"line_start":27,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":15,"text":"use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set};"}]},{"byte_end":986,"byte_start":968,"column_end":64,"column_start":46,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":27,"line_start":27,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":64,"highlight_start":46,"text":"use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set};"}]},{"byte_end":1017,"byte_start":1014,"column_end":95,"column_start":92,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":27,"line_start":27,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":95,"highlight_start":92,"text":"use sea_orm::{ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, QueryFilter, Set};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `error` and `info`\n  --> src/services/procurement.rs:30:15\n   |\n30 | use tracing::{error, info, instrument};\n   |               ^^^^^  ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":1085,"byte_start":1072,"column_end":28,"column_start":15,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":30,"line_start":30,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":28,"highlight_start":15,"text":"use tracing::{error, info, instrument};"}]},{"byte_end":1072,"byte_start":1071,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":30,"line_start":30,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use tracing::{error, info, instrument};"}]},{"byte_end":1096,"byte_start":1095,"column_end":39,"column_start":38,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":30,"line_start":30,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":39,"highlight_start":38,"text":"use tracing::{error, info, instrument};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `error` and `info`","spans":[{"byte_end":1077,"byte_start":1072,"column_end":20,"column_start":15,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":15,"text":"use tracing::{error, info, instrument};"}]},{"byte_end":1083,"byte_start":1079,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"use tracing::{error, info, instrument};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `rust_decimal::Decimal`\n  --> src/services/procurement.rs:32:5\n   |\n32 | use rust_decimal::Decimal;\n   |     ^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":1141,"byte_start":1114,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":33,"line_start":32,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":27,"highlight_start":1,"text":"use rust_decimal::Decimal;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `rust_decimal::Decimal`","spans":[{"byte_end":1139,"byte_start":1118,"column_end":26,"column_start":5,"expansion":null,"file_name":"src/services/procurement.rs","is_primary":true,"label":null,"line_end":32,"line_start":32,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":5,"text":"use rust_decimal::Decimal;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `crate::errors::AppError`\n --> src/services/accounts.rs:1:5\n  |\n1 | use crate::errors::AppError;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":29,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/accounts.rs","is_primary":true,"label":null,"line_end":2,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":29,"highlight_start":1,"text":"use crate::errors::AppError;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::DatabaseConnection;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `crate::errors::AppError`","spans":[{"byte_end":27,"byte_start":4,"column_end":28,"column_start":5,"expansion":null,"file_name":"src/services/accounts.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":5,"text":"use crate::errors::AppError;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `crate::errors::AppError`\n --> src/services/leads.rs:1:5\n  |\n1 | use crate::errors::AppError;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":29,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/leads.rs","is_primary":true,"label":null,"line_end":2,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":29,"highlight_start":1,"text":"use crate::errors::AppError;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::DatabaseConnection;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `crate::errors::AppError`","spans":[{"byte_end":27,"byte_start":4,"column_end":28,"column_start":5,"expansion":null,"file_name":"src/services/leads.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":5,"text":"use crate::errors::AppError;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `crate::errors::AppError`\n --> src/services/business_intelligence.rs:1:5\n  |\n1 | use crate::errors::AppError;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":29,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/business_intelligence.rs","is_primary":true,"label":null,"line_end":2,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":29,"highlight_start":1,"text":"use crate::errors::AppError;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::DatabaseConnection;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `crate::errors::AppError`","spans":[{"byte_end":27,"byte_start":4,"column_end":28,"column_start":5,"expansion":null,"file_name":"src/services/business_intelligence.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":5,"text":"use crate::errors::AppError;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `crate::errors::AppError`\n --> src/services/forecasting.rs:1:5\n  |\n1 | use crate::errors::AppError;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":29,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/forecasting.rs","is_primary":true,"label":null,"line_end":2,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":29,"highlight_start":1,"text":"use crate::errors::AppError;"},{"highlight_end":1,"highlight_start":1,"text":"use sea_orm::DatabaseConnection;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `crate::errors::AppError`","spans":[{"byte_end":27,"byte_start":4,"column_end":28,"column_start":5,"expansion":null,"file_name":"src/services/forecasting.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":5,"text":"use crate::errors::AppError;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `std::sync::Arc`\n --> src/services/geocoding.rs:3:5\n  |\n3 | use std::sync::Arc;\n  |     ^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":90,"byte_start":70,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/geocoding.rs","is_primary":true,"label":null,"line_end":4,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":20,"highlight_start":1,"text":"use std::sync::Arc;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::sync::Arc`","spans":[{"byte_end":88,"byte_start":74,"column_end":19,"column_start":5,"expansion":null,"file_name":"src/services/geocoding.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"use std::sync::Arc;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `product_variant`\n --> src/services/commerce/cart_service.rs:3:26\n  |\n3 |         cart, cart_item, product_variant, Cart, CartItem, CartModel, ProductVariant,\n  |                          ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":79,"byte_start":62,"column_end":41,"column_start":24,"expansion":null,"file_name":"src/services/commerce/cart_service.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":41,"highlight_start":24,"text":"        cart, cart_item, product_variant, Cart, CartItem, CartModel, ProductVariant,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `product_variant`","spans":[{"byte_end":79,"byte_start":64,"column_end":41,"column_start":26,"expansion":null,"file_name":"src/services/commerce/cart_service.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":26,"text":"        cart, cart_item, product_variant, Cart, CartItem, CartModel, ProductVariant,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Entity as OrderItem` and `Entity as Order`\n --> src/services/commerce/checkout_service.rs:4:23\n  |\n4 |         order::{self, Entity as Order},\n  |                       ^^^^^^^^^^^^^^^\n5 |         order_item::{self, Entity as OrderItem},\n  |                            ^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":119,"byte_start":102,"column_end":38,"column_start":21,"expansion":null,"file_name":"src/services/commerce/checkout_service.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":38,"highlight_start":21,"text":"        order::{self, Entity as Order},"}]},{"byte_end":168,"byte_start":147,"column_end":47,"column_start":26,"expansion":null,"file_name":"src/services/commerce/checkout_service.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":47,"highlight_start":26,"text":"        order_item::{self, Entity as OrderItem},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Entity as OrderItem` and `Entity as Order`","spans":[{"byte_end":119,"byte_start":104,"column_end":38,"column_start":23,"expansion":null,"file_name":"src/services/commerce/checkout_service.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":23,"text":"        order::{self, Entity as Order},"}]},{"byte_end":168,"byte_start":149,"column_end":47,"column_start":28,"expansion":null,"file_name":"src/services/commerce/checkout_service.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":28,"text":"        order_item::{self, Entity as OrderItem},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `error`\n --> src/services/analytics.rs:5:21\n  |\n5 | use tracing::{info, error};\n  |                     ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":207,"byte_start":200,"column_end":26,"column_start":19,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":26,"highlight_start":19,"text":"use tracing::{info, error};"}]},{"byte_end":196,"byte_start":195,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use tracing::{info, error};"}]},{"byte_end":208,"byte_start":207,"column_end":27,"column_start":26,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":27,"highlight_start":26,"text":"use tracing::{info, error};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `error`","spans":[{"byte_end":207,"byte_start":202,"column_end":26,"column_start":21,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":21,"text":"use tracing::{info, error};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `extract::Extension`, `middleware::Next`, and `response::IntoResponse`\n --> src/tracing/mod.rs:3:5\n  |\n3 |     extract::Extension,\n  |     ^^^^^^^^^^^^^^^^^^\n4 |     http::{HeaderMap, Request, Response, StatusCode},\n5 |     middleware::Next,\n  |     ^^^^^^^^^^^^^^^^\n6 |     response::IntoResponse,\n  |     ^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":69,"byte_start":45,"column_end":23,"column_start":34,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":3,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":35,"highlight_start":34,"text":"    body::{Body, Bytes, HttpBody},"},{"highlight_end":23,"highlight_start":1,"text":"    extract::Extension,"}]},{"byte_end":173,"byte_start":123,"column_end":27,"column_start":53,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":6,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":54,"highlight_start":53,"text":"    http::{HeaderMap, Request, Response, StatusCode},"},{"highlight_end":22,"highlight_start":1,"text":"    middleware::Next,"},{"highlight_end":27,"highlight_start":1,"text":"    response::IntoResponse,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `extract::Extension`, `middleware::Next`, and `response::IntoResponse`","spans":[{"byte_end":69,"byte_start":51,"column_end":23,"column_start":5,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":5,"text":"    extract::Extension,"}]},{"byte_end":145,"byte_start":129,"column_end":21,"column_start":5,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":5,"text":"    middleware::Next,"}]},{"byte_end":173,"byte_start":151,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    response::IntoResponse,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `TracerProvider`\n  --> src/tracing/mod.rs:12:72\n   |\n12 |     trace::{FutureExt as OtelFutureExt, Span, TraceContextExt, Tracer, TracerProvider},\n   |                                                                        ^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":374,"byte_start":358,"column_end":86,"column_start":70,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":86,"highlight_start":70,"text":"    trace::{FutureExt as OtelFutureExt, Span, TraceContextExt, Tracer, TracerProvider},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `TracerProvider`","spans":[{"byte_end":374,"byte_start":360,"column_end":86,"column_start":72,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":86,"highlight_start":72,"text":"    trace::{FutureExt as OtelFutureExt, Span, TraceContextExt, Tracer, TracerProvider},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `pin_project_lite::pin_project`\n  --> src/tracing/mod.rs:15:5\n   |\n15 | use pin_project_lite::pin_project;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":453,"byte_start":418,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":16,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":35,"highlight_start":1,"text":"use pin_project_lite::pin_project;"},{"highlight_end":1,"highlight_start":1,"text":"use rand::Rng;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `pin_project_lite::pin_project`","spans":[{"byte_end":451,"byte_start":422,"column_end":34,"column_start":5,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":5,"text":"use pin_project_lite::pin_project;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `rand::Rng`\n  --> src/tracing/mod.rs:16:5\n   |\n16 | use rand::Rng;\n   |     ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":468,"byte_start":453,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":17,"line_start":16,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":1,"text":"use rand::Rng;"},{"highlight_end":1,"highlight_start":1,"text":"use serde::{Deserialize, Serialize};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `rand::Rng`","spans":[{"byte_end":466,"byte_start":457,"column_end":14,"column_start":5,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":5,"text":"use rand::Rng;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Deserialize`\n  --> src/tracing/mod.rs:17:13\n   |\n17 | use serde::{Deserialize, Serialize};\n   |             ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":493,"byte_start":480,"column_end":26,"column_start":13,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":26,"highlight_start":13,"text":"use serde::{Deserialize, Serialize};"}]},{"byte_end":480,"byte_start":479,"column_end":13,"column_start":12,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":13,"highlight_start":12,"text":"use serde::{Deserialize, Serialize};"}]},{"byte_end":503,"byte_start":502,"column_end":36,"column_start":35,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":36,"highlight_start":35,"text":"use serde::{Deserialize, Serialize};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Deserialize`","spans":[{"byte_end":491,"byte_start":480,"column_end":24,"column_start":13,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":13,"text":"use serde::{Deserialize, Serialize};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `slog::Logger`\n  --> src/tracing/mod.rs:19:5\n   |\n19 | use slog::Logger;\n   |     ^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":567,"byte_start":549,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":20,"line_start":19,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":18,"highlight_start":1,"text":"use slog::Logger;"},{"highlight_end":1,"highlight_start":1,"text":"use std::{"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `slog::Logger`","spans":[{"byte_end":565,"byte_start":553,"column_end":17,"column_start":5,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":19,"line_start":19,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":5,"text":"use slog::Logger;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Level`\n  --> src/tracing/mod.rs:37:27\n   |\n37 | use tracing::{instrument, Level};\n   |                           ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":1003,"byte_start":996,"column_end":32,"column_start":25,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":37,"line_start":37,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":32,"highlight_start":25,"text":"use tracing::{instrument, Level};"}]},{"byte_end":986,"byte_start":985,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":37,"line_start":37,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":14,"text":"use tracing::{instrument, Level};"}]},{"byte_end":1004,"byte_start":1003,"column_end":33,"column_start":32,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":37,"line_start":37,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":32,"text":"use tracing::{instrument, Level};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Level`","spans":[{"byte_end":1003,"byte_start":998,"column_end":32,"column_start":27,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":37,"line_start":37,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":27,"text":"use tracing::{instrument, Level};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `combinators::Frame`\n  --> src/tracing/mod.rs:43:31\n   |\n43 | use http_body_util::{BodyExt, combinators::Frame};\n   |                               ^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":1206,"byte_start":1186,"column_end":49,"column_start":29,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":43,"line_start":43,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":49,"highlight_start":29,"text":"use http_body_util::{BodyExt, combinators::Frame};"}]},{"byte_end":1179,"byte_start":1178,"column_end":22,"column_start":21,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":43,"line_start":43,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":22,"highlight_start":21,"text":"use http_body_util::{BodyExt, combinators::Frame};"}]},{"byte_end":1207,"byte_start":1206,"column_end":50,"column_start":49,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":43,"line_start":43,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":50,"highlight_start":49,"text":"use http_body_util::{BodyExt, combinators::Frame};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `combinators::Frame`","spans":[{"byte_end":1206,"byte_start":1188,"column_end":49,"column_start":31,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":43,"line_start":43,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":31,"text":"use http_body_util::{BodyExt, combinators::Frame};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `async_trait::async_trait`\n  --> src/versioning/mod.rs:18:5\n   |\n18 | use async_trait::async_trait;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":621,"byte_start":591,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/versioning/mod.rs","is_primary":true,"label":null,"line_end":19,"line_start":18,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":1,"text":"use async_trait::async_trait;"},{"highlight_end":1,"highlight_start":1,"text":"use axum::{"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `async_trait::async_trait`","spans":[{"byte_end":619,"byte_start":595,"column_end":29,"column_start":5,"expansion":null,"file_name":"src/versioning/mod.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":5,"text":"use async_trait::async_trait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `HeaderMap`\n  --> src/versioning/mod.rs:22:9\n   |\n22 |         HeaderMap, StatusCode, Request,\n   |         ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":701,"byte_start":682,"column_end":18,"column_start":38,"expansion":null,"file_name":"src/versioning/mod.rs","is_primary":true,"label":null,"line_end":22,"line_start":21,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":39,"highlight_start":38,"text":"        header::{HeaderValue, ACCEPT},"},{"highlight_end":18,"highlight_start":1,"text":"        HeaderMap, StatusCode, Request,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `HeaderMap`","spans":[{"byte_end":701,"byte_start":692,"column_end":18,"column_start":9,"expansion":null,"file_name":"src/versioning/mod.rs","is_primary":true,"label":null,"line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":9,"text":"        HeaderMap, StatusCode, Request,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `info`\n  --> src/versioning/mod.rs:31:22\n   |\n31 | use tracing::{debug, info, warn};\n   |                      ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":920,"byte_start":914,"column_end":26,"column_start":20,"expansion":null,"file_name":"src/versioning/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":26,"highlight_start":20,"text":"use tracing::{debug, info, warn};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `info`","spans":[{"byte_end":920,"byte_start":916,"column_end":26,"column_start":22,"expansion":null,"file_name":"src/versioning/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":22,"text":"use tracing::{debug, info, warn};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `DatabaseConnection`\n --> src/migrator.rs:3:41\n  |\n3 | use sea_orm::{ConnectOptions, Database, DatabaseConnection};\n  |                                         ^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":118,"byte_start":98,"column_end":59,"column_start":39,"expansion":null,"file_name":"src/migrator.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":59,"highlight_start":39,"text":"use sea_orm::{ConnectOptions, Database, DatabaseConnection};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `DatabaseConnection`","spans":[{"byte_end":118,"byte_start":100,"column_end":59,"column_start":41,"expansion":null,"file_name":"src/migrator.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":41,"text":"use sea_orm::{ConnectOptions, Database, DatabaseConnection};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `sea_orm::DbBackend`\n  --> src/migrator.rs:31:9\n   |\n31 |     use sea_orm::DbBackend;\n   |         ^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":1222,"byte_start":1199,"column_end":28,"column_start":5,"expansion":null,"file_name":"src/migrator.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":28,"highlight_start":5,"text":"    use sea_orm::DbBackend;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `sea_orm::DbBackend`","spans":[{"byte_end":1221,"byte_start":1203,"column_end":27,"column_start":9,"expansion":null,"file_name":"src/migrator.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":9,"text":"    use sea_orm::DbBackend;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `sea_orm::DbBackend`\n   --> src/migrator.rs:149:9\n    |\n149 |     use sea_orm::DbBackend;\n    |         ^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":5694,"byte_start":5671,"column_end":28,"column_start":5,"expansion":null,"file_name":"src/migrator.rs","is_primary":true,"label":null,"line_end":149,"line_start":149,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":28,"highlight_start":5,"text":"    use sea_orm::DbBackend;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `sea_orm::DbBackend`","spans":[{"byte_end":5693,"byte_start":5675,"column_end":27,"column_start":9,"expansion":null,"file_name":"src/migrator.rs","is_primary":true,"label":null,"line_end":149,"line_start":149,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":9,"text":"    use sea_orm::DbBackend;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `middleware`\n  --> src/lib.rs:40:5\n   |\n40 |     middleware,\n   |     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":726,"byte_start":710,"column_end":15,"column_start":19,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":null,"line_end":40,"line_start":39,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":20,"highlight_start":19,"text":"    extract::State,"},{"highlight_end":15,"highlight_start":1,"text":"    middleware,"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `middleware`","spans":[{"byte_end":726,"byte_start":716,"column_end":15,"column_start":5,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":null,"line_end":40,"line_start":40,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":5,"text":"    middleware,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `redis::AsyncCommands`\n  --> src/lib.rs:50:5\n   |\n50 | use redis::AsyncCommands;\n   |     ^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":950,"byte_start":924,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":null,"line_end":51,"line_start":50,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":26,"highlight_start":1,"text":"use redis::AsyncCommands;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `redis::AsyncCommands`","spans":[{"byte_end":948,"byte_start":928,"column_end":25,"column_start":5,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":null,"line_end":50,"line_start":50,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":5,"text":"use redis::AsyncCommands;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: ambiguous glob re-exports\n   --> src/lib.rs:430:13\n    |\n430 |     pub use crate::proto::*;\n    |             ^^^^^^^^^^^^^^^ the name `inventory` in the type namespace is first re-exported here\n...\n433 |     pub use crate::services::*;\n    |             ------------------ but the name `inventory` in the type namespace is also re-exported here\n    |\n    = note: `#[warn(ambiguous_glob_reexports)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(ambiguous_glob_reexports)]` on by default","rendered":null,"spans":[]}],"code":{"code":"ambiguous_glob_reexports","explanation":null},"level":"warning","message":"ambiguous glob re-exports","spans":[{"byte_end":16543,"byte_start":16528,"column_end":28,"column_start":13,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":"the name `inventory` in the type namespace is first re-exported here","line_end":430,"line_start":430,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":13,"text":"    pub use crate::proto::*;"}]},{"byte_end":16645,"byte_start":16627,"column_end":31,"column_start":13,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":"but the name `inventory` in the type namespace is also re-exported here","line_end":433,"line_start":433,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":13,"text":"    pub use crate::services::*;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `api_key`\n  --> src/auth/api_key_service.rs:61:42\n   |\n61 |     pub async fn validate_api_key(&self, api_key: &str) -> Option<ApiKey> {\n   |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_api_key`\n   |\n   = note: `#[warn(unused_variables)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_variables)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":1559,"byte_start":1552,"column_end":49,"column_start":42,"expansion":null,"file_name":"src/auth/api_key_service.rs","is_primary":true,"label":null,"line_end":61,"line_start":61,"suggested_replacement":"_api_key","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":49,"highlight_start":42,"text":"    pub async fn validate_api_key(&self, api_key: &str) -> Option<ApiKey> {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `api_key`","spans":[{"byte_end":1559,"byte_start":1552,"column_end":49,"column_start":42,"expansion":null,"file_name":"src/auth/api_key_service.rs","is_primary":true,"label":null,"line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":42,"text":"    pub async fn validate_api_key(&self, api_key: &str) -> Option<ApiKey> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `api_key_id`\n  --> src/auth/api_key_service.rs:97:40\n   |\n97 |     pub async fn delete_api_key(&self, api_key_id: Uuid) -> bool {\n   |                                        ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_api_key_id`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":2630,"byte_start":2620,"column_end":50,"column_start":40,"expansion":null,"file_name":"src/auth/api_key_service.rs","is_primary":true,"label":null,"line_end":97,"line_start":97,"suggested_replacement":"_api_key_id","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":50,"highlight_start":40,"text":"    pub async fn delete_api_key(&self, api_key_id: Uuid) -> bool {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `api_key_id`","spans":[{"byte_end":2630,"byte_start":2620,"column_end":50,"column_start":40,"expansion":null,"file_name":"src/auth/api_key_service.rs","is_primary":true,"label":null,"line_end":97,"line_start":97,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":40,"text":"    pub async fn delete_api_key(&self, api_key_id: Uuid) -> bool {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `user_id`\n   --> src/auth/api_key_service.rs:103:48\n    |\n103 |     pub async fn list_api_keys_for_user(&self, user_id: Uuid) -> Vec<ApiKey> {\n    |                                                ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":2828,"byte_start":2821,"column_end":55,"column_start":48,"expansion":null,"file_name":"src/auth/api_key_service.rs","is_primary":true,"label":null,"line_end":103,"line_start":103,"suggested_replacement":"_user_id","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":55,"highlight_start":48,"text":"    pub async fn list_api_keys_for_user(&self, user_id: Uuid) -> Vec<ApiKey> {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `user_id`","spans":[{"byte_end":2828,"byte_start":2821,"column_end":55,"column_start":48,"expansion":null,"file_name":"src/auth/api_key_service.rs","is_primary":true,"label":null,"line_end":103,"line_start":103,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":48,"text":"    pub async fn list_api_keys_for_user(&self, user_id: Uuid) -> Vec<ApiKey> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `role_name`\n   --> src/auth/rbac.rs:246:45\n    |\n246 |     pub async fn get_users_with_role(&self, role_name: &str) -> Vec<Uuid> {\n    |                                             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_role_name`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":7991,"byte_start":7982,"column_end":54,"column_start":45,"expansion":null,"file_name":"src/auth/rbac.rs","is_primary":true,"label":null,"line_end":246,"line_start":246,"suggested_replacement":"_role_name","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":54,"highlight_start":45,"text":"    pub async fn get_users_with_role(&self, role_name: &str) -> Vec<Uuid> {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `role_name`","spans":[{"byte_end":7991,"byte_start":7982,"column_end":54,"column_start":45,"expansion":null,"file_name":"src/auth/rbac.rs","is_primary":true,"label":null,"line_end":246,"line_start":246,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":45,"text":"    pub async fn get_users_with_role(&self, role_name: &str) -> Vec<Uuid> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `user_id`\n   --> src/auth/rbac.rs:252:39\n    |\n252 |     pub async fn user_has_role(&self, user_id: Uuid, role_name: &str) -> bool {\n    |                                       ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":8264,"byte_start":8257,"column_end":46,"column_start":39,"expansion":null,"file_name":"src/auth/rbac.rs","is_primary":true,"label":null,"line_end":252,"line_start":252,"suggested_replacement":"_user_id","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":46,"highlight_start":39,"text":"    pub async fn user_has_role(&self, user_id: Uuid, role_name: &str) -> bool {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `user_id`","spans":[{"byte_end":8264,"byte_start":8257,"column_end":46,"column_start":39,"expansion":null,"file_name":"src/auth/rbac.rs","is_primary":true,"label":null,"line_end":252,"line_start":252,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":39,"text":"    pub async fn user_has_role(&self, user_id: Uuid, role_name: &str) -> bool {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `role_name`\n   --> src/auth/rbac.rs:252:54\n    |\n252 |     pub async fn user_has_role(&self, user_id: Uuid, role_name: &str) -> bool {\n    |                                                      ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_role_name`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":8281,"byte_start":8272,"column_end":63,"column_start":54,"expansion":null,"file_name":"src/auth/rbac.rs","is_primary":true,"label":null,"line_end":252,"line_start":252,"suggested_replacement":"_role_name","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":63,"highlight_start":54,"text":"    pub async fn user_has_role(&self, user_id: Uuid, role_name: &str) -> bool {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `role_name`","spans":[{"byte_end":8281,"byte_start":8272,"column_end":63,"column_start":54,"expansion":null,"file_name":"src/auth/rbac.rs","is_primary":true,"label":null,"line_end":252,"line_start":252,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":54,"text":"    pub async fn user_has_role(&self, user_id: Uuid, role_name: &str) -> bool {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `user_id`\n   --> src/auth/rbac.rs:258:45\n    |\n258 |     pub async fn assign_role_to_user(&self, user_id: Uuid, role_name: &str) -> bool {\n    |                                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":8543,"byte_start":8536,"column_end":52,"column_start":45,"expansion":null,"file_name":"src/auth/rbac.rs","is_primary":true,"label":null,"line_end":258,"line_start":258,"suggested_replacement":"_user_id","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":52,"highlight_start":45,"text":"    pub async fn assign_role_to_user(&self, user_id: Uuid, role_name: &str) -> bool {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `user_id`","spans":[{"byte_end":8543,"byte_start":8536,"column_end":52,"column_start":45,"expansion":null,"file_name":"src/auth/rbac.rs","is_primary":true,"label":null,"line_end":258,"line_start":258,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":45,"text":"    pub async fn assign_role_to_user(&self, user_id: Uuid, role_name: &str) -> bool {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `role_name`\n   --> src/auth/rbac.rs:258:60\n    |\n258 |     pub async fn assign_role_to_user(&self, user_id: Uuid, role_name: &str) -> bool {\n    |                                                            ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_role_name`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":8560,"byte_start":8551,"column_end":69,"column_start":60,"expansion":null,"file_name":"src/auth/rbac.rs","is_primary":true,"label":null,"line_end":258,"line_start":258,"suggested_replacement":"_role_name","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":69,"highlight_start":60,"text":"    pub async fn assign_role_to_user(&self, user_id: Uuid, role_name: &str) -> bool {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `role_name`","spans":[{"byte_end":8560,"byte_start":8551,"column_end":69,"column_start":60,"expansion":null,"file_name":"src/auth/rbac.rs","is_primary":true,"label":null,"line_end":258,"line_start":258,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":69,"highlight_start":60,"text":"    pub async fn assign_role_to_user(&self, user_id: Uuid, role_name: &str) -> bool {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `user_id`\n   --> src/auth/rbac.rs:264:47\n    |\n264 |     pub async fn remove_role_from_user(&self, user_id: Uuid, role_name: &str) -> bool {\n    |                                               ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":8826,"byte_start":8819,"column_end":54,"column_start":47,"expansion":null,"file_name":"src/auth/rbac.rs","is_primary":true,"label":null,"line_end":264,"line_start":264,"suggested_replacement":"_user_id","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":54,"highlight_start":47,"text":"    pub async fn remove_role_from_user(&self, user_id: Uuid, role_name: &str) -> bool {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `user_id`","spans":[{"byte_end":8826,"byte_start":8819,"column_end":54,"column_start":47,"expansion":null,"file_name":"src/auth/rbac.rs","is_primary":true,"label":null,"line_end":264,"line_start":264,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":47,"text":"    pub async fn remove_role_from_user(&self, user_id: Uuid, role_name: &str) -> bool {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `role_name`\n   --> src/auth/rbac.rs:264:62\n    |\n264 |     pub async fn remove_role_from_user(&self, user_id: Uuid, role_name: &str) -> bool {\n    |                                                              ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_role_name`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":8843,"byte_start":8834,"column_end":71,"column_start":62,"expansion":null,"file_name":"src/auth/rbac.rs","is_primary":true,"label":null,"line_end":264,"line_start":264,"suggested_replacement":"_role_name","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":71,"highlight_start":62,"text":"    pub async fn remove_role_from_user(&self, user_id: Uuid, role_name: &str) -> bool {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `role_name`","spans":[{"byte_end":8843,"byte_start":8834,"column_end":71,"column_start":62,"expansion":null,"file_name":"src/auth/rbac.rs","is_primary":true,"label":null,"line_end":264,"line_start":264,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":71,"highlight_start":62,"text":"    pub async fn remove_role_from_user(&self, user_id: Uuid, role_name: &str) -> bool {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `expiry`\n   --> src/auth/mod.rs:395:9\n    |\n395 |         expiry: DateTime<Utc>,\n    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_expiry`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":13334,"byte_start":13328,"column_end":15,"column_start":9,"expansion":null,"file_name":"src/auth/mod.rs","is_primary":true,"label":null,"line_end":395,"line_start":395,"suggested_replacement":"_expiry","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":15,"highlight_start":9,"text":"        expiry: DateTime<Utc>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `expiry`","spans":[{"byte_end":13334,"byte_start":13328,"column_end":15,"column_start":9,"expansion":null,"file_name":"src/auth/mod.rs","is_primary":true,"label":null,"line_end":395,"line_start":395,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":9,"text":"        expiry: DateTime<Utc>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `user_id`\n   --> src/auth/mod.rs:404:42\n    |\n404 |     async fn verify_refresh_token(&self, user_id: Uuid, token_id: &str) -> Result<bool, AuthError> {\n    |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":13661,"byte_start":13654,"column_end":49,"column_start":42,"expansion":null,"file_name":"src/auth/mod.rs","is_primary":true,"label":null,"line_end":404,"line_start":404,"suggested_replacement":"_user_id","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":49,"highlight_start":42,"text":"    async fn verify_refresh_token(&self, user_id: Uuid, token_id: &str) -> Result<bool, AuthError> {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `user_id`","spans":[{"byte_end":13661,"byte_start":13654,"column_end":49,"column_start":42,"expansion":null,"file_name":"src/auth/mod.rs","is_primary":true,"label":null,"line_end":404,"line_start":404,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":42,"text":"    async fn verify_refresh_token(&self, user_id: Uuid, token_id: &str) -> Result<bool, AuthError> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `token_id`\n   --> src/auth/mod.rs:404:57\n    |\n404 |     async fn verify_refresh_token(&self, user_id: Uuid, token_id: &str) -> Result<bool, AuthError> {\n    |                                                         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_token_id`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":13677,"byte_start":13669,"column_end":65,"column_start":57,"expansion":null,"file_name":"src/auth/mod.rs","is_primary":true,"label":null,"line_end":404,"line_start":404,"suggested_replacement":"_token_id","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":65,"highlight_start":57,"text":"    async fn verify_refresh_token(&self, user_id: Uuid, token_id: &str) -> Result<bool, AuthError> {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `token_id`","spans":[{"byte_end":13677,"byte_start":13669,"column_end":65,"column_start":57,"expansion":null,"file_name":"src/auth/mod.rs","is_primary":true,"label":null,"line_end":404,"line_start":404,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":65,"highlight_start":57,"text":"    async fn verify_refresh_token(&self, user_id: Uuid, token_id: &str) -> Result<bool, AuthError> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: variable does not need to be mutable\n   --> src/auth/mod.rs:703:5\n    |\n703 |     mut request: Request,\n    |     ----^^^^^^^\n    |     |\n    |     help: remove this `mut`\n    |\n    = note: `#[warn(unused_mut)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_mut)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":22718,"byte_start":22714,"column_end":9,"column_start":5,"expansion":null,"file_name":"src/auth/mod.rs","is_primary":true,"label":null,"line_end":703,"line_start":703,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":9,"highlight_start":5,"text":"    mut request: Request,"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":22725,"byte_start":22714,"column_end":16,"column_start":5,"expansion":null,"file_name":"src/auth/mod.rs","is_primary":true,"label":null,"line_end":703,"line_start":703,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":5,"text":"    mut request: Request,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: variable does not need to be mutable\n   --> src/auth/mod.rs:729:5\n    |\n729 |     mut request: Request,\n    |     ----^^^^^^^\n    |     |\n    |     help: remove this `mut`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":23545,"byte_start":23541,"column_end":9,"column_start":5,"expansion":null,"file_name":"src/auth/mod.rs","is_primary":true,"label":null,"line_end":729,"line_start":729,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":9,"highlight_start":5,"text":"    mut request: Request,"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":23552,"byte_start":23541,"column_end":16,"column_start":5,"expansion":null,"file_name":"src/auth/mod.rs","is_primary":true,"label":null,"line_end":729,"line_start":729,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":5,"text":"    mut request: Request,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `auth_user`\n   --> src/auth/mod.rs:887:5\n    |\n887 |     auth_user: AuthUser,\n    |     ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_auth_user`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":28774,"byte_start":28765,"column_end":14,"column_start":5,"expansion":null,"file_name":"src/auth/mod.rs","is_primary":true,"label":null,"line_end":887,"line_start":887,"suggested_replacement":"_auth_user","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":14,"highlight_start":5,"text":"    auth_user: AuthUser,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `auth_user`","spans":[{"byte_end":28774,"byte_start":28765,"column_end":14,"column_start":5,"expansion":null,"file_name":"src/auth/mod.rs","is_primary":true,"label":null,"line_end":887,"line_start":887,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":5,"text":"    auth_user: AuthUser,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `cache`\n   --> src/cache/query.rs:289:5\n    |\n289 |     cache: &InMemoryCache,\n    |     ^^^^^ help: if this is intentional, prefix it with an underscore: `_cache`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":9664,"byte_start":9659,"column_end":10,"column_start":5,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":289,"line_start":289,"suggested_replacement":"_cache","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":10,"highlight_start":5,"text":"    cache: &InMemoryCache,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `cache`","spans":[{"byte_end":9664,"byte_start":9659,"column_end":10,"column_start":5,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":289,"line_start":289,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":5,"text":"    cache: &InMemoryCache,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `cache`\n   --> src/cache/query.rs:301:5\n    |\n301 |     cache: &InMemoryCache,\n    |     ^^^^^ help: if this is intentional, prefix it with an underscore: `_cache`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":10087,"byte_start":10082,"column_end":10,"column_start":5,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":301,"line_start":301,"suggested_replacement":"_cache","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":10,"highlight_start":5,"text":"    cache: &InMemoryCache,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `cache`","spans":[{"byte_end":10087,"byte_start":10082,"column_end":10,"column_start":5,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":301,"line_start":301,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":5,"text":"    cache: &InMemoryCache,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `saved_item`\n   --> src/commands/orders/add_item_to_order_command.rs:122:9\n    |\n122 |         saved_item: &order_item_entity::Model,\n    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_saved_item`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":3885,"byte_start":3875,"column_end":19,"column_start":9,"expansion":null,"file_name":"src/commands/orders/add_item_to_order_command.rs","is_primary":true,"label":null,"line_end":122,"line_start":122,"suggested_replacement":"_saved_item","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":19,"highlight_start":9,"text":"        saved_item: &order_item_entity::Model,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `saved_item`","spans":[{"byte_end":3885,"byte_start":3875,"column_end":19,"column_start":9,"expansion":null,"file_name":"src/commands/orders/add_item_to_order_command.rs","is_primary":true,"label":null,"line_end":122,"line_start":122,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":9,"text":"        saved_item: &order_item_entity::Model,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `reason`\n  --> src/commands/orders/archive_order_command.rs:77:5\n   |\n77 |     reason: &str,\n   |     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_reason`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":2069,"byte_start":2063,"column_end":11,"column_start":5,"expansion":null,"file_name":"src/commands/orders/archive_order_command.rs","is_primary":true,"label":null,"line_end":77,"line_start":77,"suggested_replacement":"_reason","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":11,"highlight_start":5,"text":"    reason: &str,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `reason`","spans":[{"byte_end":2069,"byte_start":2063,"column_end":11,"column_start":5,"expansion":null,"file_name":"src/commands/orders/archive_order_command.rs","is_primary":true,"label":null,"line_end":77,"line_start":77,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":11,"highlight_start":5,"text":"    reason: &str,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `updated_order`\n   --> src/commands/orders/cancel_order_command.rs:152:9\n    |\n152 |         updated_order: &order_entity::Model,\n    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_updated_order`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":4713,"byte_start":4700,"column_end":22,"column_start":9,"expansion":null,"file_name":"src/commands/orders/cancel_order_command.rs","is_primary":true,"label":null,"line_end":152,"line_start":152,"suggested_replacement":"_updated_order","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":22,"highlight_start":9,"text":"        updated_order: &order_entity::Model,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `updated_order`","spans":[{"byte_end":4713,"byte_start":4700,"column_end":22,"column_start":9,"expansion":null,"file_name":"src/commands/orders/cancel_order_command.rs","is_primary":true,"label":null,"line_end":152,"line_start":152,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":9,"text":"        updated_order: &order_entity::Model,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `db`\n   --> src/commands/advancedshippingnotice/add_item_to_asn_command.rs:102:9\n    |\n102 |         db: &DatabaseConnection,\n    |         ^^ help: if this is intentional, prefix it with an underscore: `_db`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":3015,"byte_start":3013,"column_end":11,"column_start":9,"expansion":null,"file_name":"src/commands/advancedshippingnotice/add_item_to_asn_command.rs","is_primary":true,"label":null,"line_end":102,"line_start":102,"suggested_replacement":"_db","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":11,"highlight_start":9,"text":"        db: &DatabaseConnection,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `db`","spans":[{"byte_end":3015,"byte_start":3013,"column_end":11,"column_start":9,"expansion":null,"file_name":"src/commands/advancedshippingnotice/add_item_to_asn_command.rs","is_primary":true,"label":null,"line_end":102,"line_start":102,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":11,"highlight_start":9,"text":"        db: &DatabaseConnection,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `saved_item`\n   --> src/commands/advancedshippingnotice/add_item_to_asn_command.rs:141:9\n    |\n141 |         saved_item: &asn_items::Model,\n    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_saved_item`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":4592,"byte_start":4582,"column_end":19,"column_start":9,"expansion":null,"file_name":"src/commands/advancedshippingnotice/add_item_to_asn_command.rs","is_primary":true,"label":null,"line_end":141,"line_start":141,"suggested_replacement":"_saved_item","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":19,"highlight_start":9,"text":"        saved_item: &asn_items::Model,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `saved_item`","spans":[{"byte_end":4592,"byte_start":4582,"column_end":19,"column_start":9,"expansion":null,"file_name":"src/commands/advancedshippingnotice/add_item_to_asn_command.rs","is_primary":true,"label":null,"line_end":141,"line_start":141,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":9,"text":"        saved_item: &asn_items::Model,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `updated_asn`\n   --> src/commands/advancedshippingnotice/cancel_asn_command.rs:177:9\n    |\n177 |         updated_asn: &asn_entity::Model,\n    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_updated_asn`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":5883,"byte_start":5872,"column_end":20,"column_start":9,"expansion":null,"file_name":"src/commands/advancedshippingnotice/cancel_asn_command.rs","is_primary":true,"label":null,"line_end":177,"line_start":177,"suggested_replacement":"_updated_asn","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":20,"highlight_start":9,"text":"        updated_asn: &asn_entity::Model,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `updated_asn`","spans":[{"byte_end":5883,"byte_start":5872,"column_end":20,"column_start":9,"expansion":null,"file_name":"src/commands/advancedshippingnotice/cancel_asn_command.rs","is_primary":true,"label":null,"line_end":177,"line_start":177,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":9,"text":"        updated_asn: &asn_entity::Model,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `db`\n   --> src/commands/purchaseorders/create_purchase_order_command.rs:134:39\n    |\n134 |     async fn validate_supplier(&self, db: &DatabaseConnection) -> Result<(), ServiceError> {\n    |                                       ^^ help: if this is intentional, prefix it with an underscore: `_db`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":4191,"byte_start":4189,"column_end":41,"column_start":39,"expansion":null,"file_name":"src/commands/purchaseorders/create_purchase_order_command.rs","is_primary":true,"label":null,"line_end":134,"line_start":134,"suggested_replacement":"_db","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":41,"highlight_start":39,"text":"    async fn validate_supplier(&self, db: &DatabaseConnection) -> Result<(), ServiceError> {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `db`","spans":[{"byte_end":4191,"byte_start":4189,"column_end":41,"column_start":39,"expansion":null,"file_name":"src/commands/purchaseorders/create_purchase_order_command.rs","is_primary":true,"label":null,"line_end":134,"line_start":134,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":39,"text":"    async fn validate_supplier(&self, db: &DatabaseConnection) -> Result<(), ServiceError> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `cancelled_return`\n  --> src/commands/returns/cancel_return_command.rs:91:9\n   |\n91 |         cancelled_return: &return_entity::Model,\n   |         ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_cancelled_return`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":2666,"byte_start":2650,"column_end":25,"column_start":9,"expansion":null,"file_name":"src/commands/returns/cancel_return_command.rs","is_primary":true,"label":null,"line_end":91,"line_start":91,"suggested_replacement":"_cancelled_return","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":25,"highlight_start":9,"text":"        cancelled_return: &return_entity::Model,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `cancelled_return`","spans":[{"byte_end":2666,"byte_start":2650,"column_end":25,"column_start":9,"expansion":null,"file_name":"src/commands/returns/cancel_return_command.rs","is_primary":true,"label":null,"line_end":91,"line_start":91,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":9,"text":"        cancelled_return: &return_entity::Model,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `reason`\n   --> src/commands/returns/close_return_command.rs:172:9\n    |\n172 |         reason: Option<&String>,\n    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_reason`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":6514,"byte_start":6508,"column_end":15,"column_start":9,"expansion":null,"file_name":"src/commands/returns/close_return_command.rs","is_primary":true,"label":null,"line_end":172,"line_start":172,"suggested_replacement":"_reason","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":15,"highlight_start":9,"text":"        reason: Option<&String>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `reason`","spans":[{"byte_end":6514,"byte_start":6508,"column_end":15,"column_start":9,"expansion":null,"file_name":"src/commands/returns/close_return_command.rs","is_primary":true,"label":null,"line_end":172,"line_start":172,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":9,"text":"        reason: Option<&String>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `deleted_return`\n  --> src/commands/returns/delete_return_command.rs:89:9\n   |\n89 |         deleted_return: &return_entity::Model,\n   |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_deleted_return`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":2481,"byte_start":2467,"column_end":23,"column_start":9,"expansion":null,"file_name":"src/commands/returns/delete_return_command.rs","is_primary":true,"label":null,"line_end":89,"line_start":89,"suggested_replacement":"_deleted_return","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":23,"highlight_start":9,"text":"        deleted_return: &return_entity::Model,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `deleted_return`","spans":[{"byte_end":2481,"byte_start":2467,"column_end":23,"column_start":9,"expansion":null,"file_name":"src/commands/returns/delete_return_command.rs","is_primary":true,"label":null,"line_end":89,"line_start":89,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":9,"text":"        deleted_return: &return_entity::Model,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `refunded_return`\n   --> src/commands/returns/refund_return_command.rs:104:9\n    |\n104 |         refunded_return: &return_entity::Model,\n    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_refunded_return`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":3069,"byte_start":3054,"column_end":24,"column_start":9,"expansion":null,"file_name":"src/commands/returns/refund_return_command.rs","is_primary":true,"label":null,"line_end":104,"line_start":104,"suggested_replacement":"_refunded_return","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":24,"highlight_start":9,"text":"        refunded_return: &return_entity::Model,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `refunded_return`","spans":[{"byte_end":3069,"byte_start":3054,"column_end":24,"column_start":9,"expansion":null,"file_name":"src/commands/returns/refund_return_command.rs","is_primary":true,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":9,"text":"        refunded_return: &return_entity::Model,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `reopened_return`\n  --> src/commands/returns/reopen_return_command.rs:88:9\n   |\n88 |         reopened_return: &return_entity::Model,\n   |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_reopened_return`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":2551,"byte_start":2536,"column_end":24,"column_start":9,"expansion":null,"file_name":"src/commands/returns/reopen_return_command.rs","is_primary":true,"label":null,"line_end":88,"line_start":88,"suggested_replacement":"_reopened_return","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":24,"highlight_start":9,"text":"        reopened_return: &return_entity::Model,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `reopened_return`","spans":[{"byte_end":2551,"byte_start":2536,"column_end":24,"column_start":9,"expansion":null,"file_name":"src/commands/returns/reopen_return_command.rs","is_primary":true,"label":null,"line_end":88,"line_start":88,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":9,"text":"        reopened_return: &return_entity::Model,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `updated_shipment`\n   --> src/commands/shipments/cancel_shipment_command.rs:133:9\n    |\n133 |         updated_shipment: &shipment::Model,\n    |         ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_updated_shipment`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":4328,"byte_start":4312,"column_end":25,"column_start":9,"expansion":null,"file_name":"src/commands/shipments/cancel_shipment_command.rs","is_primary":true,"label":null,"line_end":133,"line_start":133,"suggested_replacement":"_updated_shipment","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":25,"highlight_start":9,"text":"        updated_shipment: &shipment::Model,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `updated_shipment`","spans":[{"byte_end":4328,"byte_start":4312,"column_end":25,"column_start":9,"expansion":null,"file_name":"src/commands/shipments/cancel_shipment_command.rs","is_primary":true,"label":null,"line_end":133,"line_start":133,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":9,"text":"        updated_shipment: &shipment::Model,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `shipment`\n  --> src/commands/shipments/hold_shipment_command.rs:77:9\n   |\n77 |         shipment: &shipment::Model,\n   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shipment`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":2375,"byte_start":2367,"column_end":17,"column_start":9,"expansion":null,"file_name":"src/commands/shipments/hold_shipment_command.rs","is_primary":true,"label":null,"line_end":77,"line_start":77,"suggested_replacement":"_shipment","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":17,"highlight_start":9,"text":"        shipment: &shipment::Model,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `shipment`","spans":[{"byte_end":2375,"byte_start":2367,"column_end":17,"column_start":9,"expansion":null,"file_name":"src/commands/shipments/hold_shipment_command.rs","is_primary":true,"label":null,"line_end":77,"line_start":77,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":9,"text":"        shipment: &shipment::Model,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `shipment`\n   --> src/commands/shipments/release_hold_shipment_commad.rs:132:9\n    |\n132 |         shipment: &shipment::Model,\n    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shipment`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":4316,"byte_start":4308,"column_end":17,"column_start":9,"expansion":null,"file_name":"src/commands/shipments/release_hold_shipment_commad.rs","is_primary":true,"label":null,"line_end":132,"line_start":132,"suggested_replacement":"_shipment","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":17,"highlight_start":9,"text":"        shipment: &shipment::Model,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `shipment`","spans":[{"byte_end":4316,"byte_start":4308,"column_end":17,"column_start":9,"expansion":null,"file_name":"src/commands/shipments/release_hold_shipment_commad.rs","is_primary":true,"label":null,"line_end":132,"line_start":132,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":9,"text":"        shipment: &shipment::Model,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `?` couldn't convert the error to `errors::ServiceError`\n  --> src/commands/shipments/reschedule_shipment_command.rs:65:15\n   |\n62 |               .ok_or_else(|| {\n   |  ______________-\n63 | |                 error!(\"Shipment with ID {} not found\", self.shipment_id);\n64 | |                 ServiceError::NotFound\n65 | |             })?\n   | |              -^ unsatisfied trait bound\n   | |______________|\n   |                this can't be annotated with `?` because it has type `Result<_, fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>`\n   |\nnote: `errors::ServiceError` needs to implement `From<fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>`\n  --> src/errors.rs:29:1\n   |\n29 | pub enum ServiceError {\n   | ^^^^^^^^^^^^^^^^^^^^^\n   = help: the trait `From<fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>` is not implemented for `errors::ServiceError`\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n   = help: the following other types implement trait `From<T>`:\n             `errors::ServiceError` implements `From<()>`\n             `errors::ServiceError` implements `From<ValidationErrors>`\n             `errors::ServiceError` implements `From<anyhow::Error>`\n             `errors::ServiceError` implements `From<sea_orm::DbErr>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`errors::ServiceError` needs to implement `From<fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>`","rendered":null,"spans":[{"byte_end":701,"byte_start":680,"column_end":22,"column_start":1,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":1,"text":"pub enum ServiceError {"}]}]},{"children":[],"code":null,"level":"help","message":"the trait `From<fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>` is not implemented for `errors::ServiceError`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `From<T>`:\n  `errors::ServiceError` implements `From<()>`\n  `errors::ServiceError` implements `From<ValidationErrors>`\n  `errors::ServiceError` implements `From<anyhow::Error>`\n  `errors::ServiceError` implements `From<sea_orm::DbErr>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`?` couldn't convert the error to `errors::ServiceError`","spans":[{"byte_end":1915,"byte_start":1771,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/commands/shipments/reschedule_shipment_command.rs","is_primary":false,"label":"this can't be annotated with `?` because it has type `Result<_, fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>`","line_end":65,"line_start":62,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":14,"text":"            .ok_or_else(|| {"},{"highlight_end":75,"highlight_start":1,"text":"                error!(\"Shipment with ID {} not found\", self.shipment_id);"},{"highlight_end":39,"highlight_start":1,"text":"                ServiceError::NotFound"},{"highlight_end":15,"highlight_start":1,"text":"            })?"}]},{"byte_end":1916,"byte_start":1915,"column_end":16,"column_start":15,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of operator `?`","span":{"byte_end":1916,"byte_start":1915,"column_end":16,"column_start":15,"expansion":null,"file_name":"src/commands/shipments/reschedule_shipment_command.rs","is_primary":false,"label":null,"line_end":65,"line_start":65,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":15,"text":"            })?"}]}},"file_name":"src/commands/shipments/reschedule_shipment_command.rs","is_primary":true,"label":"unsatisfied trait bound","line_end":65,"line_start":65,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":15,"text":"            })?"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `scheduled_date` on type `models::shipment::ActiveModel`\n  --> src/commands/shipments/reschedule_shipment_command.rs:68:18\n   |\n68 |         shipment.scheduled_date = ActiveValue::Set(self.new_scheduled_date);\n   |                  ^^^^^^^^^^^^^^ unknown field\n   |\n   = note: available fields are: `id`, `order_id`, `tracking_number`, `carrier`, `status` ... and 18 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `id`, `order_id`, `tracking_number`, `carrier`, `status` ... and 18 others","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `scheduled_date` on type `models::shipment::ActiveModel`","spans":[{"byte_end":1970,"byte_start":1956,"column_end":32,"column_start":18,"expansion":null,"file_name":"src/commands/shipments/reschedule_shipment_command.rs","is_primary":true,"label":"unknown field","line_end":68,"line_start":68,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":18,"text":"        shipment.scheduled_date = ActiveValue::Set(self.new_scheduled_date);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/commands/shipments/reschedule_shipment_command.rs:91:17\n    |\n 89 |             .send(Event::ShipmentRescheduled(\n    |                   -------------------------- arguments to this enum variant are incorrect\n 90 |                 self.shipment_id,\n 91 |                 self.new_scheduled_date,\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ expected `DateTime<Utc>`, found `NaiveDateTime`\n    |\n    = note: expected struct `chrono::DateTime<Utc>`\n               found struct `NaiveDateTime`\nnote: tuple variant defined here\n   --> src/events/mod.rs:230:5\n    |\n230 |     ShipmentRescheduled(Uuid, DateTime<Utc>),\n    |     ^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `chrono::DateTime<Utc>`\n   found struct `NaiveDateTime`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":5858,"byte_start":5839,"column_end":24,"column_start":5,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":230,"line_start":230,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":5,"text":"    ShipmentRescheduled(Uuid, DateTime<Utc>),"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2723,"byte_start":2700,"column_end":40,"column_start":17,"expansion":null,"file_name":"src/commands/shipments/reschedule_shipment_command.rs","is_primary":true,"label":"expected `DateTime<Utc>`, found `NaiveDateTime`","line_end":91,"line_start":91,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":17,"text":"                self.new_scheduled_date,"}]},{"byte_end":2648,"byte_start":2622,"column_end":45,"column_start":19,"expansion":null,"file_name":"src/commands/shipments/reschedule_shipment_command.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":89,"line_start":89,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":19,"text":"            .send(Event::ShipmentRescheduled("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `status` on type `models::order::ActiveModel`\n  --> src/commands/shipments/ship_command.rs:96:15\n   |\n96 |         order.status = Set(OrderStatus::Shipped);\n   |               ^^^^^^ unknown field\n   |\n   = note: available fields are: `id`, `order_number`, `customer_name`, `customer_email`, `delivery_address` ... and 16 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `id`, `order_number`, `customer_name`, `customer_email`, `delivery_address` ... and 16 others","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `status` on type `models::order::ActiveModel`","spans":[{"byte_end":3177,"byte_start":3171,"column_end":21,"column_start":15,"expansion":null,"file_name":"src/commands/shipments/ship_command.rs","is_primary":true,"label":"unknown field","line_end":96,"line_start":96,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":15,"text":"        order.status = Set(OrderStatus::Shipped);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n   --> src/commands/shipments/ship_command.rs:137:19\n    |\n137 |             .send(Event::OrderShipped(\n    |                   ^^^^^^^^^^^^^^^^^^^\n138 |                 self.order_id,\n139 |                 self.tracking_number.clone(),\n    |                 ---------------------------- unexpected argument #2 of type `std::string::String`\n    |\nnote: tuple variant defined here\n   --> src/events/mod.rs:228:5\n    |\n228 |     OrderShipped(Uuid),\n    |     ^^^^^^^^^^^^\nhelp: remove the extra argument\n    |\n138 -                 self.order_id,\n139 -                 self.tracking_number.clone(),\n138 +                 self.order_id,\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":5801,"byte_start":5789,"column_end":17,"column_start":5,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":228,"line_start":228,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":5,"text":"    OrderShipped(Uuid),"}]}]},{"children":[],"code":null,"level":"help","message":"remove the extra argument","rendered":null,"spans":[{"byte_end":4694,"byte_start":4648,"column_end":45,"column_start":30,"expansion":null,"file_name":"src/commands/shipments/ship_command.rs","is_primary":true,"label":null,"line_end":139,"line_start":138,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":31,"highlight_start":30,"text":"                self.order_id,"},{"highlight_end":45,"highlight_start":1,"text":"                self.tracking_number.clone(),"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this enum variant takes 1 argument but 2 arguments were supplied","spans":[{"byte_end":4694,"byte_start":4666,"column_end":45,"column_start":17,"expansion":null,"file_name":"src/commands/shipments/ship_command.rs","is_primary":false,"label":"unexpected argument #2 of type `std::string::String`","line_end":139,"line_start":139,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":17,"text":"                self.tracking_number.clone(),"}]},{"byte_end":4617,"byte_start":4598,"column_end":38,"column_start":19,"expansion":null,"file_name":"src/commands/shipments/ship_command.rs","is_primary":true,"label":null,"line_end":137,"line_start":137,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":19,"text":"            .send(Event::OrderShipped("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `execute` found for reference `&std::sync::Arc<CircuitBreaker>` in the current scope\n  --> src/commands/shipments/track_shipment_command.rs:67:18\n   |\n66 |               return cb\n   |  ____________________-\n67 | |                 .execute(\"carrier-tracking-api\", || async {\n   | |                 -^^^^^^^ method not found in `&std::sync::Arc<CircuitBreaker>`\n   | |_________________|\n   |\n   |\n   = help: items from traits can only be used if the trait is implemented and in scope\n   = note: the following traits define an item `execute`, perhaps you need to implement one of them:\n           candidate #1: `commands::Command`\n           candidate #2: `anstyle_parse::Perform`\n           candidate #3: `hyper::rt::Executor`\n           candidate #4: `hyper::rt::Executor`\n           candidate #5: `sea_orm::ConnectionTrait`\n           candidate #6: `sea_orm::sqlx::Executor`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is implemented and in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the following traits define an item `execute`, perhaps you need to implement one of them:\ncandidate #1: `commands::Command`\ncandidate #2: `anstyle_parse::Perform`\ncandidate #3: `hyper::rt::Executor`\ncandidate #4: `hyper::rt::Executor`\ncandidate #5: `sea_orm::ConnectionTrait`\ncandidate #6: `sea_orm::sqlx::Executor`","rendered":null,"spans":[]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `execute` found for reference `&std::sync::Arc<CircuitBreaker>` in the current scope","spans":[{"byte_end":2165,"byte_start":2145,"column_end":18,"column_start":20,"expansion":null,"file_name":"src/commands/shipments/track_shipment_command.rs","is_primary":false,"label":"","line_end":67,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":20,"text":"            return cb"},{"highlight_end":18,"highlight_start":1,"text":"                .execute(\"carrier-tracking-api\", || async {"}]},{"byte_end":2172,"byte_start":2165,"column_end":25,"column_start":18,"expansion":null,"file_name":"src/commands/shipments/track_shipment_command.rs","is_primary":true,"label":"method not found in `&std::sync::Arc<CircuitBreaker>`","line_end":67,"line_start":67,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":18,"text":"                .execute(\"carrier-tracking-api\", || async {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `shipment`\n   --> src/commands/shipments/track_shipment_command.rs:122:9\n    |\n122 |         shipment: &shipment::Model,\n    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shipment`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":4481,"byte_start":4473,"column_end":17,"column_start":9,"expansion":null,"file_name":"src/commands/shipments/track_shipment_command.rs","is_primary":true,"label":null,"line_end":122,"line_start":122,"suggested_replacement":"_shipment","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":17,"highlight_start":9,"text":"        shipment: &shipment::Model,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `shipment`","spans":[{"byte_end":4481,"byte_start":4473,"column_end":17,"column_start":9,"expansion":null,"file_name":"src/commands/shipments/track_shipment_command.rs","is_primary":true,"label":null,"line_end":122,"line_start":122,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":9,"text":"        shipment: &shipment::Model,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `?` couldn't convert the error to `errors::ServiceError`\n  --> src/commands/shipments/update_shipment_command.rs:62:15\n   |\n59 |               .ok_or_else(|| {\n   |  ______________-\n60 | |                 error!(\"Shipment with ID {} not found\", self.shipment_id);\n61 | |                 ServiceError::NotFound\n62 | |             })?\n   | |              -^ unsatisfied trait bound\n   | |______________|\n   |                this can't be annotated with `?` because it has type `Result<_, fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>`\n   |\nnote: `errors::ServiceError` needs to implement `From<fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>`\n  --> src/errors.rs:29:1\n   |\n29 | pub enum ServiceError {\n   | ^^^^^^^^^^^^^^^^^^^^^\n   = help: the trait `From<fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>` is not implemented for `errors::ServiceError`\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n   = help: the following other types implement trait `From<T>`:\n             `errors::ServiceError` implements `From<()>`\n             `errors::ServiceError` implements `From<ValidationErrors>`\n             `errors::ServiceError` implements `From<anyhow::Error>`\n             `errors::ServiceError` implements `From<sea_orm::DbErr>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`errors::ServiceError` needs to implement `From<fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>`","rendered":null,"spans":[{"byte_end":701,"byte_start":680,"column_end":22,"column_start":1,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":1,"text":"pub enum ServiceError {"}]}]},{"children":[],"code":null,"level":"help","message":"the trait `From<fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>` is not implemented for `errors::ServiceError`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `From<T>`:\n  `errors::ServiceError` implements `From<()>`\n  `errors::ServiceError` implements `From<ValidationErrors>`\n  `errors::ServiceError` implements `From<anyhow::Error>`\n  `errors::ServiceError` implements `From<sea_orm::DbErr>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`?` couldn't convert the error to `errors::ServiceError`","spans":[{"byte_end":1851,"byte_start":1707,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/commands/shipments/update_shipment_command.rs","is_primary":false,"label":"this can't be annotated with `?` because it has type `Result<_, fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>`","line_end":62,"line_start":59,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":14,"text":"            .ok_or_else(|| {"},{"highlight_end":75,"highlight_start":1,"text":"                error!(\"Shipment with ID {} not found\", self.shipment_id);"},{"highlight_end":39,"highlight_start":1,"text":"                ServiceError::NotFound"},{"highlight_end":15,"highlight_start":1,"text":"            })?"}]},{"byte_end":1852,"byte_start":1851,"column_end":16,"column_start":15,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of operator `?`","span":{"byte_end":1852,"byte_start":1851,"column_end":16,"column_start":15,"expansion":null,"file_name":"src/commands/shipments/update_shipment_command.rs","is_primary":false,"label":null,"line_end":62,"line_start":62,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":15,"text":"            })?"}]}},"file_name":"src/commands/shipments/update_shipment_command.rs","is_primary":true,"label":"unsatisfied trait bound","line_end":62,"line_start":62,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":15,"text":"            })?"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `updated_shipment`\n  --> src/commands/shipments/update_shipment_command.rs:79:9\n   |\n79 |         updated_shipment: &Shipment,\n   |         ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_updated_shipment`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":2359,"byte_start":2343,"column_end":25,"column_start":9,"expansion":null,"file_name":"src/commands/shipments/update_shipment_command.rs","is_primary":true,"label":null,"line_end":79,"line_start":79,"suggested_replacement":"_updated_shipment","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":25,"highlight_start":9,"text":"        updated_shipment: &Shipment,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `updated_shipment`","spans":[{"byte_end":2359,"byte_start":2343,"column_end":25,"column_start":9,"expansion":null,"file_name":"src/commands/shipments/update_shipment_command.rs","is_primary":true,"label":null,"line_end":79,"line_start":79,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":9,"text":"        updated_shipment: &Shipment,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `?` couldn't convert the error to `errors::ServiceError`\n  --> src/commands/shipments/update_shipment_general_command.rs:67:15\n   |\n64 |               .ok_or_else(|| {\n   |  ______________-\n65 | |                 error!(\"Shipment with ID {} not found\", self.id);\n66 | |                 ServiceError::NotFound\n67 | |             })?\n   | |              -^ unsatisfied trait bound\n   | |______________|\n   |                this can't be annotated with `?` because it has type `Result<_, fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>`\n   |\nnote: `errors::ServiceError` needs to implement `From<fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>`\n  --> src/errors.rs:29:1\n   |\n29 | pub enum ServiceError {\n   | ^^^^^^^^^^^^^^^^^^^^^\n   = help: the trait `From<fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>` is not implemented for `errors::ServiceError`\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n   = help: the following other types implement trait `From<T>`:\n             `errors::ServiceError` implements `From<()>`\n             `errors::ServiceError` implements `From<ValidationErrors>`\n             `errors::ServiceError` implements `From<anyhow::Error>`\n             `errors::ServiceError` implements `From<sea_orm::DbErr>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`errors::ServiceError` needs to implement `From<fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>`","rendered":null,"spans":[{"byte_end":701,"byte_start":680,"column_end":22,"column_start":1,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":1,"text":"pub enum ServiceError {"}]}]},{"children":[],"code":null,"level":"help","message":"the trait `From<fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>` is not implemented for `errors::ServiceError`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `From<T>`:\n  `errors::ServiceError` implements `From<()>`\n  `errors::ServiceError` implements `From<ValidationErrors>`\n  `errors::ServiceError` implements `From<anyhow::Error>`\n  `errors::ServiceError` implements `From<sea_orm::DbErr>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`?` couldn't convert the error to `errors::ServiceError`","spans":[{"byte_end":2203,"byte_start":2068,"column_end":15,"column_start":14,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":false,"label":"this can't be annotated with `?` because it has type `Result<_, fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>`","line_end":67,"line_start":64,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":14,"text":"            .ok_or_else(|| {"},{"highlight_end":66,"highlight_start":1,"text":"                error!(\"Shipment with ID {} not found\", self.id);"},{"highlight_end":39,"highlight_start":1,"text":"                ServiceError::NotFound"},{"highlight_end":15,"highlight_start":1,"text":"            })?"}]},{"byte_end":2204,"byte_start":2203,"column_end":16,"column_start":15,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of operator `?`","span":{"byte_end":2204,"byte_start":2203,"column_end":16,"column_start":15,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":false,"label":null,"line_end":67,"line_start":67,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":15,"text":"            })?"}]}},"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":true,"label":"unsatisfied trait bound","line_end":67,"line_start":67,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":15,"text":"            })?"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/shipments/update_shipment_general_command.rs:78:49\n   |\n78 |             shipment.carrier = ActiveValue::Set(Some(carrier.clone()));\n   |                                ---------------- ^^^^^^^^^^^^^^^^^^^^^ expected `ShippingCarrier`, found `Option<String>`\n   |                                |\n   |                                arguments to this enum variant are incorrect\n   |\n   = note: expected enum `ShippingCarrier`\n              found enum `std::option::Option<std::string::String>`\nhelp: the type constructed contains `std::option::Option<std::string::String>` due to the type of the argument passed\n  --> src/commands/shipments/update_shipment_general_command.rs:78:32\n   |\n78 |             shipment.carrier = ActiveValue::Set(Some(carrier.clone()));\n   |                                ^^^^^^^^^^^^^^^^^---------------------^\n   |                                                 |\n   |                                                 this argument influences the type of `Set`\nnote: tuple variant defined here\n  --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/entity/active_model.rs:45:5\n   |\n45 |     Set(V),\n   |     ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `ShippingCarrier`\n   found enum `std::option::Option<std::string::String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the type constructed contains `std::option::Option<std::string::String>` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":2701,"byte_start":2680,"column_end":70,"column_start":49,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":false,"label":"this argument influences the type of `Set`","line_end":78,"line_start":78,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":49,"text":"            shipment.carrier = ActiveValue::Set(Some(carrier.clone()));"}]},{"byte_end":2702,"byte_start":2663,"column_end":71,"column_start":32,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":true,"label":null,"line_end":78,"line_start":78,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":71,"highlight_start":32,"text":"            shipment.carrier = ActiveValue::Set(Some(carrier.clone()));"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":1380,"byte_start":1377,"column_end":8,"column_start":5,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/entity/active_model.rs","is_primary":true,"label":null,"line_end":45,"line_start":45,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":8,"highlight_start":5,"text":"    Set(V),"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2701,"byte_start":2680,"column_end":70,"column_start":49,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":true,"label":"expected `ShippingCarrier`, found `Option<String>`","line_end":78,"line_start":78,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":49,"text":"            shipment.carrier = ActiveValue::Set(Some(carrier.clone()));"}]},{"byte_end":2679,"byte_start":2663,"column_end":48,"column_start":32,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":78,"line_start":78,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":32,"text":"            shipment.carrier = ActiveValue::Set(Some(carrier.clone()));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/shipments/update_shipment_general_command.rs:81:57\n   |\n81 |             shipment.tracking_number = ActiveValue::Set(Some(tracking_number.clone()));\n   |                                        ---------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `String`, found `Option<String>`\n   |                                        |\n   |                                        arguments to this enum variant are incorrect\n   |\n   = note: expected struct `std::string::String`\n                found enum `std::option::Option<std::string::String>`\nhelp: the type constructed contains `std::option::Option<std::string::String>` due to the type of the argument passed\n  --> src/commands/shipments/update_shipment_general_command.rs:81:40\n   |\n81 |             shipment.tracking_number = ActiveValue::Set(Some(tracking_number.clone()));\n   |                                        ^^^^^^^^^^^^^^^^^-----------------------------^\n   |                                                         |\n   |                                                         this argument influences the type of `Set`\nnote: tuple variant defined here\n  --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/entity/active_model.rs:45:5\n   |\n45 |     Set(V),\n   |     ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `std::string::String`\n     found enum `std::option::Option<std::string::String>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the type constructed contains `std::option::Option<std::string::String>` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":2862,"byte_start":2833,"column_end":86,"column_start":57,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":false,"label":"this argument influences the type of `Set`","line_end":81,"line_start":81,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":86,"highlight_start":57,"text":"            shipment.tracking_number = ActiveValue::Set(Some(tracking_number.clone()));"}]},{"byte_end":2863,"byte_start":2816,"column_end":87,"column_start":40,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":true,"label":null,"line_end":81,"line_start":81,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":87,"highlight_start":40,"text":"            shipment.tracking_number = ActiveValue::Set(Some(tracking_number.clone()));"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":1380,"byte_start":1377,"column_end":8,"column_start":5,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/entity/active_model.rs","is_primary":true,"label":null,"line_end":45,"line_start":45,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":8,"highlight_start":5,"text":"    Set(V),"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2862,"byte_start":2833,"column_end":86,"column_start":57,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":true,"label":"expected `String`, found `Option<String>`","line_end":81,"line_start":81,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":86,"highlight_start":57,"text":"            shipment.tracking_number = ActiveValue::Set(Some(tracking_number.clone()));"}]},{"byte_end":2832,"byte_start":2816,"column_end":56,"column_start":40,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":81,"line_start":81,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":40,"text":"            shipment.tracking_number = ActiveValue::Set(Some(tracking_number.clone()));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/shipments/update_shipment_general_command.rs:84:48\n   |\n84 |             shipment.status = ActiveValue::Set(status.clone());\n   |                               ---------------- ^^^^^^^^^^^^^^ expected `ShipmentStatus`, found `String`\n   |                               |\n   |                               arguments to this enum variant are incorrect\n   |\nhelp: the type constructed contains `std::string::String` due to the type of the argument passed\n  --> src/commands/shipments/update_shipment_general_command.rs:84:31\n   |\n84 |             shipment.status = ActiveValue::Set(status.clone());\n   |                               ^^^^^^^^^^^^^^^^^--------------^\n   |                                                |\n   |                                                this argument influences the type of `Set`\nnote: tuple variant defined here\n  --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/entity/active_model.rs:45:5\n   |\n45 |     Set(V),\n   |     ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `std::string::String` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":2981,"byte_start":2967,"column_end":62,"column_start":48,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":false,"label":"this argument influences the type of `Set`","line_end":84,"line_start":84,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":48,"text":"            shipment.status = ActiveValue::Set(status.clone());"}]},{"byte_end":2982,"byte_start":2950,"column_end":63,"column_start":31,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":true,"label":null,"line_end":84,"line_start":84,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":31,"text":"            shipment.status = ActiveValue::Set(status.clone());"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":1380,"byte_start":1377,"column_end":8,"column_start":5,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/entity/active_model.rs","is_primary":true,"label":null,"line_end":45,"line_start":45,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":8,"highlight_start":5,"text":"    Set(V),"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2981,"byte_start":2967,"column_end":62,"column_start":48,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":true,"label":"expected `ShipmentStatus`, found `String`","line_end":84,"line_start":84,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":48,"text":"            shipment.status = ActiveValue::Set(status.clone());"}]},{"byte_end":2966,"byte_start":2950,"column_end":47,"column_start":31,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":84,"line_start":84,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":31,"text":"            shipment.status = ActiveValue::Set(status.clone());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `estimated_delivery_date` on type `models::shipment::ActiveModel`\n  --> src/commands/shipments/update_shipment_general_command.rs:87:22\n   |\n87 |             shipment.estimated_delivery_date = ActiveValue::Set(Some(estimated_delivery_date.naive_utc()));\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^ unknown field\n   |\nhelp: a field with a similar name exists\n   |\n87 -             shipment.estimated_delivery_date = ActiveValue::Set(Some(estimated_delivery_date.naive_utc()));\n87 +             shipment.estimated_delivery = ActiveValue::Set(Some(estimated_delivery_date.naive_utc()));\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a field with a similar name exists","rendered":null,"spans":[{"byte_end":3117,"byte_start":3094,"column_end":45,"column_start":22,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":true,"label":null,"line_end":87,"line_start":87,"suggested_replacement":"estimated_delivery","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":45,"highlight_start":22,"text":"            shipment.estimated_delivery_date = ActiveValue::Set(Some(estimated_delivery_date.naive_utc()));"}]}]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `estimated_delivery_date` on type `models::shipment::ActiveModel`","spans":[{"byte_end":3117,"byte_start":3094,"column_end":45,"column_start":22,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":true,"label":"unknown field","line_end":87,"line_start":87,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":22,"text":"            shipment.estimated_delivery_date = ActiveValue::Set(Some(estimated_delivery_date.naive_utc()));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `updated_shipment`\n   --> src/commands/shipments/update_shipment_general_command.rs:101:9\n    |\n101 |         updated_shipment: &Shipment,\n    |         ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_updated_shipment`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":3585,"byte_start":3569,"column_end":25,"column_start":9,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":true,"label":null,"line_end":101,"line_start":101,"suggested_replacement":"_updated_shipment","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":25,"highlight_start":9,"text":"        updated_shipment: &Shipment,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `updated_shipment`","spans":[{"byte_end":3585,"byte_start":3569,"column_end":25,"column_start":9,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":true,"label":null,"line_end":101,"line_start":101,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":9,"text":"        updated_shipment: &Shipment,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/shipments/verify_shipment_address_command.rs:52:9\n   |\n52 | /         shipment::Entity::find_by_id(self.shipment_id)\n53 | |             .one(db)\n54 | |             .await\n55 | |             .map_err(|e| {\n...  |\n64 | |                 ServiceError::NotFound\n65 | |             })\n   | |______________^ expected `Result<Model, ServiceError>`, found `Result<Model, ...>`\n   |\n   = note: expected enum `Result<_, errors::ServiceError>`\n              found enum `Result<_, fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `Result<_, errors::ServiceError>`\n   found enum `Result<_, fn(std::string::String) -> errors::ServiceError {errors::ServiceError::NotFound}>`","rendered":null,"spans":[]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1897,"byte_start":1383,"column_end":15,"column_start":9,"expansion":null,"file_name":"src/commands/shipments/verify_shipment_address_command.rs","is_primary":true,"label":"expected `Result<Model, ServiceError>`, found `Result<Model, ...>`","line_end":65,"line_start":52,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":9,"text":"        shipment::Entity::find_by_id(self.shipment_id)"},{"highlight_end":21,"highlight_start":1,"text":"            .one(db)"},{"highlight_end":19,"highlight_start":1,"text":"            .await"},{"highlight_end":27,"highlight_start":1,"text":"            .map_err(|e| {"},{"highlight_end":24,"highlight_start":1,"text":"                error!("},{"highlight_end":62,"highlight_start":1,"text":"                    \"Failed to find shipment with ID {}: {}\","},{"highlight_end":40,"highlight_start":1,"text":"                    self.shipment_id, e"},{"highlight_end":19,"highlight_start":1,"text":"                );"},{"highlight_end":82,"highlight_start":1,"text":"                ServiceError::db_error(format!(\"Failed to find shipment: {}\", e))"},{"highlight_end":16,"highlight_start":1,"text":"            })?"},{"highlight_end":29,"highlight_start":1,"text":"            .ok_or_else(|| {"},{"highlight_end":75,"highlight_start":1,"text":"                error!(\"Shipment with ID {} not found\", self.shipment_id);"},{"highlight_end":39,"highlight_start":1,"text":"                ServiceError::NotFound"},{"highlight_end":15,"highlight_start":1,"text":"            })"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `shipment`\n  --> src/commands/shipments/verify_shipment_address_command.rs:68:36\n   |\n68 |     async fn verify_address(&self, shipment: &shipment::Model) -> Result<bool, ServiceError> {\n   |                                    ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shipment`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":1948,"byte_start":1940,"column_end":44,"column_start":36,"expansion":null,"file_name":"src/commands/shipments/verify_shipment_address_command.rs","is_primary":true,"label":null,"line_end":68,"line_start":68,"suggested_replacement":"_shipment","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":44,"highlight_start":36,"text":"    async fn verify_address(&self, shipment: &shipment::Model) -> Result<bool, ServiceError> {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `shipment`","spans":[{"byte_end":1948,"byte_start":1940,"column_end":44,"column_start":36,"expansion":null,"file_name":"src/commands/shipments/verify_shipment_address_command.rs","is_primary":true,"label":null,"line_end":68,"line_start":68,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":36,"text":"    async fn verify_address(&self, shipment: &shipment::Model) -> Result<bool, ServiceError> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `AddressVerified` found for enum `events::Event` in the current scope\n   --> src/commands/shipments/verify_shipment_address_command.rs:89:20\n    |\n 89 |             Event::AddressVerified(self.shipment_id)\n    |                    ^^^^^^^^^^^^^^^ variant or associated item not found in `events::Event`\n    |\n   ::: src/events/mod.rs:59:1\n    |\n 59 | pub enum Event {\n    | -------------- variant or associated item `AddressVerified` not found for this enum\n    |\nnote: if you're trying to build a new `events::Event`, consider using `events::Event::with_data` which returns `events::Event`\n   --> src/events/mod.rs:294:5\n    |\n294 |     pub fn with_data(data: String) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `events::Event`, consider using `events::Event::with_data` which returns `events::Event`","rendered":null,"spans":[{"byte_end":7385,"byte_start":7347,"column_end":43,"column_start":5,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":294,"line_start":294,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":5,"text":"    pub fn with_data(data: String) -> Self {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `AddressVerified` found for enum `events::Event` in the current scope","spans":[{"byte_end":2702,"byte_start":2687,"column_end":35,"column_start":20,"expansion":null,"file_name":"src/commands/shipments/verify_shipment_address_command.rs","is_primary":true,"label":"variant or associated item not found in `events::Event`","line_end":89,"line_start":89,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":20,"text":"            Event::AddressVerified(self.shipment_id)"}]},{"byte_end":1449,"byte_start":1435,"column_end":15,"column_start":1,"expansion":null,"file_name":"src/events/mod.rs","is_primary":false,"label":"variant or associated item `AddressVerified` not found for this enum","line_end":59,"line_start":59,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"pub enum Event {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `AddressVerificationFailed` found for enum `events::Event` in the current scope\n   --> src/commands/shipments/verify_shipment_address_command.rs:91:20\n    |\n 91 |             Event::AddressVerificationFailed(self.shipment_id)\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `events::Event`\n    |\n   ::: src/events/mod.rs:59:1\n    |\n 59 | pub enum Event {\n    | -------------- variant or associated item `AddressVerificationFailed` not found for this enum\n    |\nnote: if you're trying to build a new `events::Event`, consider using `events::Event::with_data` which returns `events::Event`\n   --> src/events/mod.rs:294:5\n    |\n294 |     pub fn with_data(data: String) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `events::Event`, consider using `events::Event::with_data` which returns `events::Event`","rendered":null,"spans":[{"byte_end":7385,"byte_start":7347,"column_end":43,"column_start":5,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":294,"line_start":294,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":5,"text":"    pub fn with_data(data: String) -> Self {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `AddressVerificationFailed` found for enum `events::Event` in the current scope","spans":[{"byte_end":2782,"byte_start":2757,"column_end":45,"column_start":20,"expansion":null,"file_name":"src/commands/shipments/verify_shipment_address_command.rs","is_primary":true,"label":"variant or associated item not found in `events::Event`","line_end":91,"line_start":91,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":20,"text":"            Event::AddressVerificationFailed(self.shipment_id)"}]},{"byte_end":1449,"byte_start":1435,"column_end":15,"column_start":1,"expansion":null,"file_name":"src/events/mod.rs","is_primary":false,"label":"variant or associated item `AddressVerificationFailed` not found for this enum","line_end":59,"line_start":59,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"pub enum Event {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/workorders/add_note_to_work_order_command.rs:61:32\n   |\n61 |             work_order_id: Set(work_order_id),\n   |                            --- ^^^^^^^^^^^^^ expected `i32`, found `Uuid`\n   |                            |\n   |                            arguments to this enum variant are incorrect\n   |\nhelp: the type constructed contains `uuid::Uuid` due to the type of the argument passed\n  --> src/commands/workorders/add_note_to_work_order_command.rs:61:28\n   |\n61 |             work_order_id: Set(work_order_id),\n   |                            ^^^^-------------^\n   |                                |\n   |                                this argument influences the type of `Set`\nnote: tuple variant defined here\n  --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/entity/active_model.rs:45:5\n   |\n45 |     Set(V),\n   |     ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `uuid::Uuid` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":2117,"byte_start":2104,"column_end":45,"column_start":32,"expansion":null,"file_name":"src/commands/workorders/add_note_to_work_order_command.rs","is_primary":false,"label":"this argument influences the type of `Set`","line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":32,"text":"            work_order_id: Set(work_order_id),"}]},{"byte_end":2118,"byte_start":2100,"column_end":46,"column_start":28,"expansion":null,"file_name":"src/commands/workorders/add_note_to_work_order_command.rs","is_primary":true,"label":null,"line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":28,"text":"            work_order_id: Set(work_order_id),"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":1380,"byte_start":1377,"column_end":8,"column_start":5,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/entity/active_model.rs","is_primary":true,"label":null,"line_end":45,"line_start":45,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":8,"highlight_start":5,"text":"    Set(V),"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2117,"byte_start":2104,"column_end":45,"column_start":32,"expansion":null,"file_name":"src/commands/workorders/add_note_to_work_order_command.rs","is_primary":true,"label":"expected `i32`, found `Uuid`","line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":32,"text":"            work_order_id: Set(work_order_id),"}]},{"byte_end":2103,"byte_start":2100,"column_end":31,"column_start":28,"expansion":null,"file_name":"src/commands/workorders/add_note_to_work_order_command.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":28,"text":"            work_order_id: Set(work_order_id),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/commands/workorders/add_note_to_work_order_command.rs:85:61\n    |\n 85 |             .send(Event::OrderNoteAdded(self.work_order_id, note.id))\n    |                   ---------------------                     ^^^^^^^ expected `Uuid`, found `i32`\n    |                   |\n    |                   arguments to this enum variant are incorrect\n    |\nnote: tuple variant defined here\n   --> src/events/mod.rs:208:5\n    |\n208 |     OrderNoteAdded(Uuid, Uuid),\n    |     ^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":5312,"byte_start":5298,"column_end":19,"column_start":5,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":208,"line_start":208,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    OrderNoteAdded(Uuid, Uuid),"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2856,"byte_start":2849,"column_end":68,"column_start":61,"expansion":null,"file_name":"src/commands/workorders/add_note_to_work_order_command.rs","is_primary":true,"label":"expected `Uuid`, found `i32`","line_end":85,"line_start":85,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":68,"highlight_start":61,"text":"            .send(Event::OrderNoteAdded(self.work_order_id, note.id))"}]},{"byte_end":2828,"byte_start":2807,"column_end":40,"column_start":19,"expansion":null,"file_name":"src/commands/workorders/add_note_to_work_order_command.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":85,"line_start":85,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":19,"text":"            .send(Event::OrderNoteAdded(self.work_order_id, note.id))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `assignee_id` on type `models::work_order::ActiveModel`\n  --> src/commands/workorders/assign_work_order_command.rs:69:20\n   |\n69 |         work_order.assignee_id = Set(Some(assignee_id));\n   |                    ^^^^^^^^^^^ unknown field\n   |\nhelp: a field with a similar name exists\n   |\n69 -         work_order.assignee_id = Set(Some(assignee_id));\n69 +         work_order.assigned_to = Set(Some(assignee_id));\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a field with a similar name exists","rendered":null,"spans":[{"byte_end":2532,"byte_start":2521,"column_end":31,"column_start":20,"expansion":null,"file_name":"src/commands/workorders/assign_work_order_command.rs","is_primary":true,"label":null,"line_end":69,"line_start":69,"suggested_replacement":"assigned_to","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":31,"highlight_start":20,"text":"        work_order.assignee_id = Set(Some(assignee_id));"}]}]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `assignee_id` on type `models::work_order::ActiveModel`","spans":[{"byte_end":2532,"byte_start":2521,"column_end":31,"column_start":20,"expansion":null,"file_name":"src/commands/workorders/assign_work_order_command.rs","is_primary":true,"label":"unknown field","line_end":69,"line_start":69,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":20,"text":"        work_order.assignee_id = Set(Some(assignee_id));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `Date` found for enum `inventory_item_entity::Column` in the current scope\n   --> src/commands/workorders/calculate_average_cost_command.rs:140:56\n    |\n140 |                         inventory_item_entity::Column::Date.between(self.start_date, self.end_date),\n    |                                                        ^^^^ variant or associated item not found in `inventory_item_entity::Column`\n    |\n   ::: src/models/inventory_item_entity.rs:7:35\n    |\n  7 | #[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]\n    |                                   ----------------- variant or associated item `Date` not found for this enum\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `Date` found for enum `inventory_item_entity::Column` in the current scope","spans":[{"byte_end":5096,"byte_start":5092,"column_end":60,"column_start":56,"expansion":null,"file_name":"src/commands/workorders/calculate_average_cost_command.rs","is_primary":true,"label":"variant or associated item not found in `inventory_item_entity::Column`","line_end":140,"line_start":140,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":56,"text":"                        inventory_item_entity::Column::Date.between(self.start_date, self.end_date),"}]},{"byte_end":194,"byte_start":177,"column_end":52,"column_start":35,"expansion":{"def_site_span":{"byte_end":3543,"byte_start":3482,"column_end":62,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-macros-1.1.14/src/lib.rs","is_primary":false,"label":null,"line_end":138,"line_start":138,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":1,"text":"pub fn derive_entity_model(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(DeriveEntityModel)]","span":{"byte_end":194,"byte_start":177,"column_end":52,"column_start":35,"expansion":null,"file_name":"src/models/inventory_item_entity.rs","is_primary":false,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":35,"text":"#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]"}]}},"file_name":"src/models/inventory_item_entity.rs","is_primary":false,"label":"variant or associated item `Date` not found for this enum","line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":35,"text":"#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no function or associated item named `from_f64` found for struct `bigdecimal::BigDecimal` in the current scope\n   --> src/commands/workorders/calculate_cogs_command.rs:146:77\n    |\n146 |                 Ok::<BigDecimal, ServiceError>(component_cost * BigDecimal::from_f64(item.quantity).unwrap_or(BigDecimal::from(0)))\n    |                                                                             ^^^^^^^^ function or associated item not found in `bigdecimal::BigDecimal`\n    |\nnote: if you're trying to build a new `bigdecimal::BigDecimal` consider using one of the following associated functions:\n      bigdecimal::BigDecimal::new\n      bigdecimal::BigDecimal::parse_bytes\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bigdecimal-0.3.1/src/lib.rs:161:5\n    |\n161 |     pub fn new(digits: BigInt, scale: i64) -> BigDecimal {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n182 |     pub fn parse_bytes(buf: &[u8], radix: u32) -> Option<BigDecimal> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: items from traits can only be used if the trait is in scope\nhelp: trait `FromPrimitive` which provides `from_f64` is implemented but not in scope; perhaps you want to import it\n    |\n  1 + use bigdecimal::FromPrimitive;\n    |\nhelp: there is an associated function `from_i64` with a similar name\n    |\n146 -                 Ok::<BigDecimal, ServiceError>(component_cost * BigDecimal::from_f64(item.quantity).unwrap_or(BigDecimal::from(0)))\n146 +                 Ok::<BigDecimal, ServiceError>(component_cost * BigDecimal::from_i64(item.quantity).unwrap_or(BigDecimal::from(0)))\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `bigdecimal::BigDecimal` consider using one of the following associated functions:\nbigdecimal::BigDecimal::new\nbigdecimal::BigDecimal::parse_bytes","rendered":null,"spans":[{"byte_end":4404,"byte_start":4352,"column_end":57,"column_start":5,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bigdecimal-0.3.1/src/lib.rs","is_primary":true,"label":null,"line_end":161,"line_start":161,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":5,"text":"    pub fn new(digits: BigInt, scale: i64) -> BigDecimal {"}]},{"byte_end":5040,"byte_start":4976,"column_end":69,"column_start":5,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bigdecimal-0.3.1/src/lib.rs","is_primary":true,"label":null,"line_end":182,"line_start":182,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":69,"highlight_start":5,"text":"    pub fn parse_bytes(buf: &[u8], radix: u32) -> Option<BigDecimal> {"}]}]},{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `FromPrimitive` which provides `from_f64` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use bigdecimal::FromPrimitive;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use uuid::Uuid;"}]}]},{"children":[],"code":null,"level":"help","message":"there is an associated function `from_i64` with a similar name","rendered":null,"spans":[{"byte_end":5226,"byte_start":5218,"column_end":85,"column_start":77,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":true,"label":null,"line_end":146,"line_start":146,"suggested_replacement":"from_i64","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":85,"highlight_start":77,"text":"                Ok::<BigDecimal, ServiceError>(component_cost * BigDecimal::from_f64(item.quantity).unwrap_or(BigDecimal::from(0)))"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no function or associated item named `from_f64` found for struct `bigdecimal::BigDecimal` in the current scope","spans":[{"byte_end":5226,"byte_start":5218,"column_end":85,"column_start":77,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":true,"label":"function or associated item not found in `bigdecimal::BigDecimal`","line_end":146,"line_start":146,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":85,"highlight_start":77,"text":"                Ok::<BigDecimal, ServiceError>(component_cost * BigDecimal::from_f64(item.quantity).unwrap_or(BigDecimal::from(0)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/commands/workorders/calculate_cogs_command.rs:176:35\n    |\n176 |             Some(inventory) => Ok(inventory.unit_cost),\n    |                                -- ^^^^^^^^^^^^^^^^^^^ expected `BigDecimal`, found `Decimal`\n    |                                |\n    |                                arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `rust_decimal::Decimal` due to the type of the argument passed\n   --> src/commands/workorders/calculate_cogs_command.rs:176:32\n    |\n176 |             Some(inventory) => Ok(inventory.unit_cost),\n    |                                ^^^-------------------^\n    |                                   |\n    |                                   this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/result.rs:552:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `rust_decimal::Decimal` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":6286,"byte_start":6267,"column_end":54,"column_start":35,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":176,"line_start":176,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":35,"text":"            Some(inventory) => Ok(inventory.unit_cost),"}]},{"byte_end":6287,"byte_start":6264,"column_end":55,"column_start":32,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":true,"label":null,"line_end":176,"line_start":176,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":32,"text":"            Some(inventory) => Ok(inventory.unit_cost),"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":20923,"byte_start":20921,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/result.rs","is_primary":true,"label":null,"line_end":552,"line_start":552,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":6286,"byte_start":6267,"column_end":54,"column_start":35,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":true,"label":"expected `BigDecimal`, found `Decimal`","line_end":176,"line_start":176,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":35,"text":"            Some(inventory) => Ok(inventory.unit_cost),"}]},{"byte_end":6266,"byte_start":6264,"column_end":34,"column_start":32,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":176,"line_start":176,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":32,"text":"            Some(inventory) => Ok(inventory.unit_cost),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0560]: struct `CalculateCOGSCommand` has no field named `work_order_id`\n   --> src/commands/workorders/calculate_monthly_cogs_command.rs:172:21\n    |\n172 |                     work_order_id: work_order.id, work_order_number: work_order.number.clone(),\n    |                     ^^^^^^^^^^^^^ `CalculateCOGSCommand` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"all struct fields are already assigned","rendered":null,"spans":[]}],"code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","message":"struct `CalculateCOGSCommand` has no field named `work_order_id`","spans":[{"byte_end":6150,"byte_start":6137,"column_end":34,"column_start":21,"expansion":null,"file_name":"src/commands/workorders/calculate_monthly_cogs_command.rs","is_primary":true,"label":"`CalculateCOGSCommand` does not have this field","line_end":172,"line_start":172,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"                    work_order_id: work_order.id, work_order_number: work_order.number.clone(),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `number` on type `models::work_order::Model`\n   --> src/commands/workorders/calculate_monthly_cogs_command.rs:172:81\n    |\n172 |                     work_order_id: work_order.id, work_order_number: work_order.number.clone(),\n    |                                                                                 ^^^^^^ unknown field\n    |\n    = note: available fields are: `id`, `title`, `description`, `status`, `priority` ... and 8 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `id`, `title`, `description`, `status`, `priority` ... and 8 others","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `number` on type `models::work_order::Model`","spans":[{"byte_end":6203,"byte_start":6197,"column_end":87,"column_start":81,"expansion":null,"file_name":"src/commands/workorders/calculate_monthly_cogs_command.rs","is_primary":true,"label":"unknown field","line_end":172,"line_start":172,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":87,"highlight_start":81,"text":"                    work_order_id: work_order.id, work_order_number: work_order.number.clone(),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> src/commands/workorders/calculate_monthly_cogs_command.rs:175:56\n    |\n175 |                     .execute(db_pool.clone(), Arc::new(EventSender::new()))\n    |                                                        ^^^^^^^^^^^^^^^^-- argument #1 of type `tokio::sync::mpsc::Sender<events::Event>` is missing\n    |\nnote: associated function defined here\n   --> src/events/mod.rs:44:12\n    |\n 44 |     pub fn new(sender: mpsc::Sender<Event>) -> Self {\n    |            ^^^ ---------------------------\nhelp: provide the argument\n    |\n175 |                     .execute(db_pool.clone(), Arc::new(EventSender::new(/* tokio::sync::mpsc::Sender<events::Event> */)))\n    |                                                                         ++++++++++++++++++++++++++++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":1042,"byte_start":1015,"column_end":43,"column_start":16,"expansion":null,"file_name":"src/events/mod.rs","is_primary":false,"label":"","line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":16,"text":"    pub fn new(sender: mpsc::Sender<Event>) -> Self {"}]},{"byte_end":1014,"byte_start":1011,"column_end":15,"column_start":12,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":12,"text":"    pub fn new(sender: mpsc::Sender<Event>) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"provide the argument","rendered":null,"spans":[{"byte_end":6329,"byte_start":6327,"column_end":74,"column_start":72,"expansion":null,"file_name":"src/commands/workorders/calculate_monthly_cogs_command.rs","is_primary":true,"label":null,"line_end":175,"line_start":175,"suggested_replacement":"(/* tokio::sync::mpsc::Sender<events::Event> */)","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":74,"highlight_start":72,"text":"                    .execute(db_pool.clone(), Arc::new(EventSender::new()))"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this function takes 1 argument but 0 arguments were supplied","spans":[{"byte_end":6329,"byte_start":6327,"column_end":74,"column_start":72,"expansion":null,"file_name":"src/commands/workorders/calculate_monthly_cogs_command.rs","is_primary":false,"label":"argument #1 of type `tokio::sync::mpsc::Sender<events::Event>` is missing","line_end":175,"line_start":175,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":74,"highlight_start":72,"text":"                    .execute(db_pool.clone(), Arc::new(EventSender::new()))"}]},{"byte_end":6327,"byte_start":6311,"column_end":72,"column_start":56,"expansion":null,"file_name":"src/commands/workorders/calculate_monthly_cogs_command.rs","is_primary":true,"label":null,"line_end":175,"line_start":175,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":72,"highlight_start":56,"text":"                    .execute(db_pool.clone(), Arc::new(EventSender::new()))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0560]: struct `cog_entries::ActiveModel` has no field named `average_cogs`\n   --> src/commands/workorders/calculate_monthly_cogs_command.rs:224:13\n    |\n224 |             average_cogs: sea_orm::ActiveValue::Set(RustDecimal::from_str(&result.average_cogs.to_string()).unwrap_or(RustDecimal::ZERO)),\n    |             ^^^^^^^^^^^^ unknown field\n    |\nhelp: a field with a similar name exists\n    |\n224 -             average_cogs: sea_orm::ActiveValue::Set(RustDecimal::from_str(&result.average_cogs.to_string()).unwrap_or(RustDecimal::ZERO)),\n224 +             average_cost: sea_orm::ActiveValue::Set(RustDecimal::from_str(&result.average_cogs.to_string()).unwrap_or(RustDecimal::ZERO)),\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a field with a similar name exists","rendered":null,"spans":[{"byte_end":8100,"byte_start":8088,"column_end":25,"column_start":13,"expansion":null,"file_name":"src/commands/workorders/calculate_monthly_cogs_command.rs","is_primary":true,"label":null,"line_end":224,"line_start":224,"suggested_replacement":"average_cost","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":25,"highlight_start":13,"text":"            average_cogs: sea_orm::ActiveValue::Set(RustDecimal::from_str(&result.average_cogs.to_string()).unwrap_or(RustDecimal::ZERO)),"}]}]}],"code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","message":"struct `cog_entries::ActiveModel` has no field named `average_cogs`","spans":[{"byte_end":8100,"byte_start":8088,"column_end":25,"column_start":13,"expansion":null,"file_name":"src/commands/workorders/calculate_monthly_cogs_command.rs","is_primary":true,"label":"unknown field","line_end":224,"line_start":224,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":13,"text":"            average_cogs: sea_orm::ActiveValue::Set(RustDecimal::from_str(&result.average_cogs.to_string()).unwrap_or(RustDecimal::ZERO)),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0560]: struct `cog_entries::ActiveModel` has no field named `quantity_produced`\n   --> src/commands/workorders/calculate_monthly_cogs_command.rs:225:13\n    |\n225 |             quantity_produced: sea_orm::ActiveValue::Set(result.quantity_produced),\n    |             ^^^^^^^^^^^^^^^^^ `cog_entries::ActiveModel` does not have this field\n    |\n    = note: available fields are: `id`, `product`, `quantity_sold`, `average_cost`, `ending_inventory_quantity` ... and 20 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `id`, `product`, `quantity_sold`, `average_cost`, `ending_inventory_quantity` ... and 20 others","rendered":null,"spans":[]}],"code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","message":"struct `cog_entries::ActiveModel` has no field named `quantity_produced`","spans":[{"byte_end":8244,"byte_start":8227,"column_end":30,"column_start":13,"expansion":null,"file_name":"src/commands/workorders/calculate_monthly_cogs_command.rs","is_primary":true,"label":"`cog_entries::ActiveModel` does not have this field","line_end":225,"line_start":225,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":13,"text":"            quantity_produced: sea_orm::ActiveValue::Set(result.quantity_produced),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0560]: struct `cog_entries::ActiveModel` has no field named `cogs_trend`\n   --> src/commands/workorders/calculate_monthly_cogs_command.rs:226:13\n    |\n226 |             cogs_trend: sea_orm::ActiveValue::Set(RustDecimal::from_str(&result.cogs_trend.to_string()).unwrap_or(RustDecimal::ZERO)),\n    |             ^^^^^^^^^^ `cog_entries::ActiveModel` does not have this field\n    |\n    = note: available fields are: `id`, `product`, `quantity_sold`, `average_cost`, `ending_inventory_quantity` ... and 20 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `id`, `product`, `quantity_sold`, `average_cost`, `ending_inventory_quantity` ... and 20 others","rendered":null,"spans":[]}],"code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","message":"struct `cog_entries::ActiveModel` has no field named `cogs_trend`","spans":[{"byte_end":8321,"byte_start":8311,"column_end":23,"column_start":13,"expansion":null,"file_name":"src/commands/workorders/calculate_monthly_cogs_command.rs","is_primary":true,"label":"`cog_entries::ActiveModel` does not have this field","line_end":226,"line_start":226,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":13,"text":"            cogs_trend: sea_orm::ActiveValue::Set(RustDecimal::from_str(&result.cogs_trend.to_string()).unwrap_or(RustDecimal::ZERO)),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `timeout`\n   --> src/db.rs:107:17\n    |\n107 |     if let Some(timeout) = config.statement_timeout {\n    |                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_timeout`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":3273,"byte_start":3266,"column_end":24,"column_start":17,"expansion":null,"file_name":"src/db.rs","is_primary":true,"label":null,"line_end":107,"line_start":107,"suggested_replacement":"_timeout","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":24,"highlight_start":17,"text":"    if let Some(timeout) = config.statement_timeout {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `timeout`","spans":[{"byte_end":3273,"byte_start":3266,"column_end":24,"column_start":17,"expansion":null,"file_name":"src/db.rs","is_primary":true,"label":null,"line_end":107,"line_start":107,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":17,"text":"    if let Some(timeout) = config.statement_timeout {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `item_id`\n   --> src/events/mod.rs:360:17\n    |\n360 |                 item_id,\n    |                 ^^^^^^^ help: try ignoring the field: `item_id: _`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"try ignoring the field","rendered":null,"spans":[{"byte_end":9636,"byte_start":9629,"column_end":24,"column_start":17,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":360,"line_start":360,"suggested_replacement":"item_id: _","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":24,"highlight_start":17,"text":"                item_id,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `item_id`","spans":[{"byte_end":9636,"byte_start":9629,"column_end":24,"column_start":17,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":360,"line_start":360,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":17,"text":"                item_id,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `quantity`\n   --> src/events/mod.rs:361:17\n    |\n361 |                 quantity,\n    |                 ^^^^^^^^ help: try ignoring the field: `quantity: _`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"try ignoring the field","rendered":null,"spans":[{"byte_end":9662,"byte_start":9654,"column_end":25,"column_start":17,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":361,"line_start":361,"suggested_replacement":"quantity: _","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":25,"highlight_start":17,"text":"                quantity,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `quantity`","spans":[{"byte_end":9662,"byte_start":9654,"column_end":25,"column_start":17,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":361,"line_start":361,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":17,"text":"                quantity,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `partial`\n   --> src/events/mod.rs:400:17\n    |\n400 |                 partial,\n    |                 ^^^^^^^ help: try ignoring the field: `partial: _`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"try ignoring the field","rendered":null,"spans":[{"byte_end":11115,"byte_start":11108,"column_end":24,"column_start":17,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":400,"line_start":400,"suggested_replacement":"partial: _","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":24,"highlight_start":17,"text":"                partial,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `partial`","spans":[{"byte_end":11115,"byte_start":11108,"column_end":24,"column_start":17,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":400,"line_start":400,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":17,"text":"                partial,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `transaction_id`\n   --> src/events/mod.rs:492:5\n    |\n492 |     transaction_id: Uuid,\n    |     ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_transaction_id`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":14288,"byte_start":14274,"column_end":19,"column_start":5,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":492,"line_start":492,"suggested_replacement":"_transaction_id","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":19,"highlight_start":5,"text":"    transaction_id: Uuid,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `transaction_id`","spans":[{"byte_end":14288,"byte_start":14274,"column_end":19,"column_start":5,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":492,"line_start":492,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"    transaction_id: Uuid,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `reference_number`\n   --> src/events/mod.rs:493:5\n    |\n493 |     reference_number: Option<&str>,\n    |     ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_reference_number`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":14316,"byte_start":14300,"column_end":21,"column_start":5,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":493,"line_start":493,"suggested_replacement":"_reference_number","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":21,"highlight_start":5,"text":"    reference_number: Option<&str>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `reference_number`","spans":[{"byte_end":14316,"byte_start":14300,"column_end":21,"column_start":5,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":493,"line_start":493,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":5,"text":"    reference_number: Option<&str>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/handlers/orders.rs:266:19\n    |\n266 |         return Ok(Json(ApiResponse::validation_errors(errors)));\n    |                -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(StatusCode, Json<ApiResponse<...>>)`, found `Json<ApiResponse<_>>`\n    |                |\n    |                arguments to this enum variant are incorrect\n    |\n    = note: expected tuple `(http::StatusCode, axum::Json<ApiResponse<handlers::orders::OrderResponse>>)`\n              found struct `axum::Json<ApiResponse<_>>`\nhelp: the type constructed contains `axum::Json<ApiResponse<_>>` due to the type of the argument passed\n   --> src/handlers/orders.rs:266:16\n    |\n266 |         return Ok(Json(ApiResponse::validation_errors(errors)));\n    |                ^^^--------------------------------------------^\n    |                   |\n    |                   this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/result.rs:552:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected tuple `(http::StatusCode, axum::Json<ApiResponse<handlers::orders::OrderResponse>>)`\n  found struct `axum::Json<ApiResponse<_>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the type constructed contains `axum::Json<ApiResponse<_>>` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":9424,"byte_start":9380,"column_end":63,"column_start":19,"expansion":null,"file_name":"src/handlers/orders.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":266,"line_start":266,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":19,"text":"        return Ok(Json(ApiResponse::validation_errors(errors)));"}]},{"byte_end":9425,"byte_start":9377,"column_end":64,"column_start":16,"expansion":null,"file_name":"src/handlers/orders.rs","is_primary":true,"label":null,"line_end":266,"line_start":266,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":64,"highlight_start":16,"text":"        return Ok(Json(ApiResponse::validation_errors(errors)));"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":20923,"byte_start":20921,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/result.rs","is_primary":true,"label":null,"line_end":552,"line_start":552,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":9424,"byte_start":9380,"column_end":63,"column_start":19,"expansion":null,"file_name":"src/handlers/orders.rs","is_primary":true,"label":"expected `(StatusCode, Json<ApiResponse<...>>)`, found `Json<ApiResponse<_>>`","line_end":266,"line_start":266,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":19,"text":"        return Ok(Json(ApiResponse::validation_errors(errors)));"}]},{"byte_end":9379,"byte_start":9377,"column_end":18,"column_start":16,"expansion":null,"file_name":"src/handlers/orders.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":266,"line_start":266,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":16,"text":"        return Ok(Json(ApiResponse::validation_errors(errors)));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0614]: type `uuid::Uuid` cannot be dereferenced\n   --> src/handlers/orders.rs:404:25\n    |\n404 |     match svc.get_order(*id).await? {\n    |                         ^^^ can't be dereferenced\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0614","explanation":"Attempted to dereference a variable which cannot be dereferenced.\n\nErroneous code example:\n\n```compile_fail,E0614\nlet y = 0u32;\n*y; // error: type `u32` cannot be dereferenced\n```\n\nOnly types implementing `std::ops::Deref` can be dereferenced (such as `&T`).\nExample:\n\n```\nlet y = 0u32;\nlet x = &y;\n// So here, `x` is a `&u32`, so we can dereference it:\n*x; // ok!\n```\n"},"level":"error","message":"type `uuid::Uuid` cannot be dereferenced","spans":[{"byte_end":15181,"byte_start":15178,"column_end":28,"column_start":25,"expansion":null,"file_name":"src/handlers/orders.rs","is_primary":true,"label":"can't be dereferenced","line_end":404,"line_start":404,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":25,"text":"    match svc.get_order(*id).await? {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `total_price`\n   --> src/handlers/orders.rs:692:9\n    |\n692 |     let total_price = unit_price * rust_decimal::Decimal::from(request.quantity);\n    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_total_price`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":26242,"byte_start":26231,"column_end":20,"column_start":9,"expansion":null,"file_name":"src/handlers/orders.rs","is_primary":true,"label":null,"line_end":692,"line_start":692,"suggested_replacement":"_total_price","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":20,"highlight_start":9,"text":"    let total_price = unit_price * rust_decimal::Decimal::from(request.quantity);"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `total_price`","spans":[{"byte_end":26242,"byte_start":26231,"column_end":20,"column_start":9,"expansion":null,"file_name":"src/handlers/orders.rs","is_primary":true,"label":null,"line_end":692,"line_start":692,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":9,"text":"    let total_price = unit_price * rust_decimal::Decimal::from(request.quantity);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `payload`\n   --> src/handlers/inventory.rs:415:10\n    |\n415 |     Json(payload): Json<serde_json::Value>,\n    |          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_payload`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":14350,"byte_start":14343,"column_end":17,"column_start":10,"expansion":null,"file_name":"src/handlers/inventory.rs","is_primary":true,"label":null,"line_end":415,"line_start":415,"suggested_replacement":"_payload","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":17,"highlight_start":10,"text":"    Json(payload): Json<serde_json::Value>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `payload`","spans":[{"byte_end":14350,"byte_start":14343,"column_end":17,"column_start":10,"expansion":null,"file_name":"src/handlers/inventory.rs","is_primary":true,"label":null,"line_end":415,"line_start":415,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":10,"text":"    Json(payload): Json<serde_json::Value>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `filters`\n   --> src/handlers/inventory.rs:474:11\n    |\n474 |     Query(filters): Query<InventoryFilters>,\n    |           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_filters`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":16254,"byte_start":16247,"column_end":18,"column_start":11,"expansion":null,"file_name":"src/handlers/inventory.rs","is_primary":true,"label":null,"line_end":474,"line_start":474,"suggested_replacement":"_filters","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":18,"highlight_start":11,"text":"    Query(filters): Query<InventoryFilters>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `filters`","spans":[{"byte_end":16254,"byte_start":16247,"column_end":18,"column_start":11,"expansion":null,"file_name":"src/handlers/inventory.rs","is_primary":true,"label":null,"line_end":474,"line_start":474,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":11,"text":"    Query(filters): Query<InventoryFilters>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `cash_sales` on type `AppServices`\n  --> src/handlers/cash_sales.rs:34:10\n   |\n34 |         .cash_sales\n   |          ^^^^^^^^^^ unknown field\n   |\n   = note: available fields are: `product_catalog`, `cart`, `checkout`, `agentic_checkout`, `customer`, `order`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `product_catalog`, `cart`, `checkout`, `agentic_checkout`, `customer`, `order`","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `cash_sales` on type `AppServices`","spans":[{"byte_end":771,"byte_start":761,"column_end":20,"column_start":10,"expansion":null,"file_name":"src/handlers/cash_sales.rs","is_primary":true,"label":"unknown field","line_end":34,"line_start":34,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":10,"text":"        .cash_sales"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `state`\n  --> src/handlers/users.rs:97:11\n   |\n97 |     State(state): State<Arc<AppState>>,\n   |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":2620,"byte_start":2615,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":97,"line_start":97,"suggested_replacement":"_state","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":11,"text":"    State(state): State<Arc<AppState>>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `state`","spans":[{"byte_end":2620,"byte_start":2615,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":97,"line_start":97,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":11,"text":"    State(state): State<Arc<AppState>>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `state`\n   --> src/handlers/users.rs:137:11\n    |\n137 |     State(state): State<Arc<AppState>>,\n    |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":4010,"byte_start":4005,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":137,"line_start":137,"suggested_replacement":"_state","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":11,"text":"    State(state): State<Arc<AppState>>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `state`","spans":[{"byte_end":4010,"byte_start":4005,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":137,"line_start":137,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":11,"text":"    State(state): State<Arc<AppState>>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `state`\n   --> src/handlers/users.rs:184:11\n    |\n184 |     State(state): State<Arc<AppState>>,\n    |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":5822,"byte_start":5817,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":184,"line_start":184,"suggested_replacement":"_state","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":11,"text":"    State(state): State<Arc<AppState>>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `state`","spans":[{"byte_end":5822,"byte_start":5817,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":184,"line_start":184,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":11,"text":"    State(state): State<Arc<AppState>>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `state`\n   --> src/handlers/users.rs:223:11\n    |\n223 |     State(state): State<Arc<AppState>>,\n    |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":7180,"byte_start":7175,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":223,"line_start":223,"suggested_replacement":"_state","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":11,"text":"    State(state): State<Arc<AppState>>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `state`","spans":[{"byte_end":7180,"byte_start":7175,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":223,"line_start":223,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":11,"text":"    State(state): State<Arc<AppState>>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `state`\n   --> src/handlers/users.rs:259:11\n    |\n259 |     State(state): State<Arc<AppState>>,\n    |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":8549,"byte_start":8544,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":259,"line_start":259,"suggested_replacement":"_state","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":11,"text":"    State(state): State<Arc<AppState>>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `state`","spans":[{"byte_end":8549,"byte_start":8544,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":259,"line_start":259,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":11,"text":"    State(state): State<Arc<AppState>>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `state`\n   --> src/handlers/users.rs:323:11\n    |\n323 |     State(state): State<Arc<AppState>>,\n    |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":10906,"byte_start":10901,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":323,"line_start":323,"suggested_replacement":"_state","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":11,"text":"    State(state): State<Arc<AppState>>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `state`","spans":[{"byte_end":10906,"byte_start":10901,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":323,"line_start":323,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":11,"text":"    State(state): State<Arc<AppState>>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `state`\n   --> src/handlers/users.rs:359:11\n    |\n359 |     State(state): State<Arc<AppState>>,\n    |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":12150,"byte_start":12145,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":359,"line_start":359,"suggested_replacement":"_state","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":11,"text":"    State(state): State<Arc<AppState>>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `state`","spans":[{"byte_end":12150,"byte_start":12145,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/handlers/users.rs","is_primary":true,"label":null,"line_end":359,"line_start":359,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":11,"text":"    State(state): State<Arc<AppState>>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `state`\n   --> src/handlers/commerce/checkout.rs:117:11\n    |\n117 |     State(state): State<Arc<AppState>>,\n    |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":3634,"byte_start":3629,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/handlers/commerce/checkout.rs","is_primary":true,"label":null,"line_end":117,"line_start":117,"suggested_replacement":"_state","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":11,"text":"    State(state): State<Arc<AppState>>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `state`","spans":[{"byte_end":3634,"byte_start":3629,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/handlers/commerce/checkout.rs","is_primary":true,"label":null,"line_end":117,"line_start":117,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":11,"text":"    State(state): State<Arc<AppState>>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0559]: variant `ApiError::InternalServerError` has no field named `message`\n  --> src/handlers/commerce/agentic_checkout.rs:67:13\n   |\n67 |             message: format!(\"Serialization error: {}\", e),\n   |             ^^^^^^^ `ApiError::InternalServerError` does not have this field\n   |\n   = note: all struct fields are already assigned\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"all struct fields are already assigned","rendered":null,"spans":[]}],"code":{"code":"E0559","explanation":"An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"},"level":"error","message":"variant `ApiError::InternalServerError` has no field named `message`","spans":[{"byte_end":2276,"byte_start":2269,"column_end":20,"column_start":13,"expansion":null,"file_name":"src/handlers/commerce/agentic_checkout.rs","is_primary":true,"label":"`ApiError::InternalServerError` does not have this field","line_end":67,"line_start":67,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":13,"text":"            message: format!(\"Serialization error: {}\", e),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0559]: variant `ApiError::InternalServerError` has no field named `message`\n  --> src/handlers/commerce/agentic_checkout.rs:73:13\n   |\n73 |             message: format!(\"Response build error: {}\", e),\n   |             ^^^^^^^ `ApiError::InternalServerError` does not have this field\n   |\n   = note: all struct fields are already assigned\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"all struct fields are already assigned","rendered":null,"spans":[]}],"code":{"code":"E0559","explanation":"An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"},"level":"error","message":"variant `ApiError::InternalServerError` has no field named `message`","spans":[{"byte_end":2446,"byte_start":2439,"column_end":20,"column_start":13,"expansion":null,"file_name":"src/handlers/commerce/agentic_checkout.rs","is_primary":true,"label":"`ApiError::InternalServerError` does not have this field","line_end":73,"line_start":73,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":13,"text":"            message: format!(\"Response build error: {}\", e),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0559]: variant `ApiError::InternalServerError` has no field named `message`\n   --> src/handlers/commerce/agentic_checkout.rs:164:13\n    |\n164 |             message: format!(\"Serialization error: {}\", e),\n    |             ^^^^^^^ `ApiError::InternalServerError` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"all struct fields are already assigned","rendered":null,"spans":[]}],"code":{"code":"E0559","explanation":"An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"},"level":"error","message":"variant `ApiError::InternalServerError` has no field named `message`","spans":[{"byte_end":5650,"byte_start":5643,"column_end":20,"column_start":13,"expansion":null,"file_name":"src/handlers/commerce/agentic_checkout.rs","is_primary":true,"label":"`ApiError::InternalServerError` does not have this field","line_end":164,"line_start":164,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":13,"text":"            message: format!(\"Serialization error: {}\", e),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0559]: variant `ApiError::InternalServerError` has no field named `message`\n   --> src/handlers/commerce/agentic_checkout.rs:172:13\n    |\n172 |             message: format!(\"Response build error: {}\", e),\n    |             ^^^^^^^ `ApiError::InternalServerError` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"all struct fields are already assigned","rendered":null,"spans":[]}],"code":{"code":"E0559","explanation":"An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"},"level":"error","message":"variant `ApiError::InternalServerError` has no field named `message`","spans":[{"byte_end":5915,"byte_start":5908,"column_end":20,"column_start":13,"expansion":null,"file_name":"src/handlers/commerce/agentic_checkout.rs","is_primary":true,"label":"`ApiError::InternalServerError` does not have this field","line_end":172,"line_start":172,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":13,"text":"            message: format!(\"Response build error: {}\", e),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `query_all` found for reference `&sea_orm::DatabaseConnection` in the current scope\n  --> src/handlers/outbox_admin.rs:46:10\n   |\n45 |       let rows = db\n   |  ________________-\n46 | |         .query_all(Statement::from_string(DbBackend::Postgres, sql.to_string()))\n   | |_________-^^^^^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: trait `ConnectionTrait` which provides `query_all` is implemented but not in scope; perhaps you want to import it\n   |\n 1 + use sea_orm::ConnectionTrait;\n   |\nhelp: there is a method `query_one` with a similar name\n   |\n46 -         .query_all(Statement::from_string(DbBackend::Postgres, sql.to_string()))\n46 +         .query_one(Statement::from_string(DbBackend::Postgres, sql.to_string()))\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `ConnectionTrait` which provides `query_all` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/handlers/outbox_admin.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use sea_orm::ConnectionTrait;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use axum::{extract::{Path, State}, routing::{get, post}, Json, Router};"}]}]},{"children":[],"code":null,"level":"help","message":"there is a method `query_one` with a similar name","rendered":null,"spans":[{"byte_end":1354,"byte_start":1345,"column_end":19,"column_start":10,"expansion":null,"file_name":"src/handlers/outbox_admin.rs","is_primary":true,"label":null,"line_end":46,"line_start":46,"suggested_replacement":"query_one","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":19,"highlight_start":10,"text":"        .query_all(Statement::from_string(DbBackend::Postgres, sql.to_string()))"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `query_all` found for reference `&sea_orm::DatabaseConnection` in the current scope","spans":[{"byte_end":1345,"byte_start":1333,"column_end":10,"column_start":16,"expansion":null,"file_name":"src/handlers/outbox_admin.rs","is_primary":false,"label":"","line_end":46,"line_start":45,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":16,"text":"    let rows = db"},{"highlight_end":10,"highlight_start":1,"text":"        .query_all(Statement::from_string(DbBackend::Postgres, sql.to_string()))"}]},{"byte_end":1354,"byte_start":1345,"column_end":19,"column_start":10,"expansion":null,"file_name":"src/handlers/outbox_admin.rs","is_primary":true,"label":null,"line_end":46,"line_start":46,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":10,"text":"        .query_all(Statement::from_string(DbBackend::Postgres, sql.to_string()))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `execute` found for reference `&sea_orm::DatabaseConnection` in the current scope\n  --> src/handlers/outbox_admin.rs:87:10\n   |\n86 |       let res = db\n   |  _______________-\n87 | |         .execute(Statement::from_sql_and_values(DbBackend::Postgres, sql, vec![id.into()]))\n   | |         -^^^^^^^ method not found in `&sea_orm::DatabaseConnection`\n   | |_________|\n   |\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: trait `ConnectionTrait` which provides `execute` is implemented but not in scope; perhaps you want to import it\n   |\n 1 + use sea_orm::ConnectionTrait;\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `ConnectionTrait` which provides `execute` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/handlers/outbox_admin.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use sea_orm::ConnectionTrait;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use axum::{extract::{Path, State}, routing::{get, post}, Json, Router};"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `execute` found for reference `&sea_orm::DatabaseConnection` in the current scope","spans":[{"byte_end":3265,"byte_start":3253,"column_end":10,"column_start":15,"expansion":null,"file_name":"src/handlers/outbox_admin.rs","is_primary":false,"label":"","line_end":87,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":15,"text":"    let res = db"},{"highlight_end":10,"highlight_start":1,"text":"        .execute(Statement::from_sql_and_values(DbBackend::Postgres, sql, vec![id.into()]))"}]},{"byte_end":3272,"byte_start":3265,"column_end":17,"column_start":10,"expansion":null,"file_name":"src/handlers/outbox_admin.rs","is_primary":true,"label":"method not found in `&sea_orm::DatabaseConnection`","line_end":87,"line_start":87,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":10,"text":"        .execute(Statement::from_sql_and_values(DbBackend::Postgres, sql, vec![id.into()]))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: variable does not need to be mutable\n  --> src/middleware_helpers/security_headers.rs:10:42\n   |\n10 | pub async fn security_headers_middleware(mut req: Request, next: Next) -> Response {\n   |                                          ----^^^\n   |                                          |\n   |                                          help: remove this `mut`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":316,"byte_start":312,"column_end":46,"column_start":42,"expansion":null,"file_name":"src/middleware_helpers/security_headers.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":46,"highlight_start":42,"text":"pub async fn security_headers_middleware(mut req: Request, next: Next) -> Response {"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":319,"byte_start":312,"column_end":49,"column_start":42,"expansion":null,"file_name":"src/middleware_helpers/security_headers.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":42,"text":"pub async fn security_headers_middleware(mut req: Request, next: Next) -> Response {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: variable does not need to be mutable\n  --> src/middleware_helpers/idempotency.rs:50:37\n   |\n50 | pub async fn idempotency_middleware(mut req: Request, next: Next) -> Response {\n   |                                     ----^^^\n   |                                     |\n   |                                     help: remove this `mut`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":1435,"byte_start":1431,"column_end":41,"column_start":37,"expansion":null,"file_name":"src/middleware_helpers/idempotency.rs","is_primary":true,"label":null,"line_end":50,"line_start":50,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":41,"highlight_start":37,"text":"pub async fn idempotency_middleware(mut req: Request, next: Next) -> Response {"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":1438,"byte_start":1431,"column_end":44,"column_start":37,"expansion":null,"file_name":"src/middleware_helpers/idempotency.rs","is_primary":true,"label":null,"line_end":50,"line_start":50,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":37,"text":"pub async fn idempotency_middleware(mut req: Request, next: Next) -> Response {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/middleware_helpers/idempotency_redis.rs:46:15\n   |\n46 |     if let Ok(Some(json)) = conn.get::<_, String>(&cache_key).await {\n   |               ^^^^^^^^^^    --------------------------------------- this expression has type `Result<std::string::String, RedisError>`\n   |               |\n   |               expected `String`, found `Option<_>`\n   |\n   = note: expected struct `std::string::String`\n                found enum `std::option::Option<_>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `std::string::String`\n     found enum `std::option::Option<_>`","rendered":null,"spans":[]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1514,"byte_start":1504,"column_end":25,"column_start":15,"expansion":null,"file_name":"src/middleware_helpers/idempotency_redis.rs","is_primary":true,"label":"expected `String`, found `Option<_>`","line_end":46,"line_start":46,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":15,"text":"    if let Ok(Some(json)) = conn.get::<_, String>(&cache_key).await {"}]},{"byte_end":1557,"byte_start":1518,"column_end":68,"column_start":29,"expansion":null,"file_name":"src/middleware_helpers/idempotency_redis.rs","is_primary":false,"label":"this expression has type `Result<std::string::String, RedisError>`","line_end":46,"line_start":46,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":68,"highlight_start":29,"text":"    if let Ok(Some(json)) = conn.get::<_, String>(&cache_key).await {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/middleware_helpers/idempotency_redis.rs:64:23\n   |\n64 |             if let Ok(Some(json)) = conn.get::<_, String>(&cache_key).await {\n   |                       ^^^^^^^^^^    --------------------------------------- this expression has type `Result<std::string::String, RedisError>`\n   |                       |\n   |                       expected `String`, found `Option<_>`\n   |\n   = note: expected struct `std::string::String`\n                found enum `std::option::Option<_>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `std::string::String`\n     found enum `std::option::Option<_>`","rendered":null,"spans":[]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2357,"byte_start":2347,"column_end":33,"column_start":23,"expansion":null,"file_name":"src/middleware_helpers/idempotency_redis.rs","is_primary":true,"label":"expected `String`, found `Option<_>`","line_end":64,"line_start":64,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":23,"text":"            if let Ok(Some(json)) = conn.get::<_, String>(&cache_key).await {"}]},{"byte_end":2400,"byte_start":2361,"column_end":76,"column_start":37,"expansion":null,"file_name":"src/middleware_helpers/idempotency_redis.rs","is_primary":false,"label":"this expression has type `Result<std::string::String, RedisError>`","line_end":64,"line_start":64,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":76,"highlight_start":37,"text":"            if let Ok(Some(json)) = conn.get::<_, String>(&cache_key).await {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `into_response` found for tuple `(http::StatusCode, &'static str)` in the current scope\n  --> src/middleware_helpers/idempotency_redis.rs:75:76\n   |\n75 |             return (StatusCode::CONFLICT, \"Duplicate request in progress\").into_response();\n   |                                                                            ^^^^^^^^^^^^^ method not found in `(http::StatusCode, &'static str)`\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following traits which provide `into_response` are implemented but not in scope; perhaps you want to import one of them\n   |\n 1 + use axum::response::IntoResponse;\n   |\n 1 + use axum_core::response::into_response::IntoResponse;\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following traits which provide `into_response` are implemented but not in scope; perhaps you want to import one of them","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/middleware_helpers/idempotency_redis.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use axum::response::IntoResponse;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use axum::{extract::Request, middleware::Next, response::Response, http::{StatusCode, HeaderName}};"}]},{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/middleware_helpers/idempotency_redis.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use axum_core::response::into_response::IntoResponse;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use axum::{extract::Request, middleware::Next, response::Response, http::{StatusCode, HeaderName}};"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `into_response` found for tuple `(http::StatusCode, &'static str)` in the current scope","spans":[{"byte_end":3124,"byte_start":3111,"column_end":89,"column_start":76,"expansion":null,"file_name":"src/middleware_helpers/idempotency_redis.rs","is_primary":true,"label":"method not found in `(http::StatusCode, &'static str)`","line_end":75,"line_start":75,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":89,"highlight_start":76,"text":"            return (StatusCode::CONFLICT, \"Duplicate request in progress\").into_response();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `work_order_id`\n   --> src/models/waste_and_scrap.rs:111:21\n    |\n111 |         if let Some(work_order_id) = self.work_order_id {\n    |                     ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_work_order_id`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":3364,"byte_start":3351,"column_end":34,"column_start":21,"expansion":null,"file_name":"src/models/waste_and_scrap.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":"_work_order_id","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":34,"highlight_start":21,"text":"        if let Some(work_order_id) = self.work_order_id {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `work_order_id`","spans":[{"byte_end":3364,"byte_start":3351,"column_end":34,"column_start":21,"expansion":null,"file_name":"src/models/waste_and_scrap.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"        if let Some(work_order_id) = self.work_order_id {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `part_number`\n   --> src/models/waste_and_scrap.rs:119:21\n    |\n119 |         if let Some(part_number) = self.part_number {\n    |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_part_number`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":3667,"byte_start":3656,"column_end":32,"column_start":21,"expansion":null,"file_name":"src/models/waste_and_scrap.rs","is_primary":true,"label":null,"line_end":119,"line_start":119,"suggested_replacement":"_part_number","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":32,"highlight_start":21,"text":"        if let Some(part_number) = self.part_number {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `part_number`","spans":[{"byte_end":3667,"byte_start":3656,"column_end":32,"column_start":21,"expansion":null,"file_name":"src/models/waste_and_scrap.rs","is_primary":true,"label":null,"line_end":119,"line_start":119,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":21,"text":"        if let Some(part_number) = self.part_number {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:141:13\n    |\n141 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^ -------- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\n    = note: cannot satisfy `_: IntoDbErr`\n    = help: the following types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\nhelp: consider specifying the generic argument\n    |\n141 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\nhelp: consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds\n    |\n141 -             ServiceError::db_error(e.into())\n141 +             ServiceError::db_error(e)\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"cannot satisfy `_: IntoDbErr`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":4776,"byte_start":4776,"column_end":35,"column_start":35,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":141,"line_start":141,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":35,"text":"            ServiceError::db_error(e.into())"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds","rendered":null,"spans":[{"byte_end":4785,"byte_start":4778,"column_end":44,"column_start":37,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":141,"line_start":141,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":44,"highlight_start":37,"text":"            ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":4785,"byte_start":4777,"column_end":44,"column_start":36,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":141,"line_start":141,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":36,"text":"            ServiceError::db_error(e.into())"}]},{"byte_end":4776,"byte_start":4754,"column_end":35,"column_start":13,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":141,"line_start":141,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:141:13\n    |\n141 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n141 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":4776,"byte_start":4776,"column_end":35,"column_start":35,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":141,"line_start":141,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":35,"text":"            ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":4783,"byte_start":4779,"column_end":42,"column_start":38,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":141,"line_start":141,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":38,"text":"            ServiceError::db_error(e.into())"}]},{"byte_end":4776,"byte_start":4754,"column_end":35,"column_start":13,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":141,"line_start":141,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:172:13\n    |\n172 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^ -------- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\n    = note: cannot satisfy `_: IntoDbErr`\n    = help: the following types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\nhelp: consider specifying the generic argument\n    |\n172 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\nhelp: consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds\n    |\n172 -             ServiceError::db_error(e.into())\n172 +             ServiceError::db_error(e)\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"cannot satisfy `_: IntoDbErr`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":5974,"byte_start":5974,"column_end":35,"column_start":35,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":172,"line_start":172,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":35,"text":"            ServiceError::db_error(e.into())"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds","rendered":null,"spans":[{"byte_end":5983,"byte_start":5976,"column_end":44,"column_start":37,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":172,"line_start":172,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":44,"highlight_start":37,"text":"            ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":5983,"byte_start":5975,"column_end":44,"column_start":36,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":172,"line_start":172,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":36,"text":"            ServiceError::db_error(e.into())"}]},{"byte_end":5974,"byte_start":5952,"column_end":35,"column_start":13,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":172,"line_start":172,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:172:13\n    |\n172 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n172 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":5974,"byte_start":5974,"column_end":35,"column_start":35,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":172,"line_start":172,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":35,"text":"            ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":5981,"byte_start":5977,"column_end":42,"column_start":38,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":172,"line_start":172,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":38,"text":"            ServiceError::db_error(e.into())"}]},{"byte_end":5974,"byte_start":5952,"column_end":35,"column_start":13,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":172,"line_start":172,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:201:13\n    |\n201 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n201 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":7241,"byte_start":7241,"column_end":35,"column_start":35,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":201,"line_start":201,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":35,"text":"            ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":7248,"byte_start":7244,"column_end":42,"column_start":38,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":38,"text":"            ServiceError::db_error(e.into())"}]},{"byte_end":7241,"byte_start":7219,"column_end":35,"column_start":13,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:213:13\n    |\n213 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n213 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":7853,"byte_start":7853,"column_end":35,"column_start":35,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":213,"line_start":213,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":35,"text":"            ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":7860,"byte_start":7856,"column_end":42,"column_start":38,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":213,"line_start":213,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":38,"text":"            ServiceError::db_error(e.into())"}]},{"byte_end":7853,"byte_start":7831,"column_end":35,"column_start":13,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":213,"line_start":213,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:239:17\n    |\n239 |                 ServiceError::db_error(e.into())\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ -------- type must be known at this point\n    |                 |\n    |                 cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\n    = note: cannot satisfy `_: IntoDbErr`\n    = help: the following types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\nhelp: consider specifying the generic argument\n    |\n239 |                 ServiceError::db_error::<E>(e.into())\n    |                                       +++++\nhelp: consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds\n    |\n239 -                 ServiceError::db_error(e.into())\n239 +                 ServiceError::db_error(e)\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"cannot satisfy `_: IntoDbErr`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":8863,"byte_start":8863,"column_end":39,"column_start":39,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":239,"line_start":239,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":39,"text":"                ServiceError::db_error(e.into())"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds","rendered":null,"spans":[{"byte_end":8872,"byte_start":8865,"column_end":48,"column_start":41,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":239,"line_start":239,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":48,"highlight_start":41,"text":"                ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":8872,"byte_start":8864,"column_end":48,"column_start":40,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":239,"line_start":239,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":40,"text":"                ServiceError::db_error(e.into())"}]},{"byte_end":8863,"byte_start":8841,"column_end":39,"column_start":17,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":239,"line_start":239,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":17,"text":"                ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:239:17\n    |\n239 |                 ServiceError::db_error(e.into())\n    |                 ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |                 |\n    |                 cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n239 |                 ServiceError::db_error::<E>(e.into())\n    |                                       +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":8863,"byte_start":8863,"column_end":39,"column_start":39,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":239,"line_start":239,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":39,"text":"                ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":8870,"byte_start":8866,"column_end":46,"column_start":42,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":239,"line_start":239,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":42,"text":"                ServiceError::db_error(e.into())"}]},{"byte_end":8863,"byte_start":8841,"column_end":39,"column_start":17,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":239,"line_start":239,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":17,"text":"                ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:280:13\n    |\n280 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^ -------- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\n    = note: cannot satisfy `_: IntoDbErr`\n    = help: the following types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\nhelp: consider specifying the generic argument\n    |\n280 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\nhelp: consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds\n    |\n280 -             ServiceError::db_error(e.into())\n280 +             ServiceError::db_error(e)\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"cannot satisfy `_: IntoDbErr`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":10248,"byte_start":10248,"column_end":35,"column_start":35,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":280,"line_start":280,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":35,"text":"            ServiceError::db_error(e.into())"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds","rendered":null,"spans":[{"byte_end":10257,"byte_start":10250,"column_end":44,"column_start":37,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":280,"line_start":280,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":44,"highlight_start":37,"text":"            ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":10257,"byte_start":10249,"column_end":44,"column_start":36,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":280,"line_start":280,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":36,"text":"            ServiceError::db_error(e.into())"}]},{"byte_end":10248,"byte_start":10226,"column_end":35,"column_start":13,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":280,"line_start":280,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:280:13\n    |\n280 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n280 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":10248,"byte_start":10248,"column_end":35,"column_start":35,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":280,"line_start":280,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":35,"text":"            ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":10255,"byte_start":10251,"column_end":42,"column_start":38,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":280,"line_start":280,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":38,"text":"            ServiceError::db_error(e.into())"}]},{"byte_end":10248,"byte_start":10226,"column_end":35,"column_start":13,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":280,"line_start":280,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:285:13\n    |\n285 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n285 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":10476,"byte_start":10476,"column_end":35,"column_start":35,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":285,"line_start":285,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":35,"text":"            ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":10483,"byte_start":10479,"column_end":42,"column_start":38,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":285,"line_start":285,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":38,"text":"            ServiceError::db_error(e.into())"}]},{"byte_end":10476,"byte_start":10454,"column_end":35,"column_start":13,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":285,"line_start":285,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:314:17\n    |\n314 |                 ServiceError::db_error(e.into())\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ -------- type must be known at this point\n    |                 |\n    |                 cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\n    = note: cannot satisfy `_: IntoDbErr`\n    = help: the following types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\nhelp: consider specifying the generic argument\n    |\n314 |                 ServiceError::db_error::<E>(e.into())\n    |                                       +++++\nhelp: consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds\n    |\n314 -                 ServiceError::db_error(e.into())\n314 +                 ServiceError::db_error(e)\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"cannot satisfy `_: IntoDbErr`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":11533,"byte_start":11533,"column_end":39,"column_start":39,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":314,"line_start":314,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":39,"text":"                ServiceError::db_error(e.into())"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds","rendered":null,"spans":[{"byte_end":11542,"byte_start":11535,"column_end":48,"column_start":41,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":314,"line_start":314,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":48,"highlight_start":41,"text":"                ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":11542,"byte_start":11534,"column_end":48,"column_start":40,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":314,"line_start":314,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":40,"text":"                ServiceError::db_error(e.into())"}]},{"byte_end":11533,"byte_start":11511,"column_end":39,"column_start":17,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":314,"line_start":314,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":17,"text":"                ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:314:17\n    |\n314 |                 ServiceError::db_error(e.into())\n    |                 ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |                 |\n    |                 cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n314 |                 ServiceError::db_error::<E>(e.into())\n    |                                       +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":11533,"byte_start":11533,"column_end":39,"column_start":39,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":314,"line_start":314,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":39,"text":"                ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":11540,"byte_start":11536,"column_end":46,"column_start":42,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":314,"line_start":314,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":42,"text":"                ServiceError::db_error(e.into())"}]},{"byte_end":11533,"byte_start":11511,"column_end":39,"column_start":17,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":314,"line_start":314,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":17,"text":"                ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:357:13\n    |\n357 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^ -------- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\n    = note: cannot satisfy `_: IntoDbErr`\n    = help: the following types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\nhelp: consider specifying the generic argument\n    |\n357 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\nhelp: consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds\n    |\n357 -             ServiceError::db_error(e.into())\n357 +             ServiceError::db_error(e)\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"cannot satisfy `_: IntoDbErr`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":13054,"byte_start":13054,"column_end":35,"column_start":35,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":357,"line_start":357,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":35,"text":"            ServiceError::db_error(e.into())"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds","rendered":null,"spans":[{"byte_end":13063,"byte_start":13056,"column_end":44,"column_start":37,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":357,"line_start":357,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":44,"highlight_start":37,"text":"            ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":13063,"byte_start":13055,"column_end":44,"column_start":36,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":357,"line_start":357,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":36,"text":"            ServiceError::db_error(e.into())"}]},{"byte_end":13054,"byte_start":13032,"column_end":35,"column_start":13,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":357,"line_start":357,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:357:13\n    |\n357 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n357 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":13054,"byte_start":13054,"column_end":35,"column_start":35,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":357,"line_start":357,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":35,"text":"            ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":13061,"byte_start":13057,"column_end":42,"column_start":38,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":357,"line_start":357,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":38,"text":"            ServiceError::db_error(e.into())"}]},{"byte_end":13054,"byte_start":13032,"column_end":35,"column_start":13,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":357,"line_start":357,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:391:13\n    |\n391 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^ -------- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\n    = note: cannot satisfy `_: IntoDbErr`\n    = help: the following types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\nhelp: consider specifying the generic argument\n    |\n391 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\nhelp: consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds\n    |\n391 -             ServiceError::db_error(e.into())\n391 +             ServiceError::db_error(e)\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"cannot satisfy `_: IntoDbErr`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":14385,"byte_start":14385,"column_end":35,"column_start":35,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":391,"line_start":391,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":35,"text":"            ServiceError::db_error(e.into())"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds","rendered":null,"spans":[{"byte_end":14394,"byte_start":14387,"column_end":44,"column_start":37,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":391,"line_start":391,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":44,"highlight_start":37,"text":"            ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":14394,"byte_start":14386,"column_end":44,"column_start":36,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":391,"line_start":391,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":36,"text":"            ServiceError::db_error(e.into())"}]},{"byte_end":14385,"byte_start":14363,"column_end":35,"column_start":13,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":391,"line_start":391,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:391:13\n    |\n391 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n391 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":14385,"byte_start":14385,"column_end":35,"column_start":35,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":391,"line_start":391,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":35,"text":"            ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":14392,"byte_start":14388,"column_end":42,"column_start":38,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":391,"line_start":391,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":38,"text":"            ServiceError::db_error(e.into())"}]},{"byte_end":14385,"byte_start":14363,"column_end":35,"column_start":13,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":391,"line_start":391,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:400:17\n    |\n400 |                 ServiceError::db_error(e.into())\n    |                 ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |                 |\n    |                 cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n400 |                 ServiceError::db_error::<E>(e.into())\n    |                                       +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":14697,"byte_start":14697,"column_end":39,"column_start":39,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":400,"line_start":400,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":39,"text":"                ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":14704,"byte_start":14700,"column_end":46,"column_start":42,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":400,"line_start":400,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":42,"text":"                ServiceError::db_error(e.into())"}]},{"byte_end":14697,"byte_start":14675,"column_end":39,"column_start":17,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":400,"line_start":400,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":17,"text":"                ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:429:13\n    |\n429 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n429 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":15894,"byte_start":15894,"column_end":35,"column_start":35,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":429,"line_start":429,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":35,"text":"            ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":15901,"byte_start":15897,"column_end":42,"column_start":38,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":429,"line_start":429,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":38,"text":"            ServiceError::db_error(e.into())"}]},{"byte_end":15894,"byte_start":15872,"column_end":35,"column_start":13,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":429,"line_start":429,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:441:13\n    |\n441 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n441 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":16544,"byte_start":16544,"column_end":35,"column_start":35,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":441,"line_start":441,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":35,"text":"            ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":16551,"byte_start":16547,"column_end":42,"column_start":38,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":441,"line_start":441,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":38,"text":"            ServiceError::db_error(e.into())"}]},{"byte_end":16544,"byte_start":16522,"column_end":35,"column_start":13,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":441,"line_start":441,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:502:17\n    |\n502 |                 ServiceError::db_error(e.into())\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ -------- type must be known at this point\n    |                 |\n    |                 cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\n    = note: cannot satisfy `_: IntoDbErr`\n    = help: the following types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\nhelp: consider specifying the generic argument\n    |\n502 |                 ServiceError::db_error::<E>(e.into())\n    |                                       +++++\nhelp: consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds\n    |\n502 -                 ServiceError::db_error(e.into())\n502 +                 ServiceError::db_error(e)\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"cannot satisfy `_: IntoDbErr`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":18989,"byte_start":18989,"column_end":39,"column_start":39,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":502,"line_start":502,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":39,"text":"                ServiceError::db_error(e.into())"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds","rendered":null,"spans":[{"byte_end":18998,"byte_start":18991,"column_end":48,"column_start":41,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":502,"line_start":502,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":48,"highlight_start":41,"text":"                ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":18998,"byte_start":18990,"column_end":48,"column_start":40,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":502,"line_start":502,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":40,"text":"                ServiceError::db_error(e.into())"}]},{"byte_end":18989,"byte_start":18967,"column_end":39,"column_start":17,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":502,"line_start":502,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":17,"text":"                ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:502:17\n    |\n502 |                 ServiceError::db_error(e.into())\n    |                 ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |                 |\n    |                 cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n502 |                 ServiceError::db_error::<E>(e.into())\n    |                                       +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":18989,"byte_start":18989,"column_end":39,"column_start":39,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":502,"line_start":502,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":39,"text":"                ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":18996,"byte_start":18992,"column_end":46,"column_start":42,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":502,"line_start":502,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":42,"text":"                ServiceError::db_error(e.into())"}]},{"byte_end":18989,"byte_start":18967,"column_end":39,"column_start":17,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":502,"line_start":502,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":17,"text":"                ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:517:13\n    |\n517 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n517 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":19669,"byte_start":19669,"column_end":35,"column_start":35,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":517,"line_start":517,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":35,"text":"            ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":19676,"byte_start":19672,"column_end":42,"column_start":38,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":517,"line_start":517,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":38,"text":"            ServiceError::db_error(e.into())"}]},{"byte_end":19669,"byte_start":19647,"column_end":35,"column_start":13,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":517,"line_start":517,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":13,"text":"            ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:538:17\n    |\n538 |                 ServiceError::db_error(e.into())\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ -------- type must be known at this point\n    |                 |\n    |                 cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\n    = note: cannot satisfy `_: IntoDbErr`\n    = help: the following types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\nhelp: consider specifying the generic argument\n    |\n538 |                 ServiceError::db_error::<E>(e.into())\n    |                                       +++++\nhelp: consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds\n    |\n538 -                 ServiceError::db_error(e.into())\n538 +                 ServiceError::db_error(e)\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"cannot satisfy `_: IntoDbErr`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":20416,"byte_start":20416,"column_end":39,"column_start":39,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":538,"line_start":538,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":39,"text":"                ServiceError::db_error(e.into())"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds","rendered":null,"spans":[{"byte_end":20425,"byte_start":20418,"column_end":48,"column_start":41,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":538,"line_start":538,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":48,"highlight_start":41,"text":"                ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":20425,"byte_start":20417,"column_end":48,"column_start":40,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":538,"line_start":538,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":40,"text":"                ServiceError::db_error(e.into())"}]},{"byte_end":20416,"byte_start":20394,"column_end":39,"column_start":17,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":538,"line_start":538,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":17,"text":"                ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:538:17\n    |\n538 |                 ServiceError::db_error(e.into())\n    |                 ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |                 |\n    |                 cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n538 |                 ServiceError::db_error::<E>(e.into())\n    |                                       +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":20416,"byte_start":20416,"column_end":39,"column_start":39,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":538,"line_start":538,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":39,"text":"                ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":20423,"byte_start":20419,"column_end":46,"column_start":42,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":538,"line_start":538,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":42,"text":"                ServiceError::db_error(e.into())"}]},{"byte_end":20416,"byte_start":20394,"column_end":39,"column_start":17,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":538,"line_start":538,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":17,"text":"                ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:556:17\n    |\n556 |                 ServiceError::db_error(e.into())\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ -------- type must be known at this point\n    |                 |\n    |                 cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\n    = note: cannot satisfy `_: IntoDbErr`\n    = help: the following types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\nhelp: consider specifying the generic argument\n    |\n556 |                 ServiceError::db_error::<E>(e.into())\n    |                                       +++++\nhelp: consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds\n    |\n556 -                 ServiceError::db_error(e.into())\n556 +                 ServiceError::db_error(e)\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"cannot satisfy `_: IntoDbErr`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":21085,"byte_start":21085,"column_end":39,"column_start":39,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":556,"line_start":556,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":39,"text":"                ServiceError::db_error(e.into())"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds","rendered":null,"spans":[{"byte_end":21094,"byte_start":21087,"column_end":48,"column_start":41,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":556,"line_start":556,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":48,"highlight_start":41,"text":"                ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":21094,"byte_start":21086,"column_end":48,"column_start":40,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":556,"line_start":556,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":40,"text":"                ServiceError::db_error(e.into())"}]},{"byte_end":21085,"byte_start":21063,"column_end":39,"column_start":17,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":556,"line_start":556,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":17,"text":"                ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:556:17\n    |\n556 |                 ServiceError::db_error(e.into())\n    |                 ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |                 |\n    |                 cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n556 |                 ServiceError::db_error::<E>(e.into())\n    |                                       +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":21085,"byte_start":21085,"column_end":39,"column_start":39,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":556,"line_start":556,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":39,"text":"                ServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":21092,"byte_start":21088,"column_end":46,"column_start":42,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":556,"line_start":556,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":42,"text":"                ServiceError::db_error(e.into())"}]},{"byte_end":21085,"byte_start":21063,"column_end":39,"column_start":17,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":556,"line_start":556,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":17,"text":"                ServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:571:26\n    |\n571 |             .map_err(|e| ServiceError::db_error(e.into()))? {\n    |                          ^^^^^^^^^^^^^^^^^^^^^^ -------- type must be known at this point\n    |                          |\n    |                          cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\n    = note: cannot satisfy `_: IntoDbErr`\n    = help: the following types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\nhelp: consider specifying the generic argument\n    |\n571 |             .map_err(|e| ServiceError::db_error::<E>(e.into()))? {\n    |                                                +++++\nhelp: consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds\n    |\n571 -             .map_err(|e| ServiceError::db_error(e.into()))? {\n571 +             .map_err(|e| ServiceError::db_error(e))? {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"cannot satisfy `_: IntoDbErr`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":21612,"byte_start":21612,"column_end":48,"column_start":48,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":571,"line_start":571,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":48,"highlight_start":48,"text":"            .map_err(|e| ServiceError::db_error(e.into()))? {"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds","rendered":null,"spans":[{"byte_end":21621,"byte_start":21614,"column_end":57,"column_start":50,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":571,"line_start":571,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":57,"highlight_start":50,"text":"            .map_err(|e| ServiceError::db_error(e.into()))? {"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":21621,"byte_start":21613,"column_end":57,"column_start":49,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":571,"line_start":571,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":49,"text":"            .map_err(|e| ServiceError::db_error(e.into()))? {"}]},{"byte_end":21612,"byte_start":21590,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":571,"line_start":571,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":26,"text":"            .map_err(|e| ServiceError::db_error(e.into()))? {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:571:26\n    |\n571 |             .map_err(|e| ServiceError::db_error(e.into()))? {\n    |                          ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |                          |\n    |                          cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n571 |             .map_err(|e| ServiceError::db_error::<E>(e.into()))? {\n    |                                                +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":21612,"byte_start":21612,"column_end":48,"column_start":48,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":571,"line_start":571,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":48,"highlight_start":48,"text":"            .map_err(|e| ServiceError::db_error(e.into()))? {"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":21619,"byte_start":21615,"column_end":55,"column_start":51,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":571,"line_start":571,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":51,"text":"            .map_err(|e| ServiceError::db_error(e.into()))? {"}]},{"byte_end":21612,"byte_start":21590,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":571,"line_start":571,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":26,"text":"            .map_err(|e| ServiceError::db_error(e.into()))? {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:598:58\n    |\n598 |         let _model = header.insert(db).await.map_err(|e| ServiceError::db_error(e.into()))?;\n    |                                                          ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |                                                          |\n    |                                                          cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n598 |         let _model = header.insert(db).await.map_err(|e| ServiceError::db_error::<E>(e.into()))?;\n    |                                                                                +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":22858,"byte_start":22858,"column_end":80,"column_start":80,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":598,"line_start":598,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":80,"highlight_start":80,"text":"        let _model = header.insert(db).await.map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":22865,"byte_start":22861,"column_end":87,"column_start":83,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":598,"line_start":598,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":87,"highlight_start":83,"text":"        let _model = header.insert(db).await.map_err(|e| ServiceError::db_error(e.into()))?;"}]},{"byte_end":22858,"byte_start":22836,"column_end":80,"column_start":58,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":598,"line_start":598,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":80,"highlight_start":58,"text":"        let _model = header.insert(db).await.map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:605:26\n    |\n605 |             .map_err(|e| ServiceError::db_error(e.into()))?;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |                          |\n    |                          cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n605 |             .map_err(|e| ServiceError::db_error::<E>(e.into()))?;\n    |                                                +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":23121,"byte_start":23121,"column_end":48,"column_start":48,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":605,"line_start":605,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":48,"highlight_start":48,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":23128,"byte_start":23124,"column_end":55,"column_start":51,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":605,"line_start":605,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":51,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]},{"byte_end":23121,"byte_start":23099,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":605,"line_start":605,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":26,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:626:26\n    |\n626 |             .map_err(|e| ServiceError::db_error(e.into()))?;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |                          |\n    |                          cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n626 |             .map_err(|e| ServiceError::db_error::<E>(e.into()))?;\n    |                                                +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":24077,"byte_start":24077,"column_end":48,"column_start":48,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":626,"line_start":626,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":48,"highlight_start":48,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":24084,"byte_start":24080,"column_end":55,"column_start":51,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":626,"line_start":626,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":51,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]},{"byte_end":24077,"byte_start":24055,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":626,"line_start":626,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":26,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:647:26\n    |\n647 |             .map_err(|e| ServiceError::db_error(e.into()))?;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |                          |\n    |                          cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n647 |             .map_err(|e| ServiceError::db_error::<E>(e.into()))?;\n    |                                                +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":25001,"byte_start":25001,"column_end":48,"column_start":48,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":647,"line_start":647,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":48,"highlight_start":48,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":25008,"byte_start":25004,"column_end":55,"column_start":51,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":647,"line_start":647,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":51,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]},{"byte_end":25001,"byte_start":24979,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":647,"line_start":647,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":26,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:762:26\n    |\n762 |             .map_err(|e| ServiceError::db_error(e.into()))?;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^ -------- type must be known at this point\n    |                          |\n    |                          cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\n    = note: cannot satisfy `_: IntoDbErr`\n    = help: the following types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\nhelp: consider specifying the generic argument\n    |\n762 |             .map_err(|e| ServiceError::db_error::<E>(e.into()))?;\n    |                                                +++++\nhelp: consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds\n    |\n762 -             .map_err(|e| ServiceError::db_error(e.into()))?;\n762 +             .map_err(|e| ServiceError::db_error(e))?;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"cannot satisfy `_: IntoDbErr`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":29341,"byte_start":29341,"column_end":48,"column_start":48,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":762,"line_start":762,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":48,"highlight_start":48,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds","rendered":null,"spans":[{"byte_end":29350,"byte_start":29343,"column_end":57,"column_start":50,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":762,"line_start":762,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":57,"highlight_start":50,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":29350,"byte_start":29342,"column_end":57,"column_start":49,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":762,"line_start":762,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":49,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]},{"byte_end":29341,"byte_start":29319,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":762,"line_start":762,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":26,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:762:26\n    |\n762 |             .map_err(|e| ServiceError::db_error(e.into()))?;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |                          |\n    |                          cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n762 |             .map_err(|e| ServiceError::db_error::<E>(e.into()))?;\n    |                                                +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":29341,"byte_start":29341,"column_end":48,"column_start":48,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":762,"line_start":762,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":48,"highlight_start":48,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":29348,"byte_start":29344,"column_end":55,"column_start":51,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":762,"line_start":762,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":51,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]},{"byte_end":29341,"byte_start":29319,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":762,"line_start":762,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":26,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/orders.rs:765:26\n    |\n765 |             .map_err(|e| ServiceError::db_error(e.into()))?;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |                          |\n    |                          cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n765 |             .map_err(|e| ServiceError::db_error::<E>(e.into()))?;\n    |                                                +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":29469,"byte_start":29469,"column_end":48,"column_start":48,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":null,"line_end":765,"line_start":765,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":48,"highlight_start":48,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":29476,"byte_start":29472,"column_end":55,"column_start":51,"expansion":null,"file_name":"src/services/orders.rs","is_primary":false,"label":"type must be known at this point","line_end":765,"line_start":765,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":51,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]},{"byte_end":29469,"byte_start":29447,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/services/orders.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":765,"line_start":765,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":26,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `msg`\n   --> src/services/returns.rs:159:21\n    |\n159 |                 let msg = format!(\"Failed to get return: {}\", e);\n    |                     ^^^ help: if this is intentional, prefix it with an underscore: `_msg`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":4953,"byte_start":4950,"column_end":24,"column_start":21,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":159,"line_start":159,"suggested_replacement":"_msg","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":24,"highlight_start":21,"text":"                let msg = format!(\"Failed to get return: {}\", e);"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `msg`","spans":[{"byte_end":4953,"byte_start":4950,"column_end":24,"column_start":21,"expansion":null,"file_name":"src/services/returns.rs","is_primary":true,"label":null,"line_end":159,"line_start":159,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":21,"text":"                let msg = format!(\"Failed to get return: {}\", e);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `carrier` on type `CreateShipmentCommand`\n  --> src/services/shipments.rs:69:34\n   |\n69 |             carrier: Set(command.carrier),\n   |                                  ^^^^^^^ unknown field\n   |\n   = note: available fields are: `order_id`, `shipping_address`, `shipping_method`, `tracking_number`, `recipient_name`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `order_id`, `shipping_address`, `shipping_method`, `tracking_number`, `recipient_name`","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `carrier` on type `CreateShipmentCommand`","spans":[{"byte_end":2224,"byte_start":2217,"column_end":41,"column_start":34,"expansion":null,"file_name":"src/services/shipments.rs","is_primary":true,"label":"unknown field","line_end":69,"line_start":69,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":34,"text":"            carrier: Set(command.carrier),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `warranty_id` on type `ApproveWarrantyClaimCommand`\n  --> src/services/warranties.rs:99:65\n   |\n99 |         let payload = serde_json::json!({\"warranty_id\": command.warranty_id.to_string(), \"claim_id\": command.claim_id.to_string()});\n   |                                                                 ^^^^^^^^^^^ unknown field\n   |\n   = note: available fields are: `claim_id`, `approved_by`, `resolution`, `notes`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `claim_id`, `approved_by`, `resolution`, `notes`","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `warranty_id` on type `ApproveWarrantyClaimCommand`","spans":[{"byte_end":3201,"byte_start":3190,"column_end":76,"column_start":65,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":"unknown field","line_end":99,"line_start":99,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":76,"highlight_start":65,"text":"        let payload = serde_json::json!({\"warranty_id\": command.warranty_id.to_string(), \"claim_id\": command.claim_id.to_string()});"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `warranty_id` on type `ApproveWarrantyClaimCommand`\n   --> src/services/warranties.rs:100:89\n    |\n100 | ...   let _ = crate::events::outbox::enqueue(&*self.db_pool, \"warranty\", Some(command.warranty_id), \"WarrantyClaimApproved\", &payload).aw...\n    |                                                                                       ^^^^^^^^^^^ unknown field\n    |\n    = note: available fields are: `claim_id`, `approved_by`, `resolution`, `notes`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `claim_id`, `approved_by`, `resolution`, `notes`","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `warranty_id` on type `ApproveWarrantyClaimCommand`","spans":[{"byte_end":3358,"byte_start":3347,"column_end":100,"column_start":89,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":"unknown field","line_end":100,"line_start":100,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":100,"highlight_start":89,"text":"        let _ = crate::events::outbox::enqueue(&*self.db_pool, \"warranty\", Some(command.warranty_id), \"WarrantyClaimApproved\", &payload).await;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `warranty_id` on type `RejectWarrantyClaimCommand`\n   --> src/services/warranties.rs:114:65\n    |\n114 |         let payload = serde_json::json!({\"warranty_id\": command.warranty_id.to_string(), \"claim_id\": command.claim_id.to_string()});\n    |                                                                 ^^^^^^^^^^^ unknown field\n    |\n    = note: available fields are: `claim_id`, `rejected_by`, `reason`, `notes`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `claim_id`, `rejected_by`, `reason`, `notes`","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `warranty_id` on type `RejectWarrantyClaimCommand`","spans":[{"byte_end":3847,"byte_start":3836,"column_end":76,"column_start":65,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":"unknown field","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":76,"highlight_start":65,"text":"        let payload = serde_json::json!({\"warranty_id\": command.warranty_id.to_string(), \"claim_id\": command.claim_id.to_string()});"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `warranty_id` on type `RejectWarrantyClaimCommand`\n   --> src/services/warranties.rs:115:89\n    |\n115 | ...   let _ = crate::events::outbox::enqueue(&*self.db_pool, \"warranty\", Some(command.warranty_id), \"WarrantyClaimRejected\", &payload).aw...\n    |                                                                                       ^^^^^^^^^^^ unknown field\n    |\n    = note: available fields are: `claim_id`, `rejected_by`, `reason`, `notes`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `claim_id`, `rejected_by`, `reason`, `notes`","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `warranty_id` on type `RejectWarrantyClaimCommand`","spans":[{"byte_end":4004,"byte_start":3993,"column_end":100,"column_start":89,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":"unknown field","line_end":115,"line_start":115,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":100,"highlight_start":89,"text":"        let _ = crate::events::outbox::enqueue(&*self.db_pool, \"warranty\", Some(command.warranty_id), \"WarrantyClaimRejected\", &payload).await;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `i32: From<uuid::Uuid>` is not satisfied\n   --> src/services/warranties.rs:126:53\n    |\n126 |         let warranty = warranty::Entity::find_by_id(*warranty_id).one(db).await?;\n    |                        ---------------------------- ^^^^^^^^^^^^ the trait `From<uuid::Uuid>` is not implemented for `i32`\n    |                        |\n    |                        required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `From<T>`:\n              `i32` implements `From<AsnStatus>`\n              `i32` implements `From<BomStatus>`\n              `i32` implements `From<CType>`\n              `i32` implements `From<Cardinality>`\n              `i32` implements `From<Feature>`\n              `i32` implements `From<IdempotencyLevel>`\n              `i32` implements `From<JsType>`\n              `i32` implements `From<OptimizeMode>`\n            and 31 others\n    = note: required for `uuid::Uuid` to implement `Into<i32>`\nnote: required by a bound in `find_by_id`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/entity/base_entity.rs:273:12\n    |\n271 |     fn find_by_id<T>(values: T) -> Select<Self>\n    |        ---------- required by a bound in this associated function\n272 |     where\n273 |         T: Into<<Self::PrimaryKey as PrimaryKeyTrait>::ValueType>,\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `EntityTrait::find_by_id`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `From<T>`:\n  `i32` implements `From<AsnStatus>`\n  `i32` implements `From<BomStatus>`\n  `i32` implements `From<CType>`\n  `i32` implements `From<Cardinality>`\n  `i32` implements `From<Feature>`\n  `i32` implements `From<IdempotencyLevel>`\n  `i32` implements `From<JsType>`\n  `i32` implements `From<OptimizeMode>`\nand 31 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `uuid::Uuid` to implement `Into<i32>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `find_by_id`","rendered":null,"spans":[{"byte_end":8549,"byte_start":8539,"column_end":18,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/entity/base_entity.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":271,"line_start":271,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":8,"text":"    fn find_by_id<T>(values: T) -> Select<Self>"}]},{"byte_end":8655,"byte_start":8601,"column_end":66,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/entity/base_entity.rs","is_primary":true,"label":"required by this bound in `EntityTrait::find_by_id`","line_end":273,"line_start":273,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":12,"text":"        T: Into<<Self::PrimaryKey as PrimaryKeyTrait>::ValueType>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `i32: From<uuid::Uuid>` is not satisfied","spans":[{"byte_end":4366,"byte_start":4354,"column_end":65,"column_start":53,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":"the trait `From<uuid::Uuid>` is not implemented for `i32`","line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":65,"highlight_start":53,"text":"        let warranty = warranty::Entity::find_by_id(*warranty_id).one(db).await?;"}]},{"byte_end":4353,"byte_start":4325,"column_end":52,"column_start":24,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":24,"text":"        let warranty = warranty::Entity::find_by_id(*warranty_id).one(db).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `now`\n   --> src/services/warranties.rs:173:13\n    |\n173 |         let now = Utc::now();\n    |             ^^^ help: if this is intentional, prefix it with an underscore: `_now`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":5789,"byte_start":5786,"column_end":16,"column_start":13,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":173,"line_start":173,"suggested_replacement":"_now","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":13,"text":"        let now = Utc::now();"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `now`","spans":[{"byte_end":5789,"byte_start":5786,"column_end":16,"column_start":13,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":173,"line_start":173,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":13,"text":"        let now = Utc::now();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/order_status.rs:51:4\n    |\n 51 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^ -------- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\n    = note: cannot satisfy `_: IntoDbErr`\n    = help: the following types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\nhelp: consider specifying the generic argument\n    |\n 51 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\nhelp: consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds\n    |\n 51 -             ServiceError::db_error(e.into())\n 51 +             ServiceError::db_error(e)\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"cannot satisfy `_: IntoDbErr`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":1376,"byte_start":1376,"column_end":26,"column_start":26,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":true,"label":null,"line_end":51,"line_start":51,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":26,"highlight_start":26,"text":"\t\t\tServiceError::db_error(e.into())"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds","rendered":null,"spans":[{"byte_end":1385,"byte_start":1378,"column_end":35,"column_start":28,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":true,"label":null,"line_end":51,"line_start":51,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":35,"highlight_start":28,"text":"\t\t\tServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":1385,"byte_start":1377,"column_end":35,"column_start":27,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":false,"label":"type must be known at this point","line_end":51,"line_start":51,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":27,"text":"\t\t\tServiceError::db_error(e.into())"}]},{"byte_end":1376,"byte_start":1354,"column_end":26,"column_start":4,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":51,"line_start":51,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":4,"text":"\t\t\tServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/order_status.rs:51:4\n    |\n 51 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n 51 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":1376,"byte_start":1376,"column_end":26,"column_start":26,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":true,"label":null,"line_end":51,"line_start":51,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":26,"highlight_start":26,"text":"\t\t\tServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":1383,"byte_start":1379,"column_end":33,"column_start":29,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":false,"label":"type must be known at this point","line_end":51,"line_start":51,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":29,"text":"\t\t\tServiceError::db_error(e.into())"}]},{"byte_end":1376,"byte_start":1354,"column_end":26,"column_start":4,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":51,"line_start":51,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":4,"text":"\t\t\tServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/order_status.rs:60:5\n    |\n 60 |                 ServiceError::db_error(e.into())\n    |                 ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |                 |\n    |                 cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n 60 |                 ServiceError::db_error::<E>(e.into())\n    |                                       +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":1597,"byte_start":1597,"column_end":27,"column_start":27,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":true,"label":null,"line_end":60,"line_start":60,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":27,"highlight_start":27,"text":"\t\t\t\tServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":1604,"byte_start":1600,"column_end":34,"column_start":30,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":false,"label":"type must be known at this point","line_end":60,"line_start":60,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":30,"text":"\t\t\t\tServiceError::db_error(e.into())"}]},{"byte_end":1597,"byte_start":1575,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":60,"line_start":60,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"\t\t\t\tServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/order_status.rs:86:4\n    |\n 86 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n 86 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":2509,"byte_start":2509,"column_end":26,"column_start":26,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":true,"label":null,"line_end":86,"line_start":86,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":26,"highlight_start":26,"text":"\t\t\tServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":2516,"byte_start":2512,"column_end":33,"column_start":29,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":false,"label":"type must be known at this point","line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":29,"text":"\t\t\tServiceError::db_error(e.into())"}]},{"byte_end":2509,"byte_start":2487,"column_end":26,"column_start":4,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":86,"line_start":86,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":4,"text":"\t\t\tServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/order_status.rs:91:4\n    |\n 91 |             ServiceError::db_error(e.into())\n    |             ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |             |\n    |             cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n 91 |             ServiceError::db_error::<E>(e.into())\n    |                                   +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":2661,"byte_start":2661,"column_end":26,"column_start":26,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":true,"label":null,"line_end":91,"line_start":91,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":26,"highlight_start":26,"text":"\t\t\tServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":2668,"byte_start":2664,"column_end":33,"column_start":29,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":false,"label":"type must be known at this point","line_end":91,"line_start":91,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":29,"text":"\t\t\tServiceError::db_error(e.into())"}]},{"byte_end":2661,"byte_start":2639,"column_end":26,"column_start":4,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":91,"line_start":91,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":4,"text":"\t\t\tServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/order_status.rs:152:5\n    |\n152 |                 ServiceError::db_error(e.into())\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ -------- type must be known at this point\n    |                 |\n    |                 cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\n    = note: cannot satisfy `_: IntoDbErr`\n    = help: the following types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\nhelp: consider specifying the generic argument\n    |\n152 |                 ServiceError::db_error::<E>(e.into())\n    |                                       +++++\nhelp: consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds\n    |\n152 -                 ServiceError::db_error(e.into())\n152 +                 ServiceError::db_error(e)\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"cannot satisfy `_: IntoDbErr`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":4225,"byte_start":4225,"column_end":27,"column_start":27,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":true,"label":null,"line_end":152,"line_start":152,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":27,"highlight_start":27,"text":"\t\t\t\tServiceError::db_error(e.into())"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds","rendered":null,"spans":[{"byte_end":4234,"byte_start":4227,"column_end":36,"column_start":29,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":true,"label":null,"line_end":152,"line_start":152,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":36,"highlight_start":29,"text":"\t\t\t\tServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":4234,"byte_start":4226,"column_end":36,"column_start":28,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":false,"label":"type must be known at this point","line_end":152,"line_start":152,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":28,"text":"\t\t\t\tServiceError::db_error(e.into())"}]},{"byte_end":4225,"byte_start":4203,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":152,"line_start":152,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"\t\t\t\tServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/order_status.rs:152:5\n    |\n152 |                 ServiceError::db_error(e.into())\n    |                 ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |                 |\n    |                 cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n152 |                 ServiceError::db_error::<E>(e.into())\n    |                                       +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":4225,"byte_start":4225,"column_end":27,"column_start":27,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":true,"label":null,"line_end":152,"line_start":152,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":27,"highlight_start":27,"text":"\t\t\t\tServiceError::db_error(e.into())"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":4232,"byte_start":4228,"column_end":34,"column_start":30,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":false,"label":"type must be known at this point","line_end":152,"line_start":152,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":30,"text":"\t\t\t\tServiceError::db_error(e.into())"}]},{"byte_end":4225,"byte_start":4203,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/services/order_status.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":152,"line_start":152,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"\t\t\t\tServiceError::db_error(e.into())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: variable does not need to be mutable\n   --> src/services/inventory_adjustment_service.rs:133:21\n    |\n133 |                 let mut inventory = InventoryBalance::find()\n    |                     ----^^^^^^^^^\n    |                     |\n    |                     help: remove this `mut`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":4556,"byte_start":4552,"column_end":25,"column_start":21,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":133,"line_start":133,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":25,"highlight_start":21,"text":"                let mut inventory = InventoryBalance::find()"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":4565,"byte_start":4552,"column_end":34,"column_start":21,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":133,"line_start":133,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"                let mut inventory = InventoryBalance::find()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: variable does not need to be mutable\n   --> src/services/inventory_adjustment_service.rs:214:21\n    |\n214 |                 let mut inventory = InventoryBalance::find()\n    |                     ----^^^^^^^^^\n    |                     |\n    |                     help: remove this `mut`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":8894,"byte_start":8890,"column_end":25,"column_start":21,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":214,"line_start":214,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":25,"highlight_start":21,"text":"                let mut inventory = InventoryBalance::find()"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":8903,"byte_start":8890,"column_end":34,"column_start":21,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":214,"line_start":214,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"                let mut inventory = InventoryBalance::find()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: variable does not need to be mutable\n   --> src/services/inventory_adjustment_service.rs:288:21\n    |\n288 |                 let mut inventory = InventoryBalance::find()\n    |                     ----^^^^^^^^^\n    |                     |\n    |                     help: remove this `mut`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":12735,"byte_start":12731,"column_end":25,"column_start":21,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":288,"line_start":288,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":25,"highlight_start":21,"text":"                let mut inventory = InventoryBalance::find()"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":12744,"byte_start":12731,"column_end":34,"column_start":21,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":288,"line_start":288,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"                let mut inventory = InventoryBalance::find()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: variable does not need to be mutable\n   --> src/services/inventory_adjustment_service.rs:362:21\n    |\n362 |                 let mut inventory = InventoryBalance::find()\n    |                     ----^^^^^^^^^\n    |                     |\n    |                     help: remove this `mut`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":16647,"byte_start":16643,"column_end":25,"column_start":21,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":362,"line_start":362,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":25,"highlight_start":21,"text":"                let mut inventory = InventoryBalance::find()"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":16656,"byte_start":16643,"column_end":34,"column_start":21,"expansion":null,"file_name":"src/services/inventory_adjustment_service.rs","is_primary":true,"label":null,"line_end":362,"line_start":362,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"                let mut inventory = InventoryBalance::find()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `item_id`\n   --> src/services/inventory_sync.rs:251:9\n    |\n251 |         item_id: i64,\n    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_item_id`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":9572,"byte_start":9565,"column_end":16,"column_start":9,"expansion":null,"file_name":"src/services/inventory_sync.rs","is_primary":true,"label":null,"line_end":251,"line_start":251,"suggested_replacement":"_item_id","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":9,"text":"        item_id: i64,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `item_id`","spans":[{"byte_end":9572,"byte_start":9565,"column_end":16,"column_start":9,"expansion":null,"file_name":"src/services/inventory_sync.rs","is_primary":true,"label":null,"line_end":251,"line_start":251,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":9,"text":"        item_id: i64,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `location_id`\n   --> src/services/inventory_sync.rs:252:9\n    |\n252 |         location_id: i32,\n    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_location_id`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":9598,"byte_start":9587,"column_end":20,"column_start":9,"expansion":null,"file_name":"src/services/inventory_sync.rs","is_primary":true,"label":null,"line_end":252,"line_start":252,"suggested_replacement":"_location_id","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":20,"highlight_start":9,"text":"        location_id: i32,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `location_id`","spans":[{"byte_end":9598,"byte_start":9587,"column_end":20,"column_start":9,"expansion":null,"file_name":"src/services/inventory_sync.rs","is_primary":true,"label":null,"line_end":252,"line_start":252,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":9,"text":"        location_id: i32,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `bom`\n  --> src/services/bom.rs:76:13\n   |\n76 |         let bom = BomHeaderEntity::find_by_id(bom_id)\n   |             ^^^ help: if this is intentional, prefix it with an underscore: `_bom`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":2322,"byte_start":2319,"column_end":16,"column_start":13,"expansion":null,"file_name":"src/services/bom.rs","is_primary":true,"label":null,"line_end":76,"line_start":76,"suggested_replacement":"_bom","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":13,"text":"        let bom = BomHeaderEntity::find_by_id(bom_id)"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `bom`","spans":[{"byte_end":2322,"byte_start":2319,"column_end":16,"column_start":13,"expansion":null,"file_name":"src/services/bom.rs","is_primary":true,"label":null,"line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":13,"text":"        let bom = BomHeaderEntity::find_by_id(bom_id)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `component`\n  --> src/services/bom.rs:83:13\n   |\n83 |         let component = ItemMasterEntity::find_by_id(component_item_id)\n   |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_component`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":2606,"byte_start":2597,"column_end":22,"column_start":13,"expansion":null,"file_name":"src/services/bom.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":"_component","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":22,"highlight_start":13,"text":"        let component = ItemMasterEntity::find_by_id(component_item_id)"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `component`","spans":[{"byte_end":2606,"byte_start":2597,"column_end":22,"column_start":13,"expansion":null,"file_name":"src/services/bom.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":13,"text":"        let component = ItemMasterEntity::find_by_id(component_item_id)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `item`\n  --> src/services/manufacturing.rs:64:13\n   |\n64 |         let item = ItemMasterEntity::find_by_id(item_id)\n   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_item`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":1882,"byte_start":1878,"column_end":17,"column_start":13,"expansion":null,"file_name":"src/services/manufacturing.rs","is_primary":true,"label":null,"line_end":64,"line_start":64,"suggested_replacement":"_item","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":17,"highlight_start":13,"text":"        let item = ItemMasterEntity::find_by_id(item_id)"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `item`","spans":[{"byte_end":1882,"byte_start":1878,"column_end":17,"column_start":13,"expansion":null,"file_name":"src/services/manufacturing.rs","is_primary":true,"label":null,"line_end":64,"line_start":64,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":13,"text":"        let item = ItemMasterEntity::find_by_id(item_id)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `header`\n  --> src/services/purchase_receipt.rs:88:13\n   |\n88 |         let header = ReceiptHeaderEntity::find_by_id(shipment_header_id)\n   |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_header`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":2827,"byte_start":2821,"column_end":19,"column_start":13,"expansion":null,"file_name":"src/services/purchase_receipt.rs","is_primary":true,"label":null,"line_end":88,"line_start":88,"suggested_replacement":"_header","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":19,"highlight_start":13,"text":"        let header = ReceiptHeaderEntity::find_by_id(shipment_header_id)"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `header`","spans":[{"byte_end":2827,"byte_start":2821,"column_end":19,"column_start":13,"expansion":null,"file_name":"src/services/purchase_receipt.rs","is_primary":true,"label":null,"line_end":88,"line_start":88,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":13,"text":"        let header = ReceiptHeaderEntity::find_by_id(shipment_header_id)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `f`\n   --> src/services/sales_fulfillment.rs:228:26\n    |\n228 |             .filter_map(|f| {\n    |                          ^ help: if this is intentional, prefix it with an underscore: `_f`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":8473,"byte_start":8472,"column_end":27,"column_start":26,"expansion":null,"file_name":"src/services/sales_fulfillment.rs","is_primary":true,"label":null,"line_end":228,"line_start":228,"suggested_replacement":"_f","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":27,"highlight_start":26,"text":"            .filter_map(|f| {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `f`","spans":[{"byte_end":8473,"byte_start":8472,"column_end":27,"column_start":26,"expansion":null,"file_name":"src/services/sales_fulfillment.rs","is_primary":true,"label":null,"line_end":228,"line_start":228,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":26,"text":"            .filter_map(|f| {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `unwrap_or_else` found for struct `std::string::String` in the current scope\n   --> src/services/payments.rs:297:40\n    |\n297 |                 status: payment.status.unwrap_or_else(|| \"unknown\".to_string()),\n    |                                        ^^^^^^^^^^^^^^ method not found in `std::string::String`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `unwrap_or_else` found for struct `std::string::String` in the current scope","spans":[{"byte_end":9742,"byte_start":9728,"column_end":54,"column_start":40,"expansion":null,"file_name":"src/services/payments.rs","is_primary":true,"label":"method not found in `std::string::String`","line_end":297,"line_start":297,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":40,"text":"                status: payment.status.unwrap_or_else(|| \"unknown\".to_string()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `ParseError` found for enum `errors::ServiceError` in the current scope\n   --> src/services/commerce/agentic_checkout.rs:107:48\n    |\n107 |                     .map_err(|e| ServiceError::ParseError(e.to_string()))?;\n    |                                                ^^^^^^^^^^ variant or associated item not found in `errors::ServiceError`\n    |\n   ::: src/errors.rs:29:1\n    |\n 29 | pub enum ServiceError {\n    | --------------------- variant or associated item `ParseError` not found for this enum\n    |\nnote: if you're trying to build a new `errors::ServiceError` consider using one of the following associated functions:\n      errors::ServiceError::db_error\n      errors::ServiceError::database_error_message\n   --> src/errors.rs:160:5\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n165 |     pub fn database_error_message(message: impl Into<String>) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: there is a variant with a similar name\n    |\n107 -                     .map_err(|e| ServiceError::ParseError(e.to_string()))?;\n107 +                     .map_err(|e| ServiceError::HashError(e.to_string()))?;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `errors::ServiceError` consider using one of the following associated functions:\nerrors::ServiceError::db_error\nerrors::ServiceError::database_error_message","rendered":null,"spans":[{"byte_end":3570,"byte_start":3523,"column_end":52,"column_start":5,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":5,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]},{"byte_end":3781,"byte_start":3716,"column_end":70,"column_start":5,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":165,"line_start":165,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":5,"text":"    pub fn database_error_message(message: impl Into<String>) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"there is a variant with a similar name","rendered":null,"spans":[{"byte_end":3501,"byte_start":3491,"column_end":58,"column_start":48,"expansion":null,"file_name":"src/services/commerce/agentic_checkout.rs","is_primary":true,"label":null,"line_end":107,"line_start":107,"suggested_replacement":"HashError","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":58,"highlight_start":48,"text":"                    .map_err(|e| ServiceError::ParseError(e.to_string()))?;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `ParseError` found for enum `errors::ServiceError` in the current scope","spans":[{"byte_end":3501,"byte_start":3491,"column_end":58,"column_start":48,"expansion":null,"file_name":"src/services/commerce/agentic_checkout.rs","is_primary":true,"label":"variant or associated item not found in `errors::ServiceError`","line_end":107,"line_start":107,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":48,"text":"                    .map_err(|e| ServiceError::ParseError(e.to_string()))?;"}]},{"byte_end":701,"byte_start":680,"column_end":22,"column_start":1,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":"variant or associated item `ParseError` not found for this enum","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":1,"text":"pub enum ServiceError {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: `sea_orm::Select<entities::order::Entity>` is not an iterator\n  --> src/services/analytics.rs:92:48\n   |\n92 |         let total_orders = OrderEntity::find().count(db).await\n   |                                                ^^^^^ `sea_orm::Select<entities::order::Entity>` is not an iterator\n   |\n  ::: /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs:8:1\n   |\n 8 | pub struct Select<E>\n   | -------------------- doesn't satisfy `sea_orm::Select<entities::order::Entity>: Iterator`\n   |\n   = note: the following trait bounds were not satisfied:\n           `sea_orm::Select<entities::order::Entity>: Iterator`\n           which is required by `&mut sea_orm::Select<entities::order::Entity>: Iterator`\n   = help: items from traits can only be used if the trait is in scope\nhelp: trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it\n   |\n 1 + use sea_orm::PaginatorTrait;\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`sea_orm::Select<entities::order::Entity>: Iterator`\nwhich is required by `&mut sea_orm::Select<entities::order::Entity>: Iterator`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use sea_orm::PaginatorTrait;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use std::sync::Arc;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"`sea_orm::Select<entities::order::Entity>` is not an iterator","spans":[{"byte_end":2883,"byte_start":2878,"column_end":53,"column_start":48,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":"`sea_orm::Select<entities::order::Entity>` is not an iterator","line_end":92,"line_start":92,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":48,"text":"        let total_orders = OrderEntity::find().count(db).await"}]},{"byte_end":317,"byte_start":297,"column_end":21,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs","is_primary":false,"label":"doesn't satisfy `sea_orm::Select<entities::order::Entity>: Iterator`","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":1,"text":"pub struct Select<E>"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: `sea_orm::Select<entities::order::Entity>` is not an iterator\n   --> src/services/analytics.rs:111:14\n    |\n109 |           let orders_today = OrderEntity::find()\n    |  ____________________________-\n110 | |             .filter(OrderColumn::CreatedAt.gte(today_start))\n111 | |             .count(db).await\n    | |             -^^^^^ `sea_orm::Select<entities::order::Entity>` is not an iterator\n    | |_____________|\n    |\n    |\n   ::: /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs:8:1\n    |\n  8 |   pub struct Select<E>\n    |   -------------------- doesn't satisfy `sea_orm::Select<entities::order::Entity>: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n            `sea_orm::Select<entities::order::Entity>: Iterator`\n            which is required by `&mut sea_orm::Select<entities::order::Entity>: Iterator`\n    = help: items from traits can only be used if the trait is in scope\nhelp: trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it\n    |\n  1 + use sea_orm::PaginatorTrait;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`sea_orm::Select<entities::order::Entity>: Iterator`\nwhich is required by `&mut sea_orm::Select<entities::order::Entity>: Iterator`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use sea_orm::PaginatorTrait;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use std::sync::Arc;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"`sea_orm::Select<entities::order::Entity>` is not an iterator","spans":[{"byte_end":3505,"byte_start":3411,"column_end":14,"column_start":28,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":false,"label":"","line_end":111,"line_start":109,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":28,"text":"        let orders_today = OrderEntity::find()"},{"highlight_end":61,"highlight_start":1,"text":"            .filter(OrderColumn::CreatedAt.gte(today_start))"},{"highlight_end":14,"highlight_start":1,"text":"            .count(db).await"}]},{"byte_end":3510,"byte_start":3505,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":"`sea_orm::Select<entities::order::Entity>` is not an iterator","line_end":111,"line_start":111,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"            .count(db).await"}]},{"byte_end":317,"byte_start":297,"column_end":21,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs","is_primary":false,"label":"doesn't satisfy `sea_orm::Select<entities::order::Entity>: Iterator`","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":1,"text":"pub struct Select<E>"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: `sea_orm::Select<entities::order::Entity>` is not an iterator\n   --> src/services/analytics.rs:126:14\n    |\n124 |           let orders_this_week = OrderEntity::find()\n    |  ________________________________-\n125 | |             .filter(OrderColumn::CreatedAt.gte(week_start))\n126 | |             .count(db).await\n    | |             -^^^^^ `sea_orm::Select<entities::order::Entity>` is not an iterator\n    | |_____________|\n    |\n    |\n   ::: /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs:8:1\n    |\n  8 |   pub struct Select<E>\n    |   -------------------- doesn't satisfy `sea_orm::Select<entities::order::Entity>: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n            `sea_orm::Select<entities::order::Entity>: Iterator`\n            which is required by `&mut sea_orm::Select<entities::order::Entity>: Iterator`\n    = help: items from traits can only be used if the trait is in scope\nhelp: trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it\n    |\n  1 + use sea_orm::PaginatorTrait;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`sea_orm::Select<entities::order::Entity>: Iterator`\nwhich is required by `&mut sea_orm::Select<entities::order::Entity>: Iterator`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use sea_orm::PaginatorTrait;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use std::sync::Arc;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"`sea_orm::Select<entities::order::Entity>` is not an iterator","spans":[{"byte_end":4050,"byte_start":3957,"column_end":14,"column_start":32,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":false,"label":"","line_end":126,"line_start":124,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":32,"text":"        let orders_this_week = OrderEntity::find()"},{"highlight_end":60,"highlight_start":1,"text":"            .filter(OrderColumn::CreatedAt.gte(week_start))"},{"highlight_end":14,"highlight_start":1,"text":"            .count(db).await"}]},{"byte_end":4055,"byte_start":4050,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":"`sea_orm::Select<entities::order::Entity>` is not an iterator","line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"            .count(db).await"}]},{"byte_end":317,"byte_start":297,"column_end":21,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs","is_primary":false,"label":"doesn't satisfy `sea_orm::Select<entities::order::Entity>: Iterator`","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":1,"text":"pub struct Select<E>"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: `sea_orm::Select<entities::order::Entity>` is not an iterator\n   --> src/services/analytics.rs:141:14\n    |\n139 |           let orders_this_month = OrderEntity::find()\n    |  _________________________________-\n140 | |             .filter(OrderColumn::CreatedAt.gte(month_start))\n141 | |             .count(db).await\n    | |             -^^^^^ `sea_orm::Select<entities::order::Entity>` is not an iterator\n    | |_____________|\n    |\n    |\n   ::: /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs:8:1\n    |\n  8 |   pub struct Select<E>\n    |   -------------------- doesn't satisfy `sea_orm::Select<entities::order::Entity>: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n            `sea_orm::Select<entities::order::Entity>: Iterator`\n            which is required by `&mut sea_orm::Select<entities::order::Entity>: Iterator`\n    = help: items from traits can only be used if the trait is in scope\nhelp: trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it\n    |\n  1 + use sea_orm::PaginatorTrait;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`sea_orm::Select<entities::order::Entity>: Iterator`\nwhich is required by `&mut sea_orm::Select<entities::order::Entity>: Iterator`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use sea_orm::PaginatorTrait;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use std::sync::Arc;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"`sea_orm::Select<entities::order::Entity>` is not an iterator","spans":[{"byte_end":4599,"byte_start":4505,"column_end":14,"column_start":33,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":false,"label":"","line_end":141,"line_start":139,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":33,"text":"        let orders_this_month = OrderEntity::find()"},{"highlight_end":61,"highlight_start":1,"text":"            .filter(OrderColumn::CreatedAt.gte(month_start))"},{"highlight_end":14,"highlight_start":1,"text":"            .count(db).await"}]},{"byte_end":4604,"byte_start":4599,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":"`sea_orm::Select<entities::order::Entity>` is not an iterator","line_end":141,"line_start":141,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"            .count(db).await"}]},{"byte_end":317,"byte_start":297,"column_end":21,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs","is_primary":false,"label":"doesn't satisfy `sea_orm::Select<entities::order::Entity>: Iterator`","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":1,"text":"pub struct Select<E>"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: `sea_orm::Select<entities::inventory_items::Entity>` is not an iterator\n   --> src/services/analytics.rs:170:54\n    |\n170 |         let total_products = InventoryEntity::find().count(db).await\n    |                                                      ^^^^^ `sea_orm::Select<entities::inventory_items::Entity>` is not an iterator\n    |\n   ::: /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs:8:1\n    |\n  8 | pub struct Select<E>\n    | -------------------- doesn't satisfy `_: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n            `sea_orm::Select<entities::inventory_items::Entity>: Iterator`\n            which is required by `&mut sea_orm::Select<entities::inventory_items::Entity>: Iterator`\n    = help: items from traits can only be used if the trait is in scope\nhelp: trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it\n    |\n  1 + use sea_orm::PaginatorTrait;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`sea_orm::Select<entities::inventory_items::Entity>: Iterator`\nwhich is required by `&mut sea_orm::Select<entities::inventory_items::Entity>: Iterator`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use sea_orm::PaginatorTrait;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use std::sync::Arc;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"`sea_orm::Select<entities::inventory_items::Entity>` is not an iterator","spans":[{"byte_end":5608,"byte_start":5603,"column_end":59,"column_start":54,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":"`sea_orm::Select<entities::inventory_items::Entity>` is not an iterator","line_end":170,"line_start":170,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":54,"text":"        let total_products = InventoryEntity::find().count(db).await"}]},{"byte_end":317,"byte_start":297,"column_end":21,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs","is_primary":false,"label":"doesn't satisfy `_: Iterator`","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":1,"text":"pub struct Select<E>"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: `sea_orm::Select<entities::inventory_items::Entity>` is not an iterator\n   --> src/services/analytics.rs:175:14\n    |\n173 |           let low_stock_items = InventoryEntity::find()\n    |  _______________________________-\n174 | |             .filter(InventoryColumn::Available.lte(10))\n175 | |             .count(db).await\n    | |             -^^^^^ `sea_orm::Select<entities::inventory_items::Entity>` is not an iterator\n    | |_____________|\n    |\n    |\n   ::: /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs:8:1\n    |\n  8 |   pub struct Select<E>\n    |   -------------------- doesn't satisfy `_: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n            `sea_orm::Select<entities::inventory_items::Entity>: Iterator`\n            which is required by `&mut sea_orm::Select<entities::inventory_items::Entity>: Iterator`\n    = help: items from traits can only be used if the trait is in scope\nhelp: trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it\n    |\n  1 + use sea_orm::PaginatorTrait;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`sea_orm::Select<entities::inventory_items::Entity>: Iterator`\nwhich is required by `&mut sea_orm::Select<entities::inventory_items::Entity>: Iterator`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use sea_orm::PaginatorTrait;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use std::sync::Arc;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"`sea_orm::Select<entities::inventory_items::Entity>` is not an iterator","spans":[{"byte_end":5804,"byte_start":5711,"column_end":14,"column_start":31,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":false,"label":"","line_end":175,"line_start":173,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":31,"text":"        let low_stock_items = InventoryEntity::find()"},{"highlight_end":56,"highlight_start":1,"text":"            .filter(InventoryColumn::Available.lte(10))"},{"highlight_end":14,"highlight_start":1,"text":"            .count(db).await"}]},{"byte_end":5809,"byte_start":5804,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":"`sea_orm::Select<entities::inventory_items::Entity>` is not an iterator","line_end":175,"line_start":175,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"            .count(db).await"}]},{"byte_end":317,"byte_start":297,"column_end":21,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs","is_primary":false,"label":"doesn't satisfy `_: Iterator`","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":1,"text":"pub struct Select<E>"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: `sea_orm::Select<entities::inventory_items::Entity>` is not an iterator\n   --> src/services/analytics.rs:180:14\n    |\n178 |           let out_of_stock_items = InventoryEntity::find()\n    |  __________________________________-\n179 | |             .filter(InventoryColumn::Available.eq(0))\n180 | |             .count(db).await\n    | |             -^^^^^ `sea_orm::Select<entities::inventory_items::Entity>` is not an iterator\n    | |_____________|\n    |\n    |\n   ::: /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs:8:1\n    |\n  8 |   pub struct Select<E>\n    |   -------------------- doesn't satisfy `_: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n            `sea_orm::Select<entities::inventory_items::Entity>: Iterator`\n            which is required by `&mut sea_orm::Select<entities::inventory_items::Entity>: Iterator`\n    = help: items from traits can only be used if the trait is in scope\nhelp: trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it\n    |\n  1 + use sea_orm::PaginatorTrait;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`sea_orm::Select<entities::inventory_items::Entity>: Iterator`\nwhich is required by `&mut sea_orm::Select<entities::inventory_items::Entity>: Iterator`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use sea_orm::PaginatorTrait;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use std::sync::Arc;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"`sea_orm::Select<entities::inventory_items::Entity>` is not an iterator","spans":[{"byte_end":6006,"byte_start":5915,"column_end":14,"column_start":34,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":false,"label":"","line_end":180,"line_start":178,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":34,"text":"        let out_of_stock_items = InventoryEntity::find()"},{"highlight_end":54,"highlight_start":1,"text":"            .filter(InventoryColumn::Available.eq(0))"},{"highlight_end":14,"highlight_start":1,"text":"            .count(db).await"}]},{"byte_end":6011,"byte_start":6006,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":"`sea_orm::Select<entities::inventory_items::Entity>` is not an iterator","line_end":180,"line_start":180,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"            .count(db).await"}]},{"byte_end":317,"byte_start":297,"column_end":21,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs","is_primary":false,"label":"doesn't satisfy `_: Iterator`","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":1,"text":"pub struct Select<E>"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: `sea_orm::Select<models::shipment::Entity>` is not an iterator\n   --> src/services/analytics.rs:214:54\n    |\n214 |         let total_shipments = ShipmentEntity::find().count(db).await\n    |                                                      ^^^^^ `sea_orm::Select<models::shipment::Entity>` is not an iterator\n    |\n   ::: /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs:8:1\n    |\n  8 | pub struct Select<E>\n    | -------------------- doesn't satisfy `_: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n            `sea_orm::Select<models::shipment::Entity>: Iterator`\n            which is required by `&mut sea_orm::Select<models::shipment::Entity>: Iterator`\n    = help: items from traits can only be used if the trait is in scope\nhelp: trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it\n    |\n  1 + use sea_orm::PaginatorTrait;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`sea_orm::Select<models::shipment::Entity>: Iterator`\nwhich is required by `&mut sea_orm::Select<models::shipment::Entity>: Iterator`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use sea_orm::PaginatorTrait;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use std::sync::Arc;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"`sea_orm::Select<models::shipment::Entity>` is not an iterator","spans":[{"byte_end":7282,"byte_start":7277,"column_end":59,"column_start":54,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":"`sea_orm::Select<models::shipment::Entity>` is not an iterator","line_end":214,"line_start":214,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":54,"text":"        let total_shipments = ShipmentEntity::find().count(db).await"}]},{"byte_end":317,"byte_start":297,"column_end":21,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs","is_primary":false,"label":"doesn't satisfy `_: Iterator`","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":1,"text":"pub struct Select<E>"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: `sea_orm::Select<models::shipment::Entity>` is not an iterator\n   --> src/services/analytics.rs:219:14\n    |\n217 |           let pending_shipments = ShipmentEntity::find()\n    |  _________________________________-\n218 | |             .filter(ShipmentColumn::Status.eq(\"pending\"))\n219 | |             .count(db).await\n    | |             -^^^^^ `sea_orm::Select<models::shipment::Entity>` is not an iterator\n    | |_____________|\n    |\n    |\n   ::: /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs:8:1\n    |\n  8 |   pub struct Select<E>\n    |   -------------------- doesn't satisfy `_: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n            `sea_orm::Select<models::shipment::Entity>: Iterator`\n            which is required by `&mut sea_orm::Select<models::shipment::Entity>: Iterator`\n    = help: items from traits can only be used if the trait is in scope\nhelp: trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it\n    |\n  1 + use sea_orm::PaginatorTrait;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`sea_orm::Select<models::shipment::Entity>: Iterator`\nwhich is required by `&mut sea_orm::Select<models::shipment::Entity>: Iterator`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use sea_orm::PaginatorTrait;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use std::sync::Arc;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"`sea_orm::Select<models::shipment::Entity>` is not an iterator","spans":[{"byte_end":7481,"byte_start":7387,"column_end":14,"column_start":33,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":false,"label":"","line_end":219,"line_start":217,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":33,"text":"        let pending_shipments = ShipmentEntity::find()"},{"highlight_end":58,"highlight_start":1,"text":"            .filter(ShipmentColumn::Status.eq(\"pending\"))"},{"highlight_end":14,"highlight_start":1,"text":"            .count(db).await"}]},{"byte_end":7486,"byte_start":7481,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":"`sea_orm::Select<models::shipment::Entity>` is not an iterator","line_end":219,"line_start":219,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"            .count(db).await"}]},{"byte_end":317,"byte_start":297,"column_end":21,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs","is_primary":false,"label":"doesn't satisfy `_: Iterator`","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":1,"text":"pub struct Select<E>"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: `sea_orm::Select<models::shipment::Entity>` is not an iterator\n   --> src/services/analytics.rs:225:14\n    |\n222 |           let shipped_today = ShipmentEntity::find()\n    |  _____________________________-\n223 | |             .filter(ShipmentColumn::CreatedAt.gte(today_start))\n224 | |             .filter(ShipmentColumn::Status.eq(\"shipped\"))\n225 | |             .count(db).await\n    | |             -^^^^^ `sea_orm::Select<models::shipment::Entity>` is not an iterator\n    | |_____________|\n    |\n    |\n   ::: /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs:8:1\n    |\n  8 |   pub struct Select<E>\n    |   -------------------- doesn't satisfy `_: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n            `sea_orm::Select<models::shipment::Entity>: Iterator`\n            which is required by `&mut sea_orm::Select<models::shipment::Entity>: Iterator`\n    = help: items from traits can only be used if the trait is in scope\nhelp: trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it\n    |\n  1 + use sea_orm::PaginatorTrait;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`sea_orm::Select<models::shipment::Entity>: Iterator`\nwhich is required by `&mut sea_orm::Select<models::shipment::Entity>: Iterator`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use sea_orm::PaginatorTrait;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use std::sync::Arc;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"`sea_orm::Select<models::shipment::Entity>` is not an iterator","spans":[{"byte_end":7745,"byte_start":7587,"column_end":14,"column_start":29,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":false,"label":"","line_end":225,"line_start":222,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":29,"text":"        let shipped_today = ShipmentEntity::find()"},{"highlight_end":64,"highlight_start":1,"text":"            .filter(ShipmentColumn::CreatedAt.gte(today_start))"},{"highlight_end":58,"highlight_start":1,"text":"            .filter(ShipmentColumn::Status.eq(\"shipped\"))"},{"highlight_end":14,"highlight_start":1,"text":"            .count(db).await"}]},{"byte_end":7750,"byte_start":7745,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":"`sea_orm::Select<models::shipment::Entity>` is not an iterator","line_end":225,"line_start":225,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"            .count(db).await"}]},{"byte_end":317,"byte_start":297,"column_end":21,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs","is_primary":false,"label":"doesn't satisfy `_: Iterator`","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":1,"text":"pub struct Select<E>"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: `sea_orm::Select<models::shipment::Entity>` is not an iterator\n   --> src/services/analytics.rs:231:14\n    |\n228 |           let delivered_today = ShipmentEntity::find()\n    |  _______________________________-\n229 | |             .filter(ShipmentColumn::CreatedAt.gte(today_start))\n230 | |             .filter(ShipmentColumn::Status.eq(\"delivered\"))\n231 | |             .count(db).await\n    | |             -^^^^^ `sea_orm::Select<models::shipment::Entity>` is not an iterator\n    | |_____________|\n    |\n    |\n   ::: /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs:8:1\n    |\n  8 |   pub struct Select<E>\n    |   -------------------- doesn't satisfy `_: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n            `sea_orm::Select<models::shipment::Entity>: Iterator`\n            which is required by `&mut sea_orm::Select<models::shipment::Entity>: Iterator`\n    = help: items from traits can only be used if the trait is in scope\nhelp: trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it\n    |\n  1 + use sea_orm::PaginatorTrait;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`sea_orm::Select<models::shipment::Entity>: Iterator`\nwhich is required by `&mut sea_orm::Select<models::shipment::Entity>: Iterator`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `PaginatorTrait` which provides `count` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use sea_orm::PaginatorTrait;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use std::sync::Arc;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"`sea_orm::Select<models::shipment::Entity>` is not an iterator","spans":[{"byte_end":8013,"byte_start":7853,"column_end":14,"column_start":31,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":false,"label":"","line_end":231,"line_start":228,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":31,"text":"        let delivered_today = ShipmentEntity::find()"},{"highlight_end":64,"highlight_start":1,"text":"            .filter(ShipmentColumn::CreatedAt.gte(today_start))"},{"highlight_end":60,"highlight_start":1,"text":"            .filter(ShipmentColumn::Status.eq(\"delivered\"))"},{"highlight_end":14,"highlight_start":1,"text":"            .count(db).await"}]},{"byte_end":8018,"byte_start":8013,"column_end":19,"column_start":14,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":"`sea_orm::Select<models::shipment::Entity>` is not an iterator","line_end":231,"line_start":231,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":14,"text":"            .count(db).await"}]},{"byte_end":317,"byte_start":297,"column_end":21,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/query/select.rs","is_primary":false,"label":"doesn't satisfy `_: Iterator`","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":1,"text":"pub struct Select<E>"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: `chrono::DateTime<Utc>` is not an iterator\n   --> src/services/analytics.rs:243:34\n    |\n243 |                     s.created_at.zip(s.updated_at).map(|(created, updated)| {\n    |                                  ^^^ `chrono::DateTime<Utc>` is not an iterator\n    |\n   ::: /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/src/datetime/mod.rs:56:1\n    |\n 56 | pub struct DateTime<Tz: TimeZone> {\n    | --------------------------------- doesn't satisfy `chrono::DateTime<Utc>: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n            `chrono::DateTime<Utc>: Iterator`\n            which is required by `&mut chrono::DateTime<Utc>: Iterator`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`chrono::DateTime<Utc>: Iterator`\nwhich is required by `&mut chrono::DateTime<Utc>: Iterator`","rendered":null,"spans":[]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"`chrono::DateTime<Utc>` is not an iterator","spans":[{"byte_end":8564,"byte_start":8561,"column_end":37,"column_start":34,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":"`chrono::DateTime<Utc>` is not an iterator","line_end":243,"line_start":243,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":34,"text":"                    s.created_at.zip(s.updated_at).map(|(created, updated)| {"}]},{"byte_end":1936,"byte_start":1903,"column_end":34,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/src/datetime/mod.rs","is_primary":false,"label":"doesn't satisfy `chrono::DateTime<Utc>: Iterator`","line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"pub struct DateTime<Tz: TimeZone> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/analytics.rs:271:26\n    |\n271 |             .map_err(|e| ServiceError::db_error(e.into()))?;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^ -------- type must be known at this point\n    |                          |\n    |                          cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\n    = note: cannot satisfy `_: IntoDbErr`\n    = help: the following types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\nhelp: consider specifying the generic argument\n    |\n271 |             .map_err(|e| ServiceError::db_error::<E>(e.into()))?;\n    |                                                +++++\nhelp: consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds\n    |\n271 -             .map_err(|e| ServiceError::db_error(e.into()))?;\n271 +             .map_err(|e| ServiceError::db_error(e))?;\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"cannot satisfy `_: IntoDbErr`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":9604,"byte_start":9604,"column_end":48,"column_start":48,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":271,"line_start":271,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":48,"highlight_start":48,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `sea_orm::DbErr` and `sea_orm::DbErr: IntoDbErr` trivially holds","rendered":null,"spans":[{"byte_end":9613,"byte_start":9606,"column_end":57,"column_start":50,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":271,"line_start":271,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":57,"highlight_start":50,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":9613,"byte_start":9605,"column_end":57,"column_start":49,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":false,"label":"type must be known at this point","line_end":271,"line_start":271,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":49,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]},{"byte_end":9604,"byte_start":9582,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":271,"line_start":271,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":26,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0283]: type annotations needed\n   --> src/services/analytics.rs:271:26\n    |\n271 |             .map_err(|e| ServiceError::db_error(e.into()))?;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^   ---- type must be known at this point\n    |                          |\n    |                          cannot infer type of the type parameter `E` declared on the associated function `db_error`\n    |\nnote: multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found\n   --> src/errors.rs:28:17\n    |\n 28 | #[derive(Debug, thiserror::Error, Serialize)]\n    |                 ^^^^^^^^^^^^^^^^\n    |\n   ::: src/models/shipment.rs:126:10\n    |\n126 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/suppliers.rs:13:10\n    |\n 13 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cog_entries.rs:56:10\n    |\n 56 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cycle_count_line_item.rs:44:10\n    |\n 44 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/cyclecounts.rs:105:10\n    |\n105 | #[derive(Error, Debug)]\n    |          ^^^^^\n    |\n   ::: src/models/machine.rs:16:10\n    |\n 16 | #[derive(Error, Debug)]\n    |          ^^^^^\n    = note: and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`\n    = note: required for `sea_orm::DbErr` to implement `Into<_>`\n    = note: this error originates in the derive macro `thiserror::Error` which comes from the expansion of the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider specifying the generic argument\n    |\n271 |             .map_err(|e| ServiceError::db_error::<E>(e.into()))?;\n    |                                                +++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"multiple `impl`s satisfying `_: From<sea_orm::DbErr>` found","rendered":null,"spans":[{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(thiserror::Error)]","span":{"byte_end":666,"byte_start":650,"column_end":33,"column_start":17,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]}},"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":17,"text":"#[derive(Debug, thiserror::Error, Serialize)]"}]},{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3985,"byte_start":3980,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/shipment.rs","is_primary":false,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/shipment.rs","is_primary":true,"label":null,"line_end":126,"line_start":126,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":494,"byte_start":489,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/suppliers.rs","is_primary":false,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/suppliers.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1707,"byte_start":1702,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cog_entries.rs","is_primary":false,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cog_entries.rs","is_primary":true,"label":null,"line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":1299,"byte_start":1294,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cycle_count_line_item.rs","is_primary":false,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cycle_count_line_item.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":3182,"byte_start":3177,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/cyclecounts.rs","is_primary":false,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/cyclecounts.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]},{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":{"def_site_span":{"byte_end":797,"byte_start":743,"column_end":55,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-1.0.69/src/lib.rs","is_primary":false,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":1,"text":"pub fn derive_error(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(Error)]","span":{"byte_end":524,"byte_start":519,"column_end":15,"column_start":10,"expansion":null,"file_name":"src/models/machine.rs","is_primary":false,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}},"file_name":"src/models/machine.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":10,"text":"#[derive(Error, Debug)]"}]}]},{"children":[],"code":null,"level":"note","message":"and another `impl` found in the `sea_orm` crate: `impl From<sea_orm::DbErr> for sea_orm::TryGetError;`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `sea_orm::DbErr` to implement `Into<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider specifying the generic argument","rendered":null,"spans":[{"byte_end":9604,"byte_start":9604,"column_end":48,"column_start":48,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":null,"line_end":271,"line_start":271,"suggested_replacement":"::<E>","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":48,"highlight_start":48,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}],"code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":9611,"byte_start":9607,"column_end":55,"column_start":51,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":false,"label":"type must be known at this point","line_end":271,"line_start":271,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":51,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]},{"byte_end":9604,"byte_start":9582,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/services/analytics.rs","is_primary":true,"label":"cannot infer type of the type parameter `E` declared on the associated function `db_error`","line_end":271,"line_start":271,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":26,"text":"            .map_err(|e| ServiceError::db_error(e.into()))?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `and_utc` found for struct `chrono::DateTime` in the current scope\n   --> src/api.rs:102:31\n    |\n102 |         seconds: o.created_at.and_utc().timestamp(),\n    |                               ^^^^^^^ method not found in `chrono::DateTime<Utc>`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `and_utc` found for struct `chrono::DateTime` in the current scope","spans":[{"byte_end":3745,"byte_start":3738,"column_end":38,"column_start":31,"expansion":null,"file_name":"src/api.rs","is_primary":true,"label":"method not found in `chrono::DateTime<Utc>`","line_end":102,"line_start":102,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":31,"text":"        seconds: o.created_at.and_utc().timestamp(),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `and_utc` found for struct `chrono::DateTime` in the current scope\n   --> src/api.rs:103:29\n    |\n103 |         nanos: o.created_at.and_utc().timestamp_subsec_nanos() as i32,\n    |                             ^^^^^^^ method not found in `chrono::DateTime<Utc>`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `and_utc` found for struct `chrono::DateTime` in the current scope","spans":[{"byte_end":3796,"byte_start":3789,"column_end":36,"column_start":29,"expansion":null,"file_name":"src/api.rs","is_primary":true,"label":"method not found in `chrono::DateTime<Utc>`","line_end":103,"line_start":103,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":29,"text":"        nanos: o.created_at.and_utc().timestamp_subsec_nanos() as i32,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `and_utc` found for struct `chrono::DateTime` in the current scope\n   --> src/api.rs:174:45\n    |\n174 |                 seconds: created.created_at.and_utc().timestamp(),\n    |                                             ^^^^^^^ method not found in `chrono::DateTime<Utc>`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `and_utc` found for struct `chrono::DateTime` in the current scope","spans":[{"byte_end":6841,"byte_start":6834,"column_end":52,"column_start":45,"expansion":null,"file_name":"src/api.rs","is_primary":true,"label":"method not found in `chrono::DateTime<Utc>`","line_end":174,"line_start":174,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":45,"text":"                seconds: created.created_at.and_utc().timestamp(),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `and_utc` found for struct `chrono::DateTime` in the current scope\n   --> src/api.rs:175:43\n    |\n175 |                 nanos: created.created_at.and_utc().timestamp_subsec_nanos() as i32,\n    |                                           ^^^^^^^ method not found in `chrono::DateTime<Utc>`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `and_utc` found for struct `chrono::DateTime` in the current scope","spans":[{"byte_end":6906,"byte_start":6899,"column_end":50,"column_start":43,"expansion":null,"file_name":"src/api.rs","is_primary":true,"label":"method not found in `chrono::DateTime<Utc>`","line_end":175,"line_start":175,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":43,"text":"                nanos: created.created_at.and_utc().timestamp_subsec_nanos() as i32,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: use of deprecated associated function `chrono::NaiveDateTime::from_timestamp`: use `DateTime::from_timestamp` instead\n   --> src/api.rs:243:56\n    |\n243 |             .and_then(|ts| Some(chrono::NaiveDateTime::from_timestamp(ts.seconds, ts.nanos as u32)))\n    |                                                        ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(deprecated)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(deprecated)]` on by default","rendered":null,"spans":[]}],"code":{"code":"deprecated","explanation":null},"level":"warning","message":"use of deprecated associated function `chrono::NaiveDateTime::from_timestamp`: use `DateTime::from_timestamp` instead","spans":[{"byte_end":9525,"byte_start":9511,"column_end":70,"column_start":56,"expansion":null,"file_name":"src/api.rs","is_primary":true,"label":null,"line_end":243,"line_start":243,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":56,"text":"            .and_then(|ts| Some(chrono::NaiveDateTime::from_timestamp(ts.seconds, ts.nanos as u32)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: use of deprecated associated function `chrono::NaiveDateTime::from_timestamp`: use `DateTime::from_timestamp` instead\n   --> src/api.rs:248:56\n    |\n248 |             .and_then(|ts| Some(chrono::NaiveDateTime::from_timestamp(ts.seconds, ts.nanos as u32)))\n    |                                                        ^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"deprecated","explanation":null},"level":"warning","message":"use of deprecated associated function `chrono::NaiveDateTime::from_timestamp`: use `DateTime::from_timestamp` instead","spans":[{"byte_end":9799,"byte_start":9785,"column_end":70,"column_start":56,"expansion":null,"file_name":"src/api.rs","is_primary":true,"label":null,"line_end":248,"line_start":248,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":56,"text":"            .and_then(|ts| Some(chrono::NaiveDateTime::from_timestamp(ts.seconds, ts.nanos as u32)))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: the method `validate` exists for reference `&std::string::String`, but its trait bounds were not satisfied\n  --> src/commands/advancedshippingnotice/add_item_to_asn_command.rs:30:41\n   |\n30 | #[derive(Debug, Serialize, Deserialize, Validate)]\n   |                                         ^^^^^^^^ method cannot be called on `&std::string::String` due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n           `std::string::String: Validate`\n           which is required by `&std::string::String: Validate`\n   = note: this error originates in the derive macro `Validate` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`std::string::String: Validate`\nwhich is required by `&std::string::String: Validate`","rendered":null,"spans":[]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"the method `validate` exists for reference `&std::string::String`, but its trait bounds were not satisfied","spans":[{"byte_end":843,"byte_start":835,"column_end":49,"column_start":41,"expansion":{"def_site_span":{"byte_end":679,"byte_start":660,"column_end":20,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/validator_derive-0.14.0/src/lib.rs","is_primary":false,"label":null,"line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"#[proc_macro_error]"}]},"macro_decl_name":"#[derive(Validate)]","span":{"byte_end":843,"byte_start":835,"column_end":49,"column_start":41,"expansion":null,"file_name":"src/commands/advancedshippingnotice/add_item_to_asn_command.rs","is_primary":false,"label":null,"line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":41,"text":"#[derive(Debug, Serialize, Deserialize, Validate)]"}]}},"file_name":"src/commands/advancedshippingnotice/add_item_to_asn_command.rs","is_primary":true,"label":"method cannot be called on `&std::string::String` due to unsatisfied trait bounds","line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":41,"text":"#[derive(Debug, Serialize, Deserialize, Validate)]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `ASNError` found for enum `errors::ServiceError` in the current scope\n   --> src/commands/advancedshippingnotice/cancel_asn_command.rs:79:70\n    |\n 79 |         self.validate_can_cancel(db).await.map_err(|e| ServiceError::ASNError(e))?;\n    |                                                                      ^^^^^^^^ variant or associated item not found in `errors::ServiceError`\n    |\n   ::: src/errors.rs:29:1\n    |\n 29 | pub enum ServiceError {\n    | --------------------- variant or associated item `ASNError` not found for this enum\n    |\nnote: if you're trying to build a new `errors::ServiceError` consider using one of the following associated functions:\n      errors::ServiceError::db_error\n      errors::ServiceError::database_error_message\n   --> src/errors.rs:160:5\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n165 |     pub fn database_error_message(message: impl Into<String>) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `errors::ServiceError` consider using one of the following associated functions:\nerrors::ServiceError::db_error\nerrors::ServiceError::database_error_message","rendered":null,"spans":[{"byte_end":3570,"byte_start":3523,"column_end":52,"column_start":5,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":5,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]},{"byte_end":3781,"byte_start":3716,"column_end":70,"column_start":5,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":165,"line_start":165,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":5,"text":"    pub fn database_error_message(message: impl Into<String>) -> Self {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `ASNError` found for enum `errors::ServiceError` in the current scope","spans":[{"byte_end":2396,"byte_start":2388,"column_end":78,"column_start":70,"expansion":null,"file_name":"src/commands/advancedshippingnotice/cancel_asn_command.rs","is_primary":true,"label":"variant or associated item not found in `errors::ServiceError`","line_end":79,"line_start":79,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":78,"highlight_start":70,"text":"        self.validate_can_cancel(db).await.map_err(|e| ServiceError::ASNError(e))?;"}]},{"byte_end":701,"byte_start":680,"column_end":22,"column_start":1,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":"variant or associated item `ASNError` not found for this enum","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":1,"text":"pub enum ServiceError {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `ASNError` found for enum `errors::ServiceError` in the current scope\n   --> src/commands/advancedshippingnotice/cancel_asn_command.rs:81:85\n    |\n 81 |         let updated_asn = self.cancel_asn_in_db(db).await.map_err(|e| ServiceError::ASNError(e))?;\n    |                                                                                     ^^^^^^^^ variant or associated item not found in `errors::ServiceError`\n    |\n   ::: src/errors.rs:29:1\n    |\n 29 | pub enum ServiceError {\n    | --------------------- variant or associated item `ASNError` not found for this enum\n    |\nnote: if you're trying to build a new `errors::ServiceError` consider using one of the following associated functions:\n      errors::ServiceError::db_error\n      errors::ServiceError::database_error_message\n   --> src/errors.rs:160:5\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n165 |     pub fn database_error_message(message: impl Into<String>) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `errors::ServiceError` consider using one of the following associated functions:\nerrors::ServiceError::db_error\nerrors::ServiceError::database_error_message","rendered":null,"spans":[{"byte_end":3570,"byte_start":3523,"column_end":52,"column_start":5,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":5,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]},{"byte_end":3781,"byte_start":3716,"column_end":70,"column_start":5,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":165,"line_start":165,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":5,"text":"    pub fn database_error_message(message: impl Into<String>) -> Self {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `ASNError` found for enum `errors::ServiceError` in the current scope","spans":[{"byte_end":2496,"byte_start":2488,"column_end":93,"column_start":85,"expansion":null,"file_name":"src/commands/advancedshippingnotice/cancel_asn_command.rs","is_primary":true,"label":"variant or associated item not found in `errors::ServiceError`","line_end":81,"line_start":81,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":93,"highlight_start":85,"text":"        let updated_asn = self.cancel_asn_in_db(db).await.map_err(|e| ServiceError::ASNError(e))?;"}]},{"byte_end":701,"byte_start":680,"column_end":22,"column_start":1,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":"variant or associated item `ASNError` not found for this enum","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":1,"text":"pub enum ServiceError {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `ASNError` found for enum `errors::ServiceError` in the current scope\n   --> src/commands/advancedshippingnotice/cancel_asn_command.rs:84:46\n    |\n 84 |             .await.map_err(|e| ServiceError::ASNError(e))?;\n    |                                              ^^^^^^^^ variant or associated item not found in `errors::ServiceError`\n    |\n   ::: src/errors.rs:29:1\n    |\n 29 | pub enum ServiceError {\n    | --------------------- variant or associated item `ASNError` not found for this enum\n    |\nnote: if you're trying to build a new `errors::ServiceError` consider using one of the following associated functions:\n      errors::ServiceError::db_error\n      errors::ServiceError::database_error_message\n   --> src/errors.rs:160:5\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n165 |     pub fn database_error_message(message: impl Into<String>) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `errors::ServiceError` consider using one of the following associated functions:\nerrors::ServiceError::db_error\nerrors::ServiceError::database_error_message","rendered":null,"spans":[{"byte_end":3570,"byte_start":3523,"column_end":52,"column_start":5,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":5,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]},{"byte_end":3781,"byte_start":3716,"column_end":70,"column_start":5,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":165,"line_start":165,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":5,"text":"    pub fn database_error_message(message: impl Into<String>) -> Self {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `ASNError` found for enum `errors::ServiceError` in the current scope","spans":[{"byte_end":2622,"byte_start":2614,"column_end":54,"column_start":46,"expansion":null,"file_name":"src/commands/advancedshippingnotice/cancel_asn_command.rs","is_primary":true,"label":"variant or associated item not found in `errors::ServiceError`","line_end":84,"line_start":84,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":46,"text":"            .await.map_err(|e| ServiceError::ASNError(e))?;"}]},{"byte_end":701,"byte_start":680,"column_end":22,"column_start":1,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":"variant or associated item `ASNError` not found for this enum","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":1,"text":"pub enum ServiceError {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `sea_orm::TransactionError<errors::ServiceError>: IntoDbErr` is not satisfied\n   --> src/commands/advancedshippingnotice/delivered_asn_command.rs:69:49\n    |\n 69 |             .map_err(|e| ServiceError::db_error(e))?;\n    |                          ---------------------- ^ the trait `IntoDbErr` is not implemented for `sea_orm::TransactionError<errors::ServiceError>`\n    |                          |\n    |                          required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `sea_orm::TransactionError<errors::ServiceError>: IntoDbErr` is not satisfied","spans":[{"byte_end":2121,"byte_start":2120,"column_end":50,"column_start":49,"expansion":null,"file_name":"src/commands/advancedshippingnotice/delivered_asn_command.rs","is_primary":true,"label":"the trait `IntoDbErr` is not implemented for `sea_orm::TransactionError<errors::ServiceError>`","line_end":69,"line_start":69,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":49,"text":"            .map_err(|e| ServiceError::db_error(e))?;"}]},{"byte_end":2119,"byte_start":2097,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/commands/advancedshippingnotice/delivered_asn_command.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":69,"line_start":69,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":26,"text":"            .map_err(|e| ServiceError::db_error(e))?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/advancedshippingnotice/hold_asn_command.rs:66:21\n   |\n66 |             status: updated_asn.status,\n   |                     ^^^^^^^^^^^^^^^^^^ expected `String`, found `ASNStatus`\n   |\nhelp: try using a conversion method\n   |\n66 |             status: updated_asn.status.to_string(),\n   |                                       ++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"try using a conversion method","rendered":null,"spans":[{"byte_end":1671,"byte_start":1671,"column_end":39,"column_start":39,"expansion":null,"file_name":"src/commands/advancedshippingnotice/hold_asn_command.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":".to_string()","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":39,"highlight_start":39,"text":"            status: updated_asn.status,"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1671,"byte_start":1653,"column_end":39,"column_start":21,"expansion":null,"file_name":"src/commands/advancedshippingnotice/hold_asn_command.rs","is_primary":true,"label":"expected `String`, found `ASNStatus`","line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":21,"text":"            status: updated_asn.status,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `sea_orm::TransactionError<errors::ServiceError>: IntoDbErr` is not satisfied\n   --> src/commands/advancedshippingnotice/in_transit_asn_command.rs:69:49\n    |\n 69 |             .map_err(|e| ServiceError::db_error(e))?;\n    |                          ---------------------- ^ the trait `IntoDbErr` is not implemented for `sea_orm::TransactionError<errors::ServiceError>`\n    |                          |\n    |                          required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `sea_orm::TransactionError<errors::ServiceError>: IntoDbErr` is not satisfied","spans":[{"byte_end":2123,"byte_start":2122,"column_end":50,"column_start":49,"expansion":null,"file_name":"src/commands/advancedshippingnotice/in_transit_asn_command.rs","is_primary":true,"label":"the trait `IntoDbErr` is not implemented for `sea_orm::TransactionError<errors::ServiceError>`","line_end":69,"line_start":69,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":49,"text":"            .map_err(|e| ServiceError::db_error(e))?;"}]},{"byte_end":2121,"byte_start":2099,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/commands/advancedshippingnotice/in_transit_asn_command.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":69,"line_start":69,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":26,"text":"            .map_err(|e| ServiceError::db_error(e))?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `sea_orm::TransactionError<errors::ServiceError>: IntoDbErr` is not satisfied\n   --> src/commands/advancedshippingnotice/mark_asn_delivered_command.rs:81:49\n    |\n 81 |             .map_err(|e| ServiceError::db_error(e))?;\n    |                          ---------------------- ^ the trait `IntoDbErr` is not implemented for `sea_orm::TransactionError<errors::ServiceError>`\n    |                          |\n    |                          required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `sea_orm::TransactionError<errors::ServiceError>: IntoDbErr` is not satisfied","spans":[{"byte_end":2695,"byte_start":2694,"column_end":50,"column_start":49,"expansion":null,"file_name":"src/commands/advancedshippingnotice/mark_asn_delivered_command.rs","is_primary":true,"label":"the trait `IntoDbErr` is not implemented for `sea_orm::TransactionError<errors::ServiceError>`","line_end":81,"line_start":81,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":49,"text":"            .map_err(|e| ServiceError::db_error(e))?;"}]},{"byte_end":2693,"byte_start":2671,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/commands/advancedshippingnotice/mark_asn_delivered_command.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":81,"line_start":81,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":26,"text":"            .map_err(|e| ServiceError::db_error(e))?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `sea_orm::TransactionError<errors::ServiceError>: IntoDbErr` is not satisfied\n   --> src/commands/advancedshippingnotice/mark_asn_in_transit_command.rs:87:49\n    |\n 87 |             .map_err(|e| ServiceError::db_error(e))?;\n    |                          ---------------------- ^ the trait `IntoDbErr` is not implemented for `sea_orm::TransactionError<errors::ServiceError>`\n    |                          |\n    |                          required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `IntoDbErr`:\n              &str\n              sea_orm::DbErr\n              std::string::String\nnote: required by a bound in `errors::ServiceError::db_error`\n   --> src/errors.rs:160:24\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |                        ^^^^^^^^^ required by this bound in `ServiceError::db_error`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `IntoDbErr`:\n  &str\n  sea_orm::DbErr\n  std::string::String","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `errors::ServiceError::db_error`","rendered":null,"spans":[{"byte_end":3551,"byte_start":3542,"column_end":33,"column_start":24,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":"required by this bound in `ServiceError::db_error`","line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":24,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `sea_orm::TransactionError<errors::ServiceError>: IntoDbErr` is not satisfied","spans":[{"byte_end":2831,"byte_start":2830,"column_end":50,"column_start":49,"expansion":null,"file_name":"src/commands/advancedshippingnotice/mark_asn_in_transit_command.rs","is_primary":true,"label":"the trait `IntoDbErr` is not implemented for `sea_orm::TransactionError<errors::ServiceError>`","line_end":87,"line_start":87,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":49,"text":"            .map_err(|e| ServiceError::db_error(e))?;"}]},{"byte_end":2829,"byte_start":2807,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/commands/advancedshippingnotice/mark_asn_in_transit_command.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":87,"line_start":87,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":26,"text":"            .map_err(|e| ServiceError::db_error(e))?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/advancedshippingnotice/release_asn_from_hold_command.rs:68:21\n   |\n68 |             status: updated_asn.status,\n   |                     ^^^^^^^^^^^^^^^^^^ expected `String`, found `ASNStatus`\n   |\nhelp: try using a conversion method\n   |\n68 |             status: updated_asn.status.to_string(),\n   |                                       ++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"try using a conversion method","rendered":null,"spans":[{"byte_end":1760,"byte_start":1760,"column_end":39,"column_start":39,"expansion":null,"file_name":"src/commands/advancedshippingnotice/release_asn_from_hold_command.rs","is_primary":true,"label":null,"line_end":68,"line_start":68,"suggested_replacement":".to_string()","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":39,"highlight_start":39,"text":"            status: updated_asn.status,"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1760,"byte_start":1742,"column_end":39,"column_start":21,"expansion":null,"file_name":"src/commands/advancedshippingnotice/release_asn_from_hold_command.rs","is_primary":true,"label":"expected `String`, found `ASNStatus`","line_end":68,"line_start":68,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":21,"text":"            status: updated_asn.status,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/advancedshippingnotice/update_asn_item_command.rs:74:19\n   |\n74 |         .contains(&current_asn.status)\n   |          -------- ^^^^^^^^^^^^^^^^^^^ expected `&String`, found `&ASNStatus`\n   |          |\n   |          arguments to this method are incorrect\n   |\n   = note: expected reference `&std::string::String`\n              found reference `&ASNStatus`\nnote: method defined here\n  --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/slice/mod.rs:2583:12\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&std::string::String`\n   found reference `&ASNStatus`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":93467,"byte_start":93459,"column_end":20,"column_start":12,"expansion":null,"file_name":"/rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/slice/mod.rs","is_primary":true,"label":null,"line_end":2583,"line_start":2583,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2032,"byte_start":2013,"column_end":38,"column_start":19,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":"expected `&String`, found `&ASNStatus`","line_end":74,"line_start":74,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":19,"text":"        .contains(&current_asn.status)"}]},{"byte_end":2012,"byte_start":2004,"column_end":18,"column_start":10,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":74,"line_start":74,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":10,"text":"        .contains(&current_asn.status)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/advancedshippingnotice/update_asn_item_command.rs:76:48\n   |\n76 |             return Err(ASNError::InvalidStatus(self.asn_id));\n   |                        ----------------------- ^^^^^^^^^^^ expected `String`, found `Uuid`\n   |                        |\n   |                        arguments to this enum variant are incorrect\n   |\nnote: tuple variant defined here\n  --> src/errors.rs:67:5\n   |\n67 |     InvalidStatus(String),\n   |     ^^^^^^^^^^^^^\nhelp: try using a conversion method\n   |\n76 |             return Err(ASNError::InvalidStatus(self.asn_id.to_string()));\n   |                                                           ++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":1574,"byte_start":1561,"column_end":18,"column_start":5,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":67,"line_start":67,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":5,"text":"    InvalidStatus(String),"}]}]},{"children":[],"code":null,"level":"help","message":"try using a conversion method","rendered":null,"spans":[{"byte_end":2102,"byte_start":2102,"column_end":59,"column_start":59,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":76,"line_start":76,"suggested_replacement":".to_string()","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":59,"highlight_start":59,"text":"            return Err(ASNError::InvalidStatus(self.asn_id));"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2102,"byte_start":2091,"column_end":59,"column_start":48,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":"expected `String`, found `Uuid`","line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":48,"text":"            return Err(ASNError::InvalidStatus(self.asn_id));"}]},{"byte_end":2090,"byte_start":2067,"column_end":47,"column_start":24,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":24,"text":"            return Err(ASNError::InvalidStatus(self.asn_id));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `ItemNotFound` found for enum `errors::ServiceError` in the current scope\n   --> src/commands/advancedshippingnotice/update_asn_item_command.rs:92:58\n    |\n 92 | ...                   .ok_or(ASNError::ItemNotFound(id))?\n    |                                        ^^^^^^^^^^^^ variant or associated item not found in `errors::ServiceError`\n    |\n   ::: src/errors.rs:29:1\n    |\n 29 | pub enum ServiceError {\n    | --------------------- variant or associated item `ItemNotFound` not found for this enum\n    |\nnote: if you're trying to build a new `errors::ServiceError` consider using one of the following associated functions:\n      errors::ServiceError::db_error\n      errors::ServiceError::database_error_message\n   --> src/errors.rs:160:5\n    |\n160 |     pub fn db_error<E: IntoDbErr>(error: E) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n165 |     pub fn database_error_message(message: impl Into<String>) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: there is a variant with a similar name\n    |\n 92 -                                         .ok_or(ASNError::ItemNotFound(id))?\n 92 +                                         .ok_or(ASNError::NotFound(id))?\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `errors::ServiceError` consider using one of the following associated functions:\nerrors::ServiceError::db_error\nerrors::ServiceError::database_error_message","rendered":null,"spans":[{"byte_end":3570,"byte_start":3523,"column_end":52,"column_start":5,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":160,"line_start":160,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":5,"text":"    pub fn db_error<E: IntoDbErr>(error: E) -> Self {"}]},{"byte_end":3781,"byte_start":3716,"column_end":70,"column_start":5,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":165,"line_start":165,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":5,"text":"    pub fn database_error_message(message: impl Into<String>) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"there is a variant with a similar name","rendered":null,"spans":[{"byte_end":2829,"byte_start":2817,"column_end":70,"column_start":58,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":92,"line_start":92,"suggested_replacement":"NotFound","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":70,"highlight_start":58,"text":"                                        .ok_or(ASNError::ItemNotFound(id))?"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `ItemNotFound` found for enum `errors::ServiceError` in the current scope","spans":[{"byte_end":2829,"byte_start":2817,"column_end":70,"column_start":58,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":"variant or associated item not found in `errors::ServiceError`","line_end":92,"line_start":92,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":58,"text":"                                        .ok_or(ASNError::ItemNotFound(id))?"}]},{"byte_end":701,"byte_start":680,"column_end":22,"column_start":1,"expansion":null,"file_name":"src/errors.rs","is_primary":false,"label":"variant or associated item `ItemNotFound` not found for this enum","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":1,"text":"pub enum ServiceError {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0560]: struct `asn_item_entity::ActiveModel` has no field named `purchase_order_item_id`\n   --> src/commands/advancedshippingnotice/update_asn_item_command.rs:107:37\n    |\n107 | ...                   purchase_order_item_id: Set(item.purchase_order_item_id),\n    |                       ^^^^^^^^^^^^^^^^^^^^^^ `asn_item_entity::ActiveModel` does not have this field\n    |\n    = note: available fields are: `product_id`, `product_name`, `product_sku`, `quantity_expected`, `quantity_received` ... and 6 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `product_id`, `product_name`, `product_sku`, `quantity_expected`, `quantity_received` ... and 6 others","rendered":null,"spans":[]}],"code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","message":"struct `asn_item_entity::ActiveModel` has no field named `purchase_order_item_id`","spans":[{"byte_end":3681,"byte_start":3659,"column_end":59,"column_start":37,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":"`asn_item_entity::ActiveModel` does not have this field","line_end":107,"line_start":107,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":37,"text":"                                    purchase_order_item_id: Set(item.purchase_order_item_id),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0560]: struct `asn_item_entity::ActiveModel` has no field named `quantity_shipped`\n   --> src/commands/advancedshippingnotice/update_asn_item_command.rs:108:37\n    |\n108 | ...                   quantity_shipped: Set(item.quantity_shipped),\n    |                       ^^^^^^^^^^^^^^^^ `asn_item_entity::ActiveModel` does not have this field\n    |\n    = note: available fields are: `product_id`, `product_name`, `product_sku`, `quantity_expected`, `quantity_received` ... and 6 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `product_id`, `product_name`, `product_sku`, `quantity_expected`, `quantity_received` ... and 6 others","rendered":null,"spans":[]}],"code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","message":"struct `asn_item_entity::ActiveModel` has no field named `quantity_shipped`","spans":[{"byte_end":3769,"byte_start":3753,"column_end":53,"column_start":37,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":"`asn_item_entity::ActiveModel` does not have this field","line_end":108,"line_start":108,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":37,"text":"                                    quantity_shipped: Set(item.quantity_shipped),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0560]: struct `asn_item_entity::ActiveModel` has no field named `package_number`\n   --> src/commands/advancedshippingnotice/update_asn_item_command.rs:109:37\n    |\n109 | ...                   package_number: Set(item.package_number.clone()),\n    |                       ^^^^^^^^^^^^^^ `asn_item_entity::ActiveModel` does not have this field\n    |\n    = note: available fields are: `product_id`, `product_name`, `product_sku`, `quantity_expected`, `quantity_received` ... and 6 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `product_id`, `product_name`, `product_sku`, `quantity_expected`, `quantity_received` ... and 6 others","rendered":null,"spans":[]}],"code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","message":"struct `asn_item_entity::ActiveModel` has no field named `package_number`","spans":[{"byte_end":3849,"byte_start":3835,"column_end":51,"column_start":37,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":"`asn_item_entity::ActiveModel` does not have this field","line_end":109,"line_start":109,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":37,"text":"                                    package_number: Set(item.package_number.clone()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0560]: struct `asn_item_entity::ActiveModel` has no field named `lot_number`\n   --> src/commands/advancedshippingnotice/update_asn_item_command.rs:110:37\n    |\n110 | ...                   lot_number: Set(item.lot_number.clone()),\n    |                       ^^^^^^^^^^ unknown field\n    |\nhelp: a field with a similar name exists\n    |\n110 |                                     lot_numbers: Set(item.lot_number.clone()),\n    |                                               +\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a field with a similar name exists","rendered":null,"spans":[{"byte_end":3931,"byte_start":3921,"column_end":47,"column_start":37,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":110,"line_start":110,"suggested_replacement":"lot_numbers","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":47,"highlight_start":37,"text":"                                    lot_number: Set(item.lot_number.clone()),"}]}]}],"code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","message":"struct `asn_item_entity::ActiveModel` has no field named `lot_number`","spans":[{"byte_end":3931,"byte_start":3921,"column_end":47,"column_start":37,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":"unknown field","line_end":110,"line_start":110,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":37,"text":"                                    lot_number: Set(item.lot_number.clone()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/commands/advancedshippingnotice/update_asn_item_command.rs:111:57\n    |\n111 | ...                   serial_numbers: Set(item.serial_numbers.clone()),\n    |                                       --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<String>`, found `Option<Vec<String>>`\n    |                                       |\n    |                                       arguments to this enum variant are incorrect\n    |\n    = note: expected enum `std::option::Option<std::string::String>`\n               found enum `std::option::Option<Vec<std::string::String>>`\nhelp: the type constructed contains `std::option::Option<Vec<std::string::String>>` due to the type of the argument passed\n   --> src/commands/advancedshippingnotice/update_asn_item_command.rs:111:53\n    |\n111 | ...                   serial_numbers: Set(item.serial_numbers.clone()),\n    |                                       ^^^^---------------------------^\n    |                                           |\n    |                                           this argument influences the type of `Set`\nnote: tuple variant defined here\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/entity/active_model.rs:45:5\n    |\n 45 |     Set(V),\n    |     ^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `std::option::Option<std::string::String>`\n   found enum `std::option::Option<Vec<std::string::String>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the type constructed contains `std::option::Option<Vec<std::string::String>>` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":4046,"byte_start":4019,"column_end":84,"column_start":57,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":false,"label":"this argument influences the type of `Set`","line_end":111,"line_start":111,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":57,"text":"                                    serial_numbers: Set(item.serial_numbers.clone()),"}]},{"byte_end":4047,"byte_start":4015,"column_end":85,"column_start":53,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":111,"line_start":111,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":85,"highlight_start":53,"text":"                                    serial_numbers: Set(item.serial_numbers.clone()),"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":1380,"byte_start":1377,"column_end":8,"column_start":5,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sea-orm-1.1.14/src/entity/active_model.rs","is_primary":true,"label":null,"line_end":45,"line_start":45,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":8,"highlight_start":5,"text":"    Set(V),"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":4046,"byte_start":4019,"column_end":84,"column_start":57,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":"expected `Option<String>`, found `Option<Vec<String>>`","line_end":111,"line_start":111,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":57,"text":"                                    serial_numbers: Set(item.serial_numbers.clone()),"}]},{"byte_end":4018,"byte_start":4015,"column_end":56,"column_start":53,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":111,"line_start":111,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":53,"text":"                                    serial_numbers: Set(item.serial_numbers.clone()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `?` couldn't convert the error to `errors::ServiceError`\n   --> src/commands/advancedshippingnotice/update_asn_item_command.rs:125:19\n    |\n 79 |           let updated_items = db\n    |  _____________________________-\n 80 | |             .transaction::<_, Vec<asn_item_entity::Model>, ASNError>(|txn| {\n 81 | |                 Box::pin(async move {\n 82 | |                     let mut updated_items = Vec::new();\n...   |\n124 | |             })\n125 | |             .await?;\n    | |                  -^ the trait `From<sea_orm::TransactionError<errors::ServiceError>>` is not implemented for `errors::ServiceError`\n    | |__________________|\n    |                    this can't be annotated with `?` because it has type `Result<_, sea_orm::TransactionError<errors::ServiceError>>`\n    |\nnote: `errors::ServiceError` needs to implement `From<sea_orm::TransactionError<errors::ServiceError>>`\n   --> src/errors.rs:29:1\n    |\n 29 | pub enum ServiceError {\n    | ^^^^^^^^^^^^^^^^^^^^^\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following other types implement trait `From<T>`:\n              `errors::ServiceError` implements `From<()>`\n              `errors::ServiceError` implements `From<ValidationErrors>`\n              `errors::ServiceError` implements `From<anyhow::Error>`\n              `errors::ServiceError` implements `From<sea_orm::DbErr>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`errors::ServiceError` needs to implement `From<sea_orm::TransactionError<errors::ServiceError>>`","rendered":null,"spans":[{"byte_end":701,"byte_start":680,"column_end":22,"column_start":1,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":1,"text":"pub enum ServiceError {"}]}]},{"children":[],"code":null,"level":"note","message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `From<T>`:\n  `errors::ServiceError` implements `From<()>`\n  `errors::ServiceError` implements `From<ValidationErrors>`\n  `errors::ServiceError` implements `From<anyhow::Error>`\n  `errors::ServiceError` implements `From<sea_orm::DbErr>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`?` couldn't convert the error to `errors::ServiceError`","spans":[{"byte_end":4429,"byte_start":2145,"column_end":19,"column_start":29,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":false,"label":"this can't be annotated with `?` because it has type `Result<_, sea_orm::TransactionError<errors::ServiceError>>`","line_end":125,"line_start":79,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":29,"text":"        let updated_items = db"},{"highlight_end":77,"highlight_start":1,"text":"            .transaction::<_, Vec<asn_item_entity::Model>, ASNError>(|txn| {"},{"highlight_end":38,"highlight_start":1,"text":"                Box::pin(async move {"},{"highlight_end":56,"highlight_start":1,"text":"                    let mut updated_items = Vec::new();"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":46,"highlight_start":1,"text":"                    for item in &self.items {"},{"highlight_end":57,"highlight_start":1,"text":"                        let item_model = match item.id {"},{"highlight_end":42,"highlight_start":1,"text":"                            Some(id) => {"},{"highlight_end":56,"highlight_start":1,"text":"                                // Update existing item"},{"highlight_end":81,"highlight_start":1,"text":"                                let mut existing: asn_item_entity::ActiveModel ="},{"highlight_end":60,"highlight_start":1,"text":"                                    ASNItem::find_by_id(id)"},{"highlight_end":50,"highlight_start":1,"text":"                                        .one(txn)"},{"highlight_end":48,"highlight_start":1,"text":"                                        .await?"},{"highlight_end":76,"highlight_start":1,"text":"                                        .ok_or(ASNError::ItemNotFound(id))?"},{"highlight_end":49,"highlight_start":1,"text":"                                        .into();"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":88,"highlight_start":1,"text":"                                existing.quantity_shipped = Set(item.quantity_shipped);"},{"highlight_end":92,"highlight_start":1,"text":"                                existing.package_number = Set(item.package_number.clone());"},{"highlight_end":84,"highlight_start":1,"text":"                                existing.lot_number = Set(item.lot_number.clone());"},{"highlight_end":92,"highlight_start":1,"text":"                                existing.serial_numbers = Set(item.serial_numbers.clone());"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":60,"highlight_start":1,"text":"                                existing.update(txn).await?"},{"highlight_end":30,"highlight_start":1,"text":"                            }"},{"highlight_end":38,"highlight_start":1,"text":"                            None => {"},{"highlight_end":51,"highlight_start":1,"text":"                                // Create new item"},{"highlight_end":78,"highlight_start":1,"text":"                                let new_item = asn_item_entity::ActiveModel {"},{"highlight_end":61,"highlight_start":1,"text":"                                    id: Set(Uuid::new_v4()),"},{"highlight_end":62,"highlight_start":1,"text":"                                    asn_id: Set(self.asn_id),"},{"highlight_end":94,"highlight_start":1,"text":"                                    purchase_order_item_id: Set(item.purchase_order_item_id),"},{"highlight_end":82,"highlight_start":1,"text":"                                    quantity_shipped: Set(item.quantity_shipped),"},{"highlight_end":86,"highlight_start":1,"text":"                                    package_number: Set(item.package_number.clone()),"},{"highlight_end":78,"highlight_start":1,"text":"                                    lot_number: Set(item.lot_number.clone()),"},{"highlight_end":86,"highlight_start":1,"text":"                                    serial_numbers: Set(item.serial_numbers.clone()),"},{"highlight_end":57,"highlight_start":1,"text":"                                    ..Default::default()"},{"highlight_end":35,"highlight_start":1,"text":"                                };"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":60,"highlight_start":1,"text":"                                new_item.insert(txn).await?"},{"highlight_end":30,"highlight_start":1,"text":"                            }"},{"highlight_end":27,"highlight_start":1,"text":"                        };"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":56,"highlight_start":1,"text":"                        updated_items.push(item_model);"},{"highlight_end":22,"highlight_start":1,"text":"                    }"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":38,"highlight_start":1,"text":"                    Ok(updated_items)"},{"highlight_end":19,"highlight_start":1,"text":"                })"},{"highlight_end":15,"highlight_start":1,"text":"            })"},{"highlight_end":19,"highlight_start":1,"text":"            .await?;"}]},{"byte_end":4430,"byte_start":4429,"column_end":20,"column_start":19,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of operator `?`","span":{"byte_end":4430,"byte_start":4429,"column_end":20,"column_start":19,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":false,"label":null,"line_end":125,"line_start":125,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":19,"text":"            .await?;"}]}},"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":"the trait `From<sea_orm::TransactionError<errors::ServiceError>>` is not implemented for `errors::ServiceError`","line_end":125,"line_start":125,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":19,"text":"            .await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n   --> src/commands/advancedshippingnotice/update_asn_item_command.rs:128:19\n    |\n128 |             .send(Event::ASNItemsUpdated(\n    |                   ^^^^^^^^^^^^^^^^^^^^^^\n129 |                 self.asn_id,\n130 |                 updated_items.iter().map(|i| i.id).collect(),\n    |                 -------------------------------------------- unexpected argument #2\n    |\nnote: tuple variant defined here\n   --> src/events/mod.rs:196:5\n    |\n196 |     ASNItemsUpdated(Uuid),\n    |     ^^^^^^^^^^^^^^^\nhelp: remove the extra argument\n    |\n129 -                 self.asn_id,\n130 -                 updated_items.iter().map(|i| i.id).collect(),\n129 +                 self.asn_id,\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":5007,"byte_start":4992,"column_end":20,"column_start":5,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":196,"line_start":196,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"    ASNItemsUpdated(Uuid),"}]}]},{"children":[],"code":null,"level":"help","message":"remove the extra argument","rendered":null,"spans":[{"byte_end":4585,"byte_start":4523,"column_end":61,"column_start":28,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":130,"line_start":129,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":29,"highlight_start":28,"text":"                self.asn_id,"},{"highlight_end":61,"highlight_start":1,"text":"                updated_items.iter().map(|i| i.id).collect(),"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this enum variant takes 1 argument but 2 arguments were supplied","spans":[{"byte_end":4585,"byte_start":4541,"column_end":61,"column_start":17,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":false,"label":"unexpected argument #2","line_end":130,"line_start":130,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":17,"text":"                updated_items.iter().map(|i| i.id).collect(),"}]},{"byte_end":4494,"byte_start":4472,"column_end":41,"column_start":19,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":128,"line_start":128,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":19,"text":"            .send(Event::ASNItemsUpdated("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `?` couldn't convert the error to `errors::ServiceError`\n   --> src/commands/advancedshippingnotice/update_asn_item_command.rs:132:19\n    |\n127 | /         event_sender\n128 | |             .send(Event::ASNItemsUpdated(\n129 | |                 self.asn_id,\n130 | |                 updated_items.iter().map(|i| i.id).collect(),\n131 | |             ))\n132 | |             .await?;\n    | |                  -^ the trait `From<std::string::String>` is not implemented for `errors::ServiceError`\n    | |__________________|\n    |                    this can't be annotated with `?` because it has type `Result<_, std::string::String>`\n    |\nnote: `errors::ServiceError` needs to implement `From<std::string::String>`\n   --> src/errors.rs:29:1\n    |\n 29 | pub enum ServiceError {\n    | ^^^^^^^^^^^^^^^^^^^^^\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following other types implement trait `From<T>`:\n              `errors::ServiceError` implements `From<()>`\n              `errors::ServiceError` implements `From<ValidationErrors>`\n              `errors::ServiceError` implements `From<anyhow::Error>`\n              `errors::ServiceError` implements `From<sea_orm::DbErr>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`errors::ServiceError` needs to implement `From<std::string::String>`","rendered":null,"spans":[{"byte_end":701,"byte_start":680,"column_end":22,"column_start":1,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":1,"text":"pub enum ServiceError {"}]}]},{"children":[],"code":null,"level":"note","message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `From<T>`:\n  `errors::ServiceError` implements `From<()>`\n  `errors::ServiceError` implements `From<ValidationErrors>`\n  `errors::ServiceError` implements `From<anyhow::Error>`\n  `errors::ServiceError` implements `From<sea_orm::DbErr>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`?` couldn't convert the error to `errors::ServiceError`","spans":[{"byte_end":4620,"byte_start":4441,"column_end":19,"column_start":9,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":false,"label":"this can't be annotated with `?` because it has type `Result<_, std::string::String>`","line_end":132,"line_start":127,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":9,"text":"        event_sender"},{"highlight_end":42,"highlight_start":1,"text":"            .send(Event::ASNItemsUpdated("},{"highlight_end":29,"highlight_start":1,"text":"                self.asn_id,"},{"highlight_end":62,"highlight_start":1,"text":"                updated_items.iter().map(|i| i.id).collect(),"},{"highlight_end":15,"highlight_start":1,"text":"            ))"},{"highlight_end":19,"highlight_start":1,"text":"            .await?;"}]},{"byte_end":4621,"byte_start":4620,"column_end":20,"column_start":19,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of operator `?`","span":{"byte_end":4621,"byte_start":4620,"column_end":20,"column_start":19,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":false,"label":null,"line_end":132,"line_start":132,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":19,"text":"            .await?;"}]}},"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":"the trait `From<std::string::String>` is not implemented for `errors::ServiceError`","line_end":132,"line_start":132,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":19,"text":"            .await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0631]: type mismatch in function arguments\n   --> src/commands/advancedshippingnotice/update_asn_item_command.rs:134:42\n    |\n134 |         Ok(updated_items.into_iter().map(ASNItemResult::from).collect())\n    |                                      --- ^^^^^^^^^^^^^^^^^^^\n    |                                      |   |\n    |                                      |   expected due to this\n    |                                      |   found signature defined here\n    |                                      required by a bound introduced by this call\n    |\n    = note: expected function signature `fn(asn_item_entity::Model) -> _`\n               found function signature `fn(ASNItemResult) -> _`\nnote: required by a bound in `std::iter::Iterator::map`\n   --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/iter/traits/iterator.rs:772:5\nhelp: consider wrapping the function in a closure\n    |\n134 |         Ok(updated_items.into_iter().map(|arg0: asn_item_entity::Model| ASNItemResult::from(/* ASNItemResult */)).collect())\n    |                                          ++++++++++++++++++++++++++++++                    +++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected function signature `fn(asn_item_entity::Model) -> _`\n   found function signature `fn(ASNItemResult) -> _`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `std::iter::Iterator::map`","rendered":null,"spans":[{"byte_end":26987,"byte_start":26881,"column_end":35,"column_start":5,"expansion":null,"file_name":"/rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/iter/traits/iterator.rs","is_primary":true,"label":null,"line_end":775,"line_start":772,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function in a closure","rendered":null,"spans":[{"byte_end":4665,"byte_start":4665,"column_end":42,"column_start":42,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":134,"line_start":134,"suggested_replacement":"|arg0: asn_item_entity::Model| ","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":42,"highlight_start":42,"text":"        Ok(updated_items.into_iter().map(ASNItemResult::from).collect())"}]},{"byte_end":4684,"byte_start":4684,"column_end":61,"column_start":61,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":null,"line_end":134,"line_start":134,"suggested_replacement":"(/* ASNItemResult */)","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":61,"highlight_start":61,"text":"        Ok(updated_items.into_iter().map(ASNItemResult::from).collect())"}]}]}],"code":{"code":"E0631","explanation":"This error indicates a type mismatch in closure arguments.\n\nErroneous code example:\n\n```compile_fail,E0631\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: &str| {});\n}\n```\n\nThe error occurs because `foo` accepts a closure that takes an `i32` argument,\nbut in `main`, it is passed a closure with a `&str` argument.\n\nThis can be resolved by changing the type annotation or removing it entirely\nif it can be inferred.\n\n```\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: i32| {});\n}\n```\n"},"level":"error","message":"type mismatch in function arguments","spans":[{"byte_end":4684,"byte_start":4665,"column_end":61,"column_start":42,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":"expected due to this","line_end":134,"line_start":134,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":42,"text":"        Ok(updated_items.into_iter().map(ASNItemResult::from).collect())"}]},{"byte_end":4684,"byte_start":4665,"column_end":61,"column_start":42,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":"found signature defined here","line_end":134,"line_start":134,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":42,"text":"        Ok(updated_items.into_iter().map(ASNItemResult::from).collect())"}]},{"byte_end":4664,"byte_start":4661,"column_end":41,"column_start":38,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":134,"line_start":134,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":38,"text":"        Ok(updated_items.into_iter().map(ASNItemResult::from).collect())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: the method `collect` exists for struct `Map<IntoIter<Model>, fn(...) -> ... {<... as From<...>>::from}>`, but its trait bounds were not satisfied\n   --> src/commands/advancedshippingnotice/update_asn_item_command.rs:134:63\n    |\n134 |         Ok(updated_items.into_iter().map(ASNItemResult::from).collect())\n    |                                                               ^^^^^^^ method cannot be called due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n            `<fn(ASNItemResult) -> ASNItemResult {<ASNItemResult as From<ASNItemResult>>::from} as FnOnce<(asn_item_entity::Model,)>>::Output = _`\n            which is required by `std::iter::Map<std::vec::IntoIter<asn_item_entity::Model>, fn(ASNItemResult) -> ASNItemResult {<ASNItemResult as From<ASNItemResult>>::from}>: Iterator`\n            `fn(ASNItemResult) -> ASNItemResult {<ASNItemResult as From<ASNItemResult>>::from}: FnMut<(asn_item_entity::Model,)>`\n            which is required by `std::iter::Map<std::vec::IntoIter<asn_item_entity::Model>, fn(ASNItemResult) -> ASNItemResult {<ASNItemResult as From<ASNItemResult>>::from}>: Iterator`\n            `std::iter::Map<std::vec::IntoIter<asn_item_entity::Model>, fn(ASNItemResult) -> ASNItemResult {<ASNItemResult as From<ASNItemResult>>::from}>: Iterator`\n            which is required by `&mut std::iter::Map<std::vec::IntoIter<asn_item_entity::Model>, fn(ASNItemResult) -> ASNItemResult {<ASNItemResult as From<ASNItemResult>>::from}>: Iterator`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the following trait bounds were not satisfied:\n`<fn(ASNItemResult) -> ASNItemResult {<ASNItemResult as From<ASNItemResult>>::from} as FnOnce<(asn_item_entity::Model,)>>::Output = _`\nwhich is required by `std::iter::Map<std::vec::IntoIter<asn_item_entity::Model>, fn(ASNItemResult) -> ASNItemResult {<ASNItemResult as From<ASNItemResult>>::from}>: Iterator`\n`fn(ASNItemResult) -> ASNItemResult {<ASNItemResult as From<ASNItemResult>>::from}: FnMut<(asn_item_entity::Model,)>`\nwhich is required by `std::iter::Map<std::vec::IntoIter<asn_item_entity::Model>, fn(ASNItemResult) -> ASNItemResult {<ASNItemResult as From<ASNItemResult>>::from}>: Iterator`\n`std::iter::Map<std::vec::IntoIter<asn_item_entity::Model>, fn(ASNItemResult) -> ASNItemResult {<ASNItemResult as From<ASNItemResult>>::from}>: Iterator`\nwhich is required by `&mut std::iter::Map<std::vec::IntoIter<asn_item_entity::Model>, fn(ASNItemResult) -> ASNItemResult {<ASNItemResult as From<ASNItemResult>>::from}>: Iterator`","rendered":null,"spans":[]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"the method `collect` exists for struct `Map<IntoIter<Model>, fn(...) -> ... {<... as From<...>>::from}>`, but its trait bounds were not satisfied","spans":[{"byte_end":4693,"byte_start":4686,"column_end":70,"column_start":63,"expansion":null,"file_name":"src/commands/advancedshippingnotice/update_asn_item_command.rs","is_primary":true,"label":"method cannot be called due to unsatisfied trait bounds","line_end":134,"line_start":134,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":63,"text":"        Ok(updated_items.into_iter().map(ASNItemResult::from).collect())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `PurchaseOrderApproved` found for enum `events::Event` in the current scope\n   --> src/commands/purchaseorders/approve_purchase_order_command.rs:42:26\n    |\n 42 |             .send(Event::PurchaseOrderApproved(self.id))\n    |                          ^^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `events::Event`\n    |\n   ::: src/events/mod.rs:59:1\n    |\n 59 | pub enum Event {\n    | -------------- variant or associated item `PurchaseOrderApproved` not found for this enum\n    |\nnote: if you're trying to build a new `events::Event`, consider using `events::Event::with_data` which returns `events::Event`\n   --> src/events/mod.rs:294:5\n    |\n294 |     pub fn with_data(data: String) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: there is a variant with a similar name\n    |\n 42 -             .send(Event::PurchaseOrderApproved(self.id))\n 42 +             .send(Event::PurchaseOrderReceived { po_line_id: /* value */, item_id: /* value */, quantity: /* value */, location_id: /* value */ })\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `events::Event`, consider using `events::Event::with_data` which returns `events::Event`","rendered":null,"spans":[{"byte_end":7385,"byte_start":7347,"column_end":43,"column_start":5,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":294,"line_start":294,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":5,"text":"    pub fn with_data(data: String) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"there is a variant with a similar name","rendered":null,"spans":[{"byte_end":1144,"byte_start":1114,"column_end":56,"column_start":26,"expansion":null,"file_name":"src/commands/purchaseorders/approve_purchase_order_command.rs","is_primary":true,"label":null,"line_end":42,"line_start":42,"suggested_replacement":"PurchaseOrderReceived { po_line_id: /* value */, item_id: /* value */, quantity: /* value */, location_id: /* value */ }","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":56,"highlight_start":26,"text":"            .send(Event::PurchaseOrderApproved(self.id))"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `PurchaseOrderApproved` found for enum `events::Event` in the current scope","spans":[{"byte_end":1135,"byte_start":1114,"column_end":47,"column_start":26,"expansion":null,"file_name":"src/commands/purchaseorders/approve_purchase_order_command.rs","is_primary":true,"label":"variant or associated item not found in `events::Event`","line_end":42,"line_start":42,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"            .send(Event::PurchaseOrderApproved(self.id))"}]},{"byte_end":1449,"byte_start":1435,"column_end":15,"column_start":1,"expansion":null,"file_name":"src/events/mod.rs","is_primary":false,"label":"variant or associated item `PurchaseOrderApproved` not found for this enum","line_end":59,"line_start":59,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"pub enum Event {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no variant or associated item named `PurchaseOrderCancelled` found for enum `events::Event` in the current scope\n   --> src/commands/purchaseorders/cancel_purchase_order_command.rs:42:26\n    |\n 42 |             .send(Event::PurchaseOrderCancelled(self.id))\n    |                          ^^^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `events::Event`\n    |\n   ::: src/events/mod.rs:59:1\n    |\n 59 | pub enum Event {\n    | -------------- variant or associated item `PurchaseOrderCancelled` not found for this enum\n    |\nnote: if you're trying to build a new `events::Event`, consider using `events::Event::with_data` which returns `events::Event`\n   --> src/events/mod.rs:294:5\n    |\n294 |     pub fn with_data(data: String) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: there is a variant with a similar name\n    |\n 42 -             .send(Event::PurchaseOrderCancelled(self.id))\n 42 +             .send(Event::PurchaseOrderCreated(self.id))\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `events::Event`, consider using `events::Event::with_data` which returns `events::Event`","rendered":null,"spans":[{"byte_end":7385,"byte_start":7347,"column_end":43,"column_start":5,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":294,"line_start":294,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":5,"text":"    pub fn with_data(data: String) -> Self {"}]}]},{"children":[],"code":null,"level":"help","message":"there is a variant with a similar name","rendered":null,"spans":[{"byte_end":1102,"byte_start":1080,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/commands/purchaseorders/cancel_purchase_order_command.rs","is_primary":true,"label":null,"line_end":42,"line_start":42,"suggested_replacement":"PurchaseOrderCreated","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":48,"highlight_start":26,"text":"            .send(Event::PurchaseOrderCancelled(self.id))"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no variant or associated item named `PurchaseOrderCancelled` found for enum `events::Event` in the current scope","spans":[{"byte_end":1102,"byte_start":1080,"column_end":48,"column_start":26,"expansion":null,"file_name":"src/commands/purchaseorders/cancel_purchase_order_command.rs","is_primary":true,"label":"variant or associated item not found in `events::Event`","line_end":42,"line_start":42,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":26,"text":"            .send(Event::PurchaseOrderCancelled(self.id))"}]},{"byte_end":1449,"byte_start":1435,"column_end":15,"column_start":1,"expansion":null,"file_name":"src/events/mod.rs","is_primary":false,"label":"variant or associated item `PurchaseOrderCancelled` not found for this enum","line_end":59,"line_start":59,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":1,"text":"pub enum Event {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/returns/approve_return_command.rs:48:33\n   |\n48 |             id: Uuid::parse_str(&approved_return.id).unwrap_or_else(|_| Uuid::new_v4()),\n   |                 --------------- ^^^^^^^^^^^^^^^^^^^ expected `&str`, found `&Uuid`\n   |                 |\n   |                 arguments to this function are incorrect\n   |\n   = note: expected reference `&str`\n              found reference `&uuid::Uuid`\nnote: associated function defined here\n  --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs:76:12\n   |\n76 |     pub fn parse_str(input: &str) -> Result<Uuid, Error> {\n   |            ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&str`\n   found reference `&uuid::Uuid`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":2133,"byte_start":2124,"column_end":21,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs","is_primary":true,"label":null,"line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"    pub fn parse_str(input: &str) -> Result<Uuid, Error> {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1222,"byte_start":1203,"column_end":52,"column_start":33,"expansion":null,"file_name":"src/commands/returns/approve_return_command.rs","is_primary":true,"label":"expected `&str`, found `&Uuid`","line_end":48,"line_start":48,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":33,"text":"            id: Uuid::parse_str(&approved_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]},{"byte_end":1202,"byte_start":1187,"column_end":32,"column_start":17,"expansion":null,"file_name":"src/commands/returns/approve_return_command.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":48,"line_start":48,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":17,"text":"            id: Uuid::parse_str(&approved_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/returns/cancel_return_command.rs:52:33\n   |\n52 |             id: Uuid::parse_str(&cancelled_return.id).unwrap_or_else(|_| Uuid::new_v4()),\n   |                 --------------- ^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `&Uuid`\n   |                 |\n   |                 arguments to this function are incorrect\n   |\n   = note: expected reference `&str`\n              found reference `&uuid::Uuid`\nnote: associated function defined here\n  --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs:76:12\n   |\n76 |     pub fn parse_str(input: &str) -> Result<Uuid, Error> {\n   |            ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&str`\n   found reference `&uuid::Uuid`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":2133,"byte_start":2124,"column_end":21,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs","is_primary":true,"label":null,"line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"    pub fn parse_str(input: &str) -> Result<Uuid, Error> {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1338,"byte_start":1318,"column_end":53,"column_start":33,"expansion":null,"file_name":"src/commands/returns/cancel_return_command.rs","is_primary":true,"label":"expected `&str`, found `&Uuid`","line_end":52,"line_start":52,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":33,"text":"            id: Uuid::parse_str(&cancelled_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]},{"byte_end":1317,"byte_start":1302,"column_end":32,"column_start":17,"expansion":null,"file_name":"src/commands/returns/cancel_return_command.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":52,"line_start":52,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":17,"text":"            id: Uuid::parse_str(&cancelled_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/commands/returns/close_return_command.rs:107:45\n    |\n107 |                         id: Uuid::parse_str(&updated_return.id).unwrap_or_else(|_| Uuid::new_v4()),\n    |                             --------------- ^^^^^^^^^^^^^^^^^^ expected `&str`, found `&Uuid`\n    |                             |\n    |                             arguments to this function are incorrect\n    |\n    = note: expected reference `&str`\n               found reference `&uuid::Uuid`\nnote: associated function defined here\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs:76:12\n    |\n 76 |     pub fn parse_str(input: &str) -> Result<Uuid, Error> {\n    |            ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&str`\n   found reference `&uuid::Uuid`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":2133,"byte_start":2124,"column_end":21,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs","is_primary":true,"label":null,"line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"    pub fn parse_str(input: &str) -> Result<Uuid, Error> {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":4117,"byte_start":4099,"column_end":63,"column_start":45,"expansion":null,"file_name":"src/commands/returns/close_return_command.rs","is_primary":true,"label":"expected `&str`, found `&Uuid`","line_end":107,"line_start":107,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":45,"text":"                        id: Uuid::parse_str(&updated_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]},{"byte_end":4098,"byte_start":4083,"column_end":44,"column_start":29,"expansion":null,"file_name":"src/commands/returns/close_return_command.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":107,"line_start":107,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":29,"text":"                        id: Uuid::parse_str(&updated_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/commands/returns/complete_return_command.rs:106:45\n    |\n106 |                         id: Uuid::parse_str(&updated_return.id).unwrap_or_else(|_| Uuid::new_v4()),\n    |                             --------------- ^^^^^^^^^^^^^^^^^^ expected `&str`, found `&Uuid`\n    |                             |\n    |                             arguments to this function are incorrect\n    |\n    = note: expected reference `&str`\n               found reference `&uuid::Uuid`\nnote: associated function defined here\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs:76:12\n    |\n 76 |     pub fn parse_str(input: &str) -> Result<Uuid, Error> {\n    |            ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&str`\n   found reference `&uuid::Uuid`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":2133,"byte_start":2124,"column_end":21,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs","is_primary":true,"label":null,"line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"    pub fn parse_str(input: &str) -> Result<Uuid, Error> {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":4186,"byte_start":4168,"column_end":63,"column_start":45,"expansion":null,"file_name":"src/commands/returns/complete_return_command.rs","is_primary":true,"label":"expected `&str`, found `&Uuid`","line_end":106,"line_start":106,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":45,"text":"                        id: Uuid::parse_str(&updated_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]},{"byte_end":4167,"byte_start":4152,"column_end":44,"column_start":29,"expansion":null,"file_name":"src/commands/returns/complete_return_command.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":106,"line_start":106,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":29,"text":"                        id: Uuid::parse_str(&updated_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/returns/create_return_command.rs:58:33\n   |\n58 |             id: Uuid::parse_str(&saved_return.id).unwrap_or_else(|_| Uuid::new_v4()),\n   |                 --------------- ^^^^^^^^^^^^^^^^ expected `&str`, found `&Uuid`\n   |                 |\n   |                 arguments to this function are incorrect\n   |\n   = note: expected reference `&str`\n              found reference `&uuid::Uuid`\nnote: associated function defined here\n  --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs:76:12\n   |\n76 |     pub fn parse_str(input: &str) -> Result<Uuid, Error> {\n   |            ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&str`\n   found reference `&uuid::Uuid`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":2133,"byte_start":2124,"column_end":21,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs","is_primary":true,"label":null,"line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"    pub fn parse_str(input: &str) -> Result<Uuid, Error> {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1527,"byte_start":1511,"column_end":49,"column_start":33,"expansion":null,"file_name":"src/commands/returns/create_return_command.rs","is_primary":true,"label":"expected `&str`, found `&Uuid`","line_end":58,"line_start":58,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":33,"text":"            id: Uuid::parse_str(&saved_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]},{"byte_end":1510,"byte_start":1495,"column_end":32,"column_start":17,"expansion":null,"file_name":"src/commands/returns/create_return_command.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":58,"line_start":58,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":17,"text":"            id: Uuid::parse_str(&saved_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/returns/create_return_command.rs:59:39\n   |\n59 |             order_id: Uuid::parse_str(&saved_return.order_id).unwrap_or_else(|_| Uuid::new_v4()),\n   |                       --------------- ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `&Uuid`\n   |                       |\n   |                       arguments to this function are incorrect\n   |\n   = note: expected reference `&str`\n              found reference `&uuid::Uuid`\nnote: associated function defined here\n  --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs:76:12\n   |\n76 |     pub fn parse_str(input: &str) -> Result<Uuid, Error> {\n   |            ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&str`\n   found reference `&uuid::Uuid`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":2133,"byte_start":2124,"column_end":21,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs","is_primary":true,"label":null,"line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"    pub fn parse_str(input: &str) -> Result<Uuid, Error> {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1625,"byte_start":1603,"column_end":61,"column_start":39,"expansion":null,"file_name":"src/commands/returns/create_return_command.rs","is_primary":true,"label":"expected `&str`, found `&Uuid`","line_end":59,"line_start":59,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":39,"text":"            order_id: Uuid::parse_str(&saved_return.order_id).unwrap_or_else(|_| Uuid::new_v4()),"}]},{"byte_end":1602,"byte_start":1587,"column_end":38,"column_start":23,"expansion":null,"file_name":"src/commands/returns/create_return_command.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":59,"line_start":59,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":23,"text":"            order_id: Uuid::parse_str(&saved_return.order_id).unwrap_or_else(|_| Uuid::new_v4()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0560]: struct `InitiateReturnResult` has no field named `created_at`\n  --> src/commands/returns/create_return_command.rs:62:13\n   |\n62 |             created_at: saved_return.created_at,\n   |             ^^^^^^^^^^ `InitiateReturnResult` does not have this field\n   |\n   = note: all struct fields are already assigned\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"all struct fields are already assigned","rendered":null,"spans":[]}],"code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","message":"struct `InitiateReturnResult` has no field named `created_at`","spans":[{"byte_end":1767,"byte_start":1757,"column_end":23,"column_start":13,"expansion":null,"file_name":"src/commands/returns/create_return_command.rs","is_primary":true,"label":"`InitiateReturnResult` does not have this field","line_end":62,"line_start":62,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":13,"text":"            created_at: saved_return.created_at,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/returns/delete_return_command.rs:45:33\n   |\n45 |             id: Uuid::parse_str(&deleted_return.id).unwrap_or_else(|_| Uuid::new_v4()),\n   |                 --------------- ^^^^^^^^^^^^^^^^^^ expected `&str`, found `&Uuid`\n   |                 |\n   |                 arguments to this function are incorrect\n   |\n   = note: expected reference `&str`\n              found reference `&uuid::Uuid`\nnote: associated function defined here\n  --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs:76:12\n   |\n76 |     pub fn parse_str(input: &str) -> Result<Uuid, Error> {\n   |            ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&str`\n   found reference `&uuid::Uuid`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":2133,"byte_start":2124,"column_end":21,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs","is_primary":true,"label":null,"line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"    pub fn parse_str(input: &str) -> Result<Uuid, Error> {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1156,"byte_start":1138,"column_end":51,"column_start":33,"expansion":null,"file_name":"src/commands/returns/delete_return_command.rs","is_primary":true,"label":"expected `&str`, found `&Uuid`","line_end":45,"line_start":45,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":33,"text":"            id: Uuid::parse_str(&deleted_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]},{"byte_end":1137,"byte_start":1122,"column_end":32,"column_start":17,"expansion":null,"file_name":"src/commands/returns/delete_return_command.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":45,"line_start":45,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":17,"text":"            id: Uuid::parse_str(&deleted_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0063]: missing field `object` in initializer of `DeleteReturnResult`\n  --> src/commands/returns/delete_return_command.rs:44:12\n   |\n44 |         Ok(DeleteReturnResult {\n   |            ^^^^^^^^^^^^^^^^^^ missing `object`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","message":"missing field `object` in initializer of `DeleteReturnResult`","spans":[{"byte_end":1103,"byte_start":1085,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/commands/returns/delete_return_command.rs","is_primary":true,"label":"missing `object`","line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"        Ok(DeleteReturnResult {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/returns/receive_return_command.rs:48:33\n   |\n48 |             id: Uuid::parse_str(&received_return.id).unwrap_or_else(|_| Uuid::new_v4()),\n   |                 --------------- ^^^^^^^^^^^^^^^^^^^ expected `&str`, found `&Uuid`\n   |                 |\n   |                 arguments to this function are incorrect\n   |\n   = note: expected reference `&str`\n              found reference `&uuid::Uuid`\nnote: associated function defined here\n  --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs:76:12\n   |\n76 |     pub fn parse_str(input: &str) -> Result<Uuid, Error> {\n   |            ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&str`\n   found reference `&uuid::Uuid`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":2133,"byte_start":2124,"column_end":21,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs","is_primary":true,"label":null,"line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"    pub fn parse_str(input: &str) -> Result<Uuid, Error> {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1237,"byte_start":1218,"column_end":52,"column_start":33,"expansion":null,"file_name":"src/commands/returns/receive_return_command.rs","is_primary":true,"label":"expected `&str`, found `&Uuid`","line_end":48,"line_start":48,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":33,"text":"            id: Uuid::parse_str(&received_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]},{"byte_end":1217,"byte_start":1202,"column_end":32,"column_start":17,"expansion":null,"file_name":"src/commands/returns/receive_return_command.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":48,"line_start":48,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":17,"text":"            id: Uuid::parse_str(&received_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/returns/refund_return_command.rs:56:33\n   |\n56 |             id: Uuid::parse_str(&refunded_return.id).unwrap_or_else(|_| Uuid::new_v4()),\n   |                 --------------- ^^^^^^^^^^^^^^^^^^^ expected `&str`, found `&Uuid`\n   |                 |\n   |                 arguments to this function are incorrect\n   |\n   = note: expected reference `&str`\n              found reference `&uuid::Uuid`\nnote: associated function defined here\n  --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs:76:12\n   |\n76 |     pub fn parse_str(input: &str) -> Result<Uuid, Error> {\n   |            ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&str`\n   found reference `&uuid::Uuid`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":2133,"byte_start":2124,"column_end":21,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs","is_primary":true,"label":null,"line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"    pub fn parse_str(input: &str) -> Result<Uuid, Error> {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1467,"byte_start":1448,"column_end":52,"column_start":33,"expansion":null,"file_name":"src/commands/returns/refund_return_command.rs","is_primary":true,"label":"expected `&str`, found `&Uuid`","line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":33,"text":"            id: Uuid::parse_str(&refunded_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]},{"byte_end":1447,"byte_start":1432,"column_end":32,"column_start":17,"expansion":null,"file_name":"src/commands/returns/refund_return_command.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":17,"text":"            id: Uuid::parse_str(&refunded_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0560]: struct `RefundReturnResult` has no field named `refund_reason`\n  --> src/commands/returns/refund_return_command.rs:59:13\n   |\n59 |             refund_reason: self.refund_reason.clone(),\n   |             ^^^^^^^^^^^^^ `RefundReturnResult` does not have this field\n   |\n   = note: all struct fields are already assigned\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"all struct fields are already assigned","rendered":null,"spans":[]}],"code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","message":"struct `RefundReturnResult` has no field named `refund_reason`","spans":[{"byte_end":1621,"byte_start":1608,"column_end":26,"column_start":13,"expansion":null,"file_name":"src/commands/returns/refund_return_command.rs","is_primary":true,"label":"`RefundReturnResult` does not have this field","line_end":59,"line_start":59,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":13,"text":"            refund_reason: self.refund_reason.clone(),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `refund_reason` on type `&RefundReturnCommand`\n  --> src/commands/returns/refund_return_command.rs:59:33\n   |\n59 |             refund_reason: self.refund_reason.clone(),\n   |                                 ^^^^^^^^^^^^^ unknown field\n   |\n   = note: available fields are: `return_id`, `refund_amount`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `return_id`, `refund_amount`","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `refund_reason` on type `&RefundReturnCommand`","spans":[{"byte_end":1641,"byte_start":1628,"column_end":46,"column_start":33,"expansion":null,"file_name":"src/commands/returns/refund_return_command.rs","is_primary":true,"label":"unknown field","line_end":59,"line_start":59,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":33,"text":"            refund_reason: self.refund_reason.clone(),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/returns/reject_return_command.rs:58:33\n   |\n58 |             id: Uuid::parse_str(&rejected_return.id).unwrap_or_else(|_| Uuid::new_v4()),\n   |                 --------------- ^^^^^^^^^^^^^^^^^^^ expected `&str`, found `&Uuid`\n   |                 |\n   |                 arguments to this function are incorrect\n   |\n   = note: expected reference `&str`\n              found reference `&uuid::Uuid`\nnote: associated function defined here\n  --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs:76:12\n   |\n76 |     pub fn parse_str(input: &str) -> Result<Uuid, Error> {\n   |            ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&str`\n   found reference `&uuid::Uuid`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":2133,"byte_start":2124,"column_end":21,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs","is_primary":true,"label":null,"line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"    pub fn parse_str(input: &str) -> Result<Uuid, Error> {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1519,"byte_start":1500,"column_end":52,"column_start":33,"expansion":null,"file_name":"src/commands/returns/reject_return_command.rs","is_primary":true,"label":"expected `&str`, found `&Uuid`","line_end":58,"line_start":58,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":33,"text":"            id: Uuid::parse_str(&rejected_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]},{"byte_end":1499,"byte_start":1484,"column_end":32,"column_start":17,"expansion":null,"file_name":"src/commands/returns/reject_return_command.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":58,"line_start":58,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":17,"text":"            id: Uuid::parse_str(&rejected_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/returns/reopen_return_command.rs:48:33\n   |\n48 |             id: Uuid::parse_str(&reopened_return.id).unwrap_or_else(|_| Uuid::new_v4()),\n   |                 --------------- ^^^^^^^^^^^^^^^^^^^ expected `&str`, found `&Uuid`\n   |                 |\n   |                 arguments to this function are incorrect\n   |\n   = note: expected reference `&str`\n              found reference `&uuid::Uuid`\nnote: associated function defined here\n  --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs:76:12\n   |\n76 |     pub fn parse_str(input: &str) -> Result<Uuid, Error> {\n   |            ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&str`\n   found reference `&uuid::Uuid`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":2133,"byte_start":2124,"column_end":21,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs","is_primary":true,"label":null,"line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"    pub fn parse_str(input: &str) -> Result<Uuid, Error> {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1205,"byte_start":1186,"column_end":52,"column_start":33,"expansion":null,"file_name":"src/commands/returns/reopen_return_command.rs","is_primary":true,"label":"expected `&str`, found `&Uuid`","line_end":48,"line_start":48,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":33,"text":"            id: Uuid::parse_str(&reopened_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]},{"byte_end":1185,"byte_start":1170,"column_end":32,"column_start":17,"expansion":null,"file_name":"src/commands/returns/reopen_return_command.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":48,"line_start":48,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":17,"text":"            id: Uuid::parse_str(&reopened_return.id).unwrap_or_else(|_| Uuid::new_v4()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0063]: missing fields `object` and `reopened` in initializer of `ReopenReturnResult`\n  --> src/commands/returns/reopen_return_command.rs:47:12\n   |\n47 |         Ok(ReopenReturnResult {\n   |            ^^^^^^^^^^^^^^^^^^ missing `object` and `reopened`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","message":"missing fields `object` and `reopened` in initializer of `ReopenReturnResult`","spans":[{"byte_end":1151,"byte_start":1133,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/commands/returns/reopen_return_command.rs","is_primary":true,"label":"missing `object` and `reopened`","line_end":47,"line_start":47,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"        Ok(ReopenReturnResult {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/returns/restock_returned_items_command.rs:46:59\n   |\n46 |                     let items = self.fetch_returned_items(txn).await?;\n   |                                      -------------------- ^^^ expected `&DatabaseConnection`, found `&DatabaseTransaction`\n   |                                      |\n   |                                      arguments to this method are incorrect\n   |\n   = note: expected reference `&sea_orm::DatabaseConnection`\n              found reference `&sea_orm::DatabaseTransaction`\nnote: method defined here\n  --> src/commands/returns/restock_returned_items_command.rs:90:14\n   |\n90 |     async fn fetch_returned_items(\n   |              ^^^^^^^^^^^^^^^^^^^^\n91 |         &self,\n92 |         db: &DatabaseConnection,\n   |         -----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&sea_orm::DatabaseConnection`\n   found reference `&sea_orm::DatabaseTransaction`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":2945,"byte_start":2922,"column_end":32,"column_start":9,"expansion":null,"file_name":"src/commands/returns/restock_returned_items_command.rs","is_primary":false,"label":"","line_end":92,"line_start":92,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":9,"text":"        db: &DatabaseConnection,"}]},{"byte_end":2897,"byte_start":2877,"column_end":34,"column_start":14,"expansion":null,"file_name":"src/commands/returns/restock_returned_items_command.rs","is_primary":true,"label":null,"line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":14,"text":"    async fn fetch_returned_items("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1350,"byte_start":1347,"column_end":62,"column_start":59,"expansion":null,"file_name":"src/commands/returns/restock_returned_items_command.rs","is_primary":true,"label":"expected `&DatabaseConnection`, found `&DatabaseTransaction`","line_end":46,"line_start":46,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":59,"text":"                    let items = self.fetch_returned_items(txn).await?;"}]},{"byte_end":1346,"byte_start":1326,"column_end":58,"column_start":38,"expansion":null,"file_name":"src/commands/returns/restock_returned_items_command.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":46,"line_start":46,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":38,"text":"                    let items = self.fetch_returned_items(txn).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/returns/update_return_command.rs:54:33\n   |\n54 |             id: Uuid::parse_str(&updated.id).unwrap_or_else(|_| Uuid::new_v4()),\n   |                 --------------- ^^^^^^^^^^^ expected `&str`, found `&Uuid`\n   |                 |\n   |                 arguments to this function are incorrect\n   |\n   = note: expected reference `&str`\n              found reference `&uuid::Uuid`\nnote: associated function defined here\n  --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs:76:12\n   |\n76 |     pub fn parse_str(input: &str) -> Result<Uuid, Error> {\n   |            ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&str`\n   found reference `&uuid::Uuid`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":2133,"byte_start":2124,"column_end":21,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uuid-1.18.0/src/parser.rs","is_primary":true,"label":null,"line_end":76,"line_start":76,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"    pub fn parse_str(input: &str) -> Result<Uuid, Error> {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1498,"byte_start":1487,"column_end":44,"column_start":33,"expansion":null,"file_name":"src/commands/returns/update_return_command.rs","is_primary":true,"label":"expected `&str`, found `&Uuid`","line_end":54,"line_start":54,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":33,"text":"            id: Uuid::parse_str(&updated.id).unwrap_or_else(|_| Uuid::new_v4()),"}]},{"byte_end":1486,"byte_start":1471,"column_end":32,"column_start":17,"expansion":null,"file_name":"src/commands/returns/update_return_command.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":54,"line_start":54,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":17,"text":"            id: Uuid::parse_str(&updated.id).unwrap_or_else(|_| Uuid::new_v4()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0560]: struct `UpdateReturnResult` has no field named `updated_at`\n  --> src/commands/returns/update_return_command.rs:56:13\n   |\n56 |             updated_at: updated.updated_at,\n   |             ^^^^^^^^^^ `UpdateReturnResult` does not have this field\n   |\n   = note: available fields are: `description`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `description`","rendered":null,"spans":[]}],"code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","message":"struct `UpdateReturnResult` has no field named `updated_at`","spans":[{"byte_end":1600,"byte_start":1590,"column_end":23,"column_start":13,"expansion":null,"file_name":"src/commands/returns/update_return_command.rs","is_primary":true,"label":"`UpdateReturnResult` does not have this field","line_end":56,"line_start":56,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":13,"text":"            updated_at: updated.updated_at,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0271]: expected `{async block@src/commands/shipments/cancel_shipment_command.rs:41:26: 41:36}` to be a future that resolves to `Result<ServiceError, _>`, but it resolves to `Result<Model, _>`\n  --> src/commands/shipments/cancel_shipment_command.rs:41:17\n   |\n41 | /                 Box::pin(async move {\n42 | |                     self.cancel_shipment(txn).await?;\n43 | |                     self.log_cancellation_reason(txn).await?;\n...  |\n51 | |                     Ok(updated_shipment)\n52 | |                 })\n   | |__________________^ expected `Result<ServiceError, _>`, found `Result<Model, _>`\n   |\n   = note: expected enum `Result<errors::ServiceError, _>`\n              found enum `Result<models::shipment::Model, _>`\n   = note: required for the cast from `Pin<Box<{async block@src/commands/shipments/cancel_shipment_command.rs:41:26: 41:36}>>` to `Pin<Box<dyn futures::Future<Output = Result<errors::ServiceError, _>> + std::marker::Send>>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected enum `Result<errors::ServiceError, _>`\n   found enum `Result<models::shipment::Model, _>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/commands/shipments/cancel_shipment_command.rs:41:26: 41:36}>>` to `Pin<Box<dyn futures::Future<Output = Result<errors::ServiceError, _>> + std::marker::Send>>`","rendered":null,"spans":[]}],"code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","message":"expected `{async block@src/commands/shipments/cancel_shipment_command.rs:41:26: 41:36}` to be a future that resolves to `Result<ServiceError, _>`, but it resolves to `Result<Model, _>`","spans":[{"byte_end":1782,"byte_start":1098,"column_end":19,"column_start":17,"expansion":null,"file_name":"src/commands/shipments/cancel_shipment_command.rs","is_primary":true,"label":"expected `Result<ServiceError, _>`, found `Result<Model, _>`","line_end":52,"line_start":41,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":17,"text":"                Box::pin(async move {"},{"highlight_end":54,"highlight_start":1,"text":"                    self.cancel_shipment(txn).await?;"},{"highlight_end":62,"highlight_start":1,"text":"                    self.log_cancellation_reason(txn).await?;"},{"highlight_end":72,"highlight_start":1,"text":"                    // Enqueue outbox inside txn (no UUID id available)"},{"highlight_end":54,"highlight_start":1,"text":"                    let payload = serde_json::json!({"},{"highlight_end":69,"highlight_start":1,"text":"                        \"shipment_id\": self.shipment_id.to_string(),"},{"highlight_end":46,"highlight_start":1,"text":"                        \"reason\": self.reason"},{"highlight_end":24,"highlight_start":1,"text":"                    });"},{"highlight_end":138,"highlight_start":1,"text":"                    let _ = crate::events::outbox::enqueue(txn, \"shipment\", Some(self.shipment_id), \"ShipmentCancelled\", &payload).await;"},{"highlight_end":84,"highlight_start":1,"text":"                    let updated_shipment = self.fetch_updated_shipment(txn).await?;"},{"highlight_end":41,"highlight_start":1,"text":"                    Ok(updated_shipment)"},{"highlight_end":19,"highlight_start":1,"text":"                })"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `?` couldn't convert the error to `errors::ServiceError`\n  --> src/commands/shipments/cancel_shipment_command.rs:61:15\n   |\n39 |           let updated_shipment = db\n   |  ________________________________-\n40 | |             .transaction::<_, ServiceError, _>(|txn| {\n41 | |                 Box::pin(async move {\n42 | |                     self.cancel_shipment(txn).await?;\n...  |\n53 | |             })\n54 | |             .await\n   | |__________________- this can't be annotated with `?` because it has type `Result<_, sea_orm::TransactionError<_>>`\n...\n61 |               })?;\n   |                 ^ the trait `From<sea_orm::TransactionError<_>>` is not implemented for `errors::ServiceError`\n   |\nnote: `errors::ServiceError` needs to implement `From<sea_orm::TransactionError<_>>`\n  --> src/errors.rs:29:1\n   |\n29 | pub enum ServiceError {\n   | ^^^^^^^^^^^^^^^^^^^^^\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n   = help: the following other types implement trait `From<T>`:\n             `errors::ServiceError` implements `From<()>`\n             `errors::ServiceError` implements `From<ValidationErrors>`\n             `errors::ServiceError` implements `From<anyhow::Error>`\n             `errors::ServiceError` implements `From<sea_orm::DbErr>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`errors::ServiceError` needs to implement `From<sea_orm::TransactionError<_>>`","rendered":null,"spans":[{"byte_end":701,"byte_start":680,"column_end":22,"column_start":1,"expansion":null,"file_name":"src/errors.rs","is_primary":true,"label":null,"line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":1,"text":"pub enum ServiceError {"}]}]},{"children":[],"code":null,"level":"note","message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `From<T>`:\n  `errors::ServiceError` implements `From<()>`\n  `errors::ServiceError` implements `From<ValidationErrors>`\n  `errors::ServiceError` implements `From<anyhow::Error>`\n  `errors::ServiceError` implements `From<sea_orm::DbErr>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`?` couldn't convert the error to `errors::ServiceError`","spans":[{"byte_end":1816,"byte_start":1024,"column_end":19,"column_start":32,"expansion":null,"file_name":"src/commands/shipments/cancel_shipment_command.rs","is_primary":false,"label":"this can't be annotated with `?` because it has type `Result<_, sea_orm::TransactionError<_>>`","line_end":54,"line_start":39,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":32,"text":"        let updated_shipment = db"},{"highlight_end":55,"highlight_start":1,"text":"            .transaction::<_, ServiceError, _>(|txn| {"},{"highlight_end":38,"highlight_start":1,"text":"                Box::pin(async move {"},{"highlight_end":54,"highlight_start":1,"text":"                    self.cancel_shipment(txn).await?;"},{"highlight_end":62,"highlight_start":1,"text":"                    self.log_cancellation_reason(txn).await?;"},{"highlight_end":72,"highlight_start":1,"text":"                    // Enqueue outbox inside txn (no UUID id available)"},{"highlight_end":54,"highlight_start":1,"text":"                    let payload = serde_json::json!({"},{"highlight_end":69,"highlight_start":1,"text":"                        \"shipment_id\": self.shipment_id.to_string(),"},{"highlight_end":46,"highlight_start":1,"text":"                        \"reason\": self.reason"},{"highlight_end":24,"highlight_start":1,"text":"                    });"},{"highlight_end":138,"highlight_start":1,"text":"                    let _ = crate::events::outbox::enqueue(txn, \"shipment\", Some(self.shipment_id), \"ShipmentCancelled\", &payload).await;"},{"highlight_end":84,"highlight_start":1,"text":"                    let updated_shipment = self.fetch_updated_shipment(txn).await?;"},{"highlight_end":41,"highlight_start":1,"text":"                    Ok(updated_shipment)"},{"highlight_end":19,"highlight_start":1,"text":"                })"},{"highlight_end":15,"highlight_start":1,"text":"            })"},{"highlight_end":19,"highlight_start":1,"text":"            .await"}]},{"byte_end":2036,"byte_start":2035,"column_end":16,"column_start":15,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of operator `?`","span":{"byte_end":2036,"byte_start":2035,"column_end":16,"column_start":15,"expansion":null,"file_name":"src/commands/shipments/cancel_shipment_command.rs","is_primary":false,"label":null,"line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":15,"text":"            })?;"}]}},"file_name":"src/commands/shipments/cancel_shipment_command.rs","is_primary":true,"label":"the trait `From<sea_orm::TransactionError<_>>` is not implemented for `errors::ServiceError`","line_end":61,"line_start":61,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":15,"text":"            })?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/commands/shipments/cancel_shipment_command.rs:63:50\n    |\n 63 |         self.log_and_trigger_event(event_sender, &updated_shipment)\n    |              ---------------------               ^^^^^^^^^^^^^^^^^ expected `&Model`, found `&ServiceError`\n    |              |\n    |              arguments to this method are incorrect\n    |\n    = note: expected reference `&models::shipment::Model`\n               found reference `&errors::ServiceError`\nnote: method defined here\n   --> src/commands/shipments/cancel_shipment_command.rs:130:14\n    |\n130 |     async fn log_and_trigger_event(\n    |              ^^^^^^^^^^^^^^^^^^^^^\n...\n133 |         updated_shipment: &shipment::Model,\n    |         ----------------------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&models::shipment::Model`\n   found reference `&errors::ServiceError`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":4346,"byte_start":4312,"column_end":43,"column_start":9,"expansion":null,"file_name":"src/commands/shipments/cancel_shipment_command.rs","is_primary":false,"label":"","line_end":133,"line_start":133,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":9,"text":"        updated_shipment: &shipment::Model,"}]},{"byte_end":4247,"byte_start":4226,"column_end":35,"column_start":14,"expansion":null,"file_name":"src/commands/shipments/cancel_shipment_command.rs","is_primary":true,"label":null,"line_end":130,"line_start":130,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":14,"text":"    async fn log_and_trigger_event("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2105,"byte_start":2088,"column_end":67,"column_start":50,"expansion":null,"file_name":"src/commands/shipments/cancel_shipment_command.rs","is_primary":true,"label":"expected `&Model`, found `&ServiceError`","line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":67,"highlight_start":50,"text":"        self.log_and_trigger_event(event_sender, &updated_shipment)"}]},{"byte_end":2073,"byte_start":2052,"column_end":35,"column_start":14,"expansion":null,"file_name":"src/commands/shipments/cancel_shipment_command.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":14,"text":"        self.log_and_trigger_event(event_sender, &updated_shipment)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/commands/shipments/cancel_shipment_command.rs:66:12\n   |\n66 |         Ok(updated_shipment)\n   |         -- ^^^^^^^^^^^^^^^^ expected `Model`, found `ServiceError`\n   |         |\n   |         arguments to this enum variant are incorrect\n   |\nhelp: the type constructed contains `errors::ServiceError` due to the type of the argument passed\n  --> src/commands/shipments/cancel_shipment_command.rs:66:9\n   |\n66 |         Ok(updated_shipment)\n   |         ^^^----------------^\n   |            |\n   |            this argument influences the type of `Ok`\nnote: tuple variant defined here\n  --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/result.rs:552:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `errors::ServiceError` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":2156,"byte_start":2140,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/commands/shipments/cancel_shipment_command.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"        Ok(updated_shipment)"}]},{"byte_end":2157,"byte_start":2137,"column_end":29,"column_start":9,"expansion":null,"file_name":"src/commands/shipments/cancel_shipment_command.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":9,"text":"        Ok(updated_shipment)"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":20923,"byte_start":20921,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/result.rs","is_primary":true,"label":null,"line_end":552,"line_start":552,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2156,"byte_start":2140,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/commands/shipments/cancel_shipment_command.rs","is_primary":true,"label":"expected `Model`, found `ServiceError`","line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"        Ok(updated_shipment)"}]},{"byte_end":2139,"byte_start":2137,"column_end":11,"column_start":9,"expansion":null,"file_name":"src/commands/shipments/cancel_shipment_command.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":11,"highlight_start":9,"text":"        Ok(updated_shipment)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of undeclared type `RustDecimal`\n  --> src/commands/workorders/calculate_average_cost_command.rs:83:31\n   |\n83 |                 average_cost: RustDecimal::from_str(&average_cost.to_string()).unwrap_or(RustDecimal::ZERO),\n   |                               ^^^^^^^^^^^ use of undeclared type `RustDecimal`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of undeclared type `RustDecimal`","spans":[{"byte_end":3085,"byte_start":3074,"column_end":42,"column_start":31,"expansion":null,"file_name":"src/commands/workorders/calculate_average_cost_command.rs","is_primary":true,"label":"use of undeclared type `RustDecimal`","line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":31,"text":"                average_cost: RustDecimal::from_str(&average_cost.to_string()).unwrap_or(RustDecimal::ZERO),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of undeclared type `RustDecimal`\n  --> src/commands/workorders/calculate_average_cost_command.rs:83:90\n   |\n83 |                 average_cost: RustDecimal::from_str(&average_cost.to_string()).unwrap_or(RustDecimal::ZERO),\n   |                                                                                          ^^^^^^^^^^^ use of undeclared type `RustDecimal`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of undeclared type `RustDecimal`","spans":[{"byte_end":3144,"byte_start":3133,"column_end":101,"column_start":90,"expansion":null,"file_name":"src/commands/workorders/calculate_average_cost_command.rs","is_primary":true,"label":"use of undeclared type `RustDecimal`","line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":101,"highlight_start":90,"text":"                average_cost: RustDecimal::from_str(&average_cost.to_string()).unwrap_or(RustDecimal::ZERO),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/commands/workorders/calculate_cogs_command.rs:90:52\n    |\n 90 |         let total_cost = self.calculate_total_cost(&*db, &bom).await?;\n    |                               -------------------- ^^^^ expected `&DatabaseTransaction`, found `&DatabaseConnection`\n    |                               |\n    |                               arguments to this method are incorrect\n    |\n    = note: expected reference `&sea_orm::DatabaseTransaction`\n               found reference `&sea_orm::DatabaseConnection`\nnote: method defined here\n   --> src/commands/workorders/calculate_cogs_command.rs:129:14\n    |\n129 |     async fn calculate_total_cost(\n    |              ^^^^^^^^^^^^^^^^^^^^\n130 |         &self,\n131 |         db: &DatabaseTransaction,\n    |         ------------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&sea_orm::DatabaseTransaction`\n   found reference `&sea_orm::DatabaseConnection`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":4522,"byte_start":4498,"column_end":33,"column_start":9,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":false,"label":"","line_end":131,"line_start":131,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":9,"text":"        db: &DatabaseTransaction,"}]},{"byte_end":4473,"byte_start":4453,"column_end":34,"column_start":14,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":true,"label":null,"line_end":129,"line_start":129,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":14,"text":"    async fn calculate_total_cost("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":3107,"byte_start":3103,"column_end":56,"column_start":52,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":true,"label":"expected `&DatabaseTransaction`, found `&DatabaseConnection`","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":52,"text":"        let total_cost = self.calculate_total_cost(&*db, &bom).await?;"}]},{"byte_end":3102,"byte_start":3082,"column_end":51,"column_start":31,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":31,"text":"        let total_cost = self.calculate_total_cost(&*db, &bom).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no function or associated item named `from_str` found for struct `rust_decimal::Decimal` in the current scope\n   --> src/commands/workorders/calculate_cogs_command.rs:105:42\n    |\n105 |                 total_cogs: RustDecimal::from_str(&result.total_cost.to_string()).unwrap_or(RustDecimal::ZERO),\n    |                                          ^^^^^^^^ function or associated item not found in `rust_decimal::Decimal`\n    |\nnote: if you're trying to build a new `rust_decimal::Decimal` consider using one of the following associated functions:\n      rust_decimal::Decimal::new\n      rust_decimal::Decimal::try_new\n      rust_decimal::Decimal::from_i128_with_scale\n      rust_decimal::Decimal::try_from_i128_with_scale\n      and 9 others\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust_decimal-1.37.2/src/decimal.rs:407:5\n    |\n407 |     pub fn new(num: i64, scale: u32) -> Decimal {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n424 |     pub const fn try_new(num: i64, scale: u32) -> crate::Result<Decimal> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n467 |     pub fn from_i128_with_scale(num: i128, scale: u32) -> Decimal {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n485 |     pub const fn try_from_i128_with_scale(num: i128, scale: u32) -> crate::Result<Decimal> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: items from traits can only be used if the trait is in scope\nhelp: trait `FromStr` which provides `from_str` is implemented but not in scope; perhaps you want to import it\n    |\n  1 + use std::str::FromStr;\n    |\nhelp: there is an associated function `from` with a similar name\n    |\n105 -                 total_cogs: RustDecimal::from_str(&result.total_cost.to_string()).unwrap_or(RustDecimal::ZERO),\n105 +                 total_cogs: RustDecimal::from(&result.total_cost.to_string()).unwrap_or(RustDecimal::ZERO),\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"if you're trying to build a new `rust_decimal::Decimal` consider using one of the following associated functions:\nrust_decimal::Decimal::new\nrust_decimal::Decimal::try_new\nrust_decimal::Decimal::from_i128_with_scale\nrust_decimal::Decimal::try_from_i128_with_scale\nand 9 others","rendered":null,"spans":[{"byte_end":12202,"byte_start":12159,"column_end":48,"column_start":5,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust_decimal-1.37.2/src/decimal.rs","is_primary":true,"label":null,"line_end":407,"line_start":407,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":5,"text":"    pub fn new(num: i64, scale: u32) -> Decimal {"}]},{"byte_end":12692,"byte_start":12624,"column_end":73,"column_start":5,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust_decimal-1.37.2/src/decimal.rs","is_primary":true,"label":null,"line_end":424,"line_start":424,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":73,"highlight_start":5,"text":"    pub const fn try_new(num: i64, scale: u32) -> crate::Result<Decimal> {"}]},{"byte_end":14089,"byte_start":14028,"column_end":66,"column_start":5,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust_decimal-1.37.2/src/decimal.rs","is_primary":true,"label":null,"line_end":467,"line_start":467,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":5,"text":"    pub fn from_i128_with_scale(num: i128, scale: u32) -> Decimal {"}]},{"byte_end":14655,"byte_start":14569,"column_end":91,"column_start":5,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rust_decimal-1.37.2/src/decimal.rs","is_primary":true,"label":null,"line_end":485,"line_start":485,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":91,"highlight_start":5,"text":"    pub const fn try_from_i128_with_scale(num: i128, scale: u32) -> crate::Result<Decimal> {"}]}]},{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `FromStr` which provides `from_str` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"use std::str::FromStr;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use uuid::Uuid;"}]}]},{"children":[],"code":null,"level":"help","message":"there is an associated function `from` with a similar name","rendered":null,"spans":[{"byte_end":3731,"byte_start":3723,"column_end":50,"column_start":42,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":true,"label":null,"line_end":105,"line_start":105,"suggested_replacement":"from","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":50,"highlight_start":42,"text":"                total_cogs: RustDecimal::from_str(&result.total_cost.to_string()).unwrap_or(RustDecimal::ZERO),"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no function or associated item named `from_str` found for struct `rust_decimal::Decimal` in the current scope","spans":[{"byte_end":3731,"byte_start":3723,"column_end":50,"column_start":42,"expansion":null,"file_name":"src/commands/workorders/calculate_cogs_command.rs","is_primary":true,"label":"function or associated item not found in `rust_decimal::Decimal`","line_end":105,"line_start":105,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":42,"text":"                total_cogs: RustDecimal::from_str(&result.total_cost.to_string()).unwrap_or(RustDecimal::ZERO),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/commands/workorders/calculate_weighted_average_cogs_command.rs:101:17\n    |\n 99 |             .send(Event::WeightedAverageCOGSCalculated(\n    |                   ------------------------------------ arguments to this enum variant are incorrect\n100 |                 self.product_id,\n101 |                 result.cogs.clone(),\n    |                 ^^^^^^^^^^^^^^^^^^^ expected `Decimal`, found `BigDecimal`\n    |\nnote: tuple variant defined here\n   --> src/events/mod.rs:235:5\n    |\n235 |     WeightedAverageCOGSCalculated(Uuid, Decimal),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":6026,"byte_start":5997,"column_end":34,"column_start":5,"expansion":null,"file_name":"src/events/mod.rs","is_primary":true,"label":null,"line_end":235,"line_start":235,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":5,"text":"    WeightedAverageCOGSCalculated(Uuid, Decimal),"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":3452,"byte_start":3433,"column_end":36,"column_start":17,"expansion":null,"file_name":"src/commands/workorders/calculate_weighted_average_cogs_command.rs","is_primary":true,"label":"expected `Decimal`, found `BigDecimal`","line_end":101,"line_start":101,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":17,"text":"                result.cogs.clone(),"}]},{"byte_end":3382,"byte_start":3346,"column_end":55,"column_start":19,"expansion":null,"file_name":"src/commands/workorders/calculate_weighted_average_cogs_command.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":99,"line_start":99,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":19,"text":"            .send(Event::WeightedAverageCOGSCalculated("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0063]: missing fields `payment_provider`, `payment_webhook_secret` and `payment_webhook_tolerance_secs` in initializer of `AppConfig`\n   --> src/config.rs:194:26\n    |\n194 |         let mut config = Self {\n    |                          ^^^^ missing `payment_provider`, `payment_webhook_secret` and `payment_webhook_tolerance_secs`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","message":"missing fields `payment_provider`, `payment_webhook_secret` and `payment_webhook_tolerance_secs` in initializer of `AppConfig`","spans":[{"byte_end":5841,"byte_start":5837,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/config.rs","is_primary":true,"label":"missing `payment_provider`, `payment_webhook_secret` and `payment_webhook_tolerance_secs`","line_end":194,"line_start":194,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"        let mut config = Self {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: `if` and `else` have incompatible types\n   --> src/config.rs:348:58\n    |\n348 |             .with(if json { fmt::layer().json() } else { fmt::layer() })\n    |                             -------------------          ^^^^^^^^^^^^ expected `Layer<_, JsonFields, Format<Json>>`, found `Layer<_>`\n    |                             |\n    |                             expected because of this\n    |\n    = note: expected struct `tracing_subscriber::fmt::Layer<_, JsonFields, tracing_subscriber::fmt::format::Format<tracing_subscriber::fmt::format::Json>>`\n               found struct `tracing_subscriber::fmt::Layer<_, DefaultFields, tracing_subscriber::fmt::format::Format<tracing_subscriber::fmt::format::Full>>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `tracing_subscriber::fmt::Layer<_, JsonFields, tracing_subscriber::fmt::format::Format<tracing_subscriber::fmt::format::Json>>`\n   found struct `tracing_subscriber::fmt::Layer<_, DefaultFields, tracing_subscriber::fmt::format::Format<tracing_subscriber::fmt::format::Full>>`","rendered":null,"spans":[]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"`if` and `else` have incompatible types","spans":[{"byte_end":11480,"byte_start":11468,"column_end":70,"column_start":58,"expansion":null,"file_name":"src/config.rs","is_primary":true,"label":"expected `Layer<_, JsonFields, Format<Json>>`, found `Layer<_>`","line_end":348,"line_start":348,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":58,"text":"            .with(if json { fmt::layer().json() } else { fmt::layer() })"}]},{"byte_end":11458,"byte_start":11439,"column_end":48,"column_start":29,"expansion":null,"file_name":"src/config.rs","is_primary":false,"label":"expected because of this","line_end":348,"line_start":348,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":29,"text":"            .with(if json { fmt::layer().json() } else { fmt::layer() })"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/handlers/cash_sales.rs:42:30\n    |\n 42 |     Router::new().route(\"/\", post(create_cash_sale))\n    |                   -----      ^^^^^^^^^^^^^^^^^^^^^^ expected `MethodRouter`, found `MethodRouter<Arc<AppState>>`\n    |                   |\n    |                   arguments to this method are incorrect\n    |\n    = note: expected struct `MethodRouter<()>`\n               found struct `MethodRouter<std::sync::Arc<AppState>>`\nnote: method defined here\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.7.9/src/routing/mod.rs:164:12\n    |\n164 |     pub fn route(self, path: &str, method_router: MethodRouter<S>) -> Self {\n    |            ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `MethodRouter<()>`\n   found struct `MethodRouter<std::sync::Arc<AppState>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":4403,"byte_start":4398,"column_end":17,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.7.9/src/routing/mod.rs","is_primary":true,"label":null,"line_end":164,"line_start":164,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":12,"text":"    pub fn route(self, path: &str, method_router: MethodRouter<S>) -> Self {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1045,"byte_start":1023,"column_end":52,"column_start":30,"expansion":null,"file_name":"src/handlers/cash_sales.rs","is_primary":true,"label":"expected `MethodRouter`, found `MethodRouter<Arc<AppState>>`","line_end":42,"line_start":42,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":30,"text":"    Router::new().route(\"/\", post(create_cash_sale))"}]},{"byte_end":1017,"byte_start":1012,"column_end":24,"column_start":19,"expansion":null,"file_name":"src/handlers/cash_sales.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":42,"line_start":42,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":19,"text":"    Router::new().route(\"/\", post(create_cash_sale))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `handlers::payments::CreatePaymentRequest: ToSchema` is not satisfied\n  --> src/handlers/payments.rs:49:20\n   |\n49 |     request_body = CreatePaymentRequest,\n   |                    ^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `handlers::payments::CreatePaymentRequest`\n   |\n   = help: the following other types implement trait `ToSchema`:\n             &'t [T]\n             &'t mut [T]\n             &str\n             ()\n             AdjustInventoryRequest\n             AllocateInventoryRequest\n             ApiResponse<T>\n             BTreeMap<K, T>\n           and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `handlers::payments::CreatePaymentRequest: ToSchema` is not satisfied","spans":[{"byte_end":1277,"byte_start":1257,"column_end":40,"column_start":20,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `handlers::payments::CreatePaymentRequest`","line_end":49,"line_start":49,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":20,"text":"    request_body = CreatePaymentRequest,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `handlers::payments::CreatePaymentRequest: PartialSchema` is not satisfied\n   --> src/handlers/payments.rs:49:20\n    |\n 49 |     request_body = CreatePaymentRequest,\n    |                    ^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `handlers::payments::CreatePaymentRequest`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `handlers::payments::CreatePaymentRequest` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::name`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`\n...\n405 |     fn name() -> Cow<'static, str> {\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `handlers::payments::CreatePaymentRequest` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::name`","rendered":null,"spans":[{"byte_end":19631,"byte_start":19627,"column_end":12,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":405,"line_start":405,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn name() -> Cow<'static, str> {"}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::name`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `handlers::payments::CreatePaymentRequest: PartialSchema` is not satisfied","spans":[{"byte_end":1277,"byte_start":1257,"column_end":40,"column_start":20,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `handlers::payments::CreatePaymentRequest`","line_end":49,"line_start":49,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":20,"text":"    request_body = CreatePaymentRequest,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: ToSchema` is not satisfied\n  --> src/handlers/payments.rs:51:66\n   |\n51 |         (status = 201, description = \"Payment processed\", body = crate::services::payments::PaymentResponse),\n   |                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `PaymentResponse`\n   |\n   = help: the following other types implement trait `ToSchema`:\n             &'t [T]\n             &'t mut [T]\n             &str\n             ()\n             AdjustInventoryRequest\n             AllocateInventoryRequest\n             ApiResponse<T>\n             BTreeMap<K, T>\n           and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: ToSchema` is not satisfied","spans":[{"byte_end":1401,"byte_start":1359,"column_end":108,"column_start":66,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `PaymentResponse`","line_end":51,"line_start":51,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":108,"highlight_start":66,"text":"        (status = 201, description = \"Payment processed\", body = crate::services::payments::PaymentResponse),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: PartialSchema` is not satisfied\n   --> src/handlers/payments.rs:51:66\n    |\n 51 |         (status = 201, description = \"Payment processed\", body = crate::services::payments::PaymentResponse),\n    |                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `PaymentResponse` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::name`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`\n...\n405 |     fn name() -> Cow<'static, str> {\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `PaymentResponse` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::name`","rendered":null,"spans":[{"byte_end":19631,"byte_start":19627,"column_end":12,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":405,"line_start":405,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn name() -> Cow<'static, str> {"}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::name`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: PartialSchema` is not satisfied","spans":[{"byte_end":1401,"byte_start":1359,"column_end":108,"column_start":66,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `PaymentResponse`","line_end":51,"line_start":51,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":108,"highlight_start":66,"text":"        (status = 201, description = \"Payment processed\", body = crate::services::payments::PaymentResponse),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `handlers::payments::CreatePaymentRequest: ToSchema` is not satisfied\n  --> src/handlers/payments.rs:49:20\n   |\n49 |     request_body = CreatePaymentRequest,\n   |                    ^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `handlers::payments::CreatePaymentRequest`\n   |\n   = help: the following other types implement trait `ToSchema`:\n             &'t [T]\n             &'t mut [T]\n             &str\n             ()\n             AdjustInventoryRequest\n             AllocateInventoryRequest\n             ApiResponse<T>\n             BTreeMap<K, T>\n           and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `handlers::payments::CreatePaymentRequest: ToSchema` is not satisfied","spans":[{"byte_end":1277,"byte_start":1257,"column_end":40,"column_start":20,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `handlers::payments::CreatePaymentRequest`","line_end":49,"line_start":49,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":20,"text":"    request_body = CreatePaymentRequest,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `handlers::payments::CreatePaymentRequest: PartialSchema` is not satisfied\n   --> src/handlers/payments.rs:49:20\n    |\n 49 |     request_body = CreatePaymentRequest,\n    |                    ^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `handlers::payments::CreatePaymentRequest`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `handlers::payments::CreatePaymentRequest` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::name`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`\n...\n405 |     fn name() -> Cow<'static, str> {\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `handlers::payments::CreatePaymentRequest` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::name`","rendered":null,"spans":[{"byte_end":19631,"byte_start":19627,"column_end":12,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":405,"line_start":405,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn name() -> Cow<'static, str> {"}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::name`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `handlers::payments::CreatePaymentRequest: PartialSchema` is not satisfied","spans":[{"byte_end":1277,"byte_start":1257,"column_end":40,"column_start":20,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `handlers::payments::CreatePaymentRequest`","line_end":49,"line_start":49,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":20,"text":"    request_body = CreatePaymentRequest,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: ToSchema` is not satisfied\n  --> src/handlers/payments.rs:51:66\n   |\n51 |         (status = 201, description = \"Payment processed\", body = crate::services::payments::PaymentResponse),\n   |                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `PaymentResponse`\n   |\n   = help: the following other types implement trait `ToSchema`:\n             &'t [T]\n             &'t mut [T]\n             &str\n             ()\n             AdjustInventoryRequest\n             AllocateInventoryRequest\n             ApiResponse<T>\n             BTreeMap<K, T>\n           and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: ToSchema` is not satisfied","spans":[{"byte_end":1401,"byte_start":1359,"column_end":108,"column_start":66,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `PaymentResponse`","line_end":51,"line_start":51,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":108,"highlight_start":66,"text":"        (status = 201, description = \"Payment processed\", body = crate::services::payments::PaymentResponse),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: PartialSchema` is not satisfied\n   --> src/handlers/payments.rs:51:66\n    |\n 51 |         (status = 201, description = \"Payment processed\", body = crate::services::payments::PaymentResponse),\n    |                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `PaymentResponse` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::name`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`\n...\n405 |     fn name() -> Cow<'static, str> {\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `PaymentResponse` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::name`","rendered":null,"spans":[{"byte_end":19631,"byte_start":19627,"column_end":12,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":405,"line_start":405,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn name() -> Cow<'static, str> {"}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::name`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: PartialSchema` is not satisfied","spans":[{"byte_end":1401,"byte_start":1359,"column_end":108,"column_start":66,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `PaymentResponse`","line_end":51,"line_start":51,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":108,"highlight_start":66,"text":"        (status = 201, description = \"Payment processed\", body = crate::services::payments::PaymentResponse),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: ToSchema` is not satisfied\n   --> src/handlers/payments.rs:107:64\n    |\n107 |         (status = 200, description = \"Payment details\", body = crate::services::payments::PaymentResponse),\n    |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: ToSchema` is not satisfied","spans":[{"byte_end":3379,"byte_start":3337,"column_end":106,"column_start":64,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `PaymentResponse`","line_end":107,"line_start":107,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":106,"highlight_start":64,"text":"        (status = 200, description = \"Payment details\", body = crate::services::payments::PaymentResponse),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: PartialSchema` is not satisfied\n   --> src/handlers/payments.rs:107:64\n    |\n107 |         (status = 200, description = \"Payment details\", body = crate::services::payments::PaymentResponse),\n    |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `PaymentResponse` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::name`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`\n...\n405 |     fn name() -> Cow<'static, str> {\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `PaymentResponse` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::name`","rendered":null,"spans":[{"byte_end":19631,"byte_start":19627,"column_end":12,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":405,"line_start":405,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn name() -> Cow<'static, str> {"}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::name`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: PartialSchema` is not satisfied","spans":[{"byte_end":3379,"byte_start":3337,"column_end":106,"column_start":64,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `PaymentResponse`","line_end":107,"line_start":107,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":106,"highlight_start":64,"text":"        (status = 200, description = \"Payment details\", body = crate::services::payments::PaymentResponse),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: ToSchema` is not satisfied\n   --> src/handlers/payments.rs:107:64\n    |\n107 |         (status = 200, description = \"Payment details\", body = crate::services::payments::PaymentResponse),\n    |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: ToSchema` is not satisfied","spans":[{"byte_end":3379,"byte_start":3337,"column_end":106,"column_start":64,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `PaymentResponse`","line_end":107,"line_start":107,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":106,"highlight_start":64,"text":"        (status = 200, description = \"Payment details\", body = crate::services::payments::PaymentResponse),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: PartialSchema` is not satisfied\n   --> src/handlers/payments.rs:107:64\n    |\n107 |         (status = 200, description = \"Payment details\", body = crate::services::payments::PaymentResponse),\n    |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `PaymentResponse` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::name`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`\n...\n405 |     fn name() -> Cow<'static, str> {\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `PaymentResponse` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::name`","rendered":null,"spans":[{"byte_end":19631,"byte_start":19627,"column_end":12,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":405,"line_start":405,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn name() -> Cow<'static, str> {"}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::name`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: PartialSchema` is not satisfied","spans":[{"byte_end":3379,"byte_start":3337,"column_end":106,"column_start":64,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `PaymentResponse`","line_end":107,"line_start":107,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":106,"highlight_start":64,"text":"        (status = 200, description = \"Payment details\", body = crate::services::payments::PaymentResponse),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: ToSchema` is not satisfied\n   --> src/handlers/payments.rs:140:68\n    |\n140 |         (status = 200, description = \"Payments for order\", body = [crate::services::payments::PaymentResponse])\n    |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: ToSchema` is not satisfied","spans":[{"byte_end":4391,"byte_start":4349,"column_end":110,"column_start":68,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `PaymentResponse`","line_end":140,"line_start":140,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":110,"highlight_start":68,"text":"        (status = 200, description = \"Payments for order\", body = [crate::services::payments::PaymentResponse])"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: PartialSchema` is not satisfied\n   --> src/handlers/payments.rs:140:68\n    |\n140 |         (status = 200, description = \"Payments for order\", body = [crate::services::payments::PaymentResponse])\n    |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `PaymentResponse` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::name`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`\n...\n405 |     fn name() -> Cow<'static, str> {\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `PaymentResponse` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::name`","rendered":null,"spans":[{"byte_end":19631,"byte_start":19627,"column_end":12,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":405,"line_start":405,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn name() -> Cow<'static, str> {"}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::name`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: PartialSchema` is not satisfied","spans":[{"byte_end":4391,"byte_start":4349,"column_end":110,"column_start":68,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `PaymentResponse`","line_end":140,"line_start":140,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":110,"highlight_start":68,"text":"        (status = 200, description = \"Payments for order\", body = [crate::services::payments::PaymentResponse])"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: ToSchema` is not satisfied\n   --> src/handlers/payments.rs:140:68\n    |\n140 |         (status = 200, description = \"Payments for order\", body = [crate::services::payments::PaymentResponse])\n    |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: ToSchema` is not satisfied","spans":[{"byte_end":4391,"byte_start":4349,"column_end":110,"column_start":68,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `PaymentResponse`","line_end":140,"line_start":140,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":110,"highlight_start":68,"text":"        (status = 200, description = \"Payments for order\", body = [crate::services::payments::PaymentResponse])"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: PartialSchema` is not satisfied\n   --> src/handlers/payments.rs:140:68\n    |\n140 |         (status = 200, description = \"Payments for order\", body = [crate::services::payments::PaymentResponse])\n    |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `PaymentResponse` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::name`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`\n...\n405 |     fn name() -> Cow<'static, str> {\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `PaymentResponse` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::name`","rendered":null,"spans":[{"byte_end":19631,"byte_start":19627,"column_end":12,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":405,"line_start":405,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn name() -> Cow<'static, str> {"}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::name`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: PartialSchema` is not satisfied","spans":[{"byte_end":4391,"byte_start":4349,"column_end":110,"column_start":68,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `PaymentResponse`","line_end":140,"line_start":140,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":110,"highlight_start":68,"text":"        (status = 200, description = \"Payments for order\", body = [crate::services::payments::PaymentResponse])"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: ToSchema` is not satisfied\n   --> src/handlers/payments.rs:173:62\n    |\n173 |         (status = 200, description = \"List payments\", body = crate::PaginatedResponse<crate::services::payments::PaymentResponse>)\n    |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\nnote: required for `PaginatedResponse<PaymentResponse>` to implement `ToSchema`\n   --> src/lib.rs:94:21\n    |\n 94 | #[derive(Serialize, ToSchema)]\n    |                     ^^^^^^^^ unsatisfied trait bound introduced in this `derive` macro\n 95 | pub struct PaginatedResponse<T> {\n    |            ^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `ToSchema` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `PaginatedResponse<PaymentResponse>` to implement `ToSchema`","rendered":null,"spans":[{"byte_end":2122,"byte_start":2114,"column_end":29,"column_start":21,"expansion":{"def_site_span":{"byte_end":45559,"byte_start":45501,"column_end":59,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-gen-5.4.0/src/lib.rs","is_primary":false,"label":null,"line_end":957,"line_start":957,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":1,"text":"pub fn derive_to_schema(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(ToSchema)]","span":{"byte_end":2122,"byte_start":2114,"column_end":29,"column_start":21,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":94,"line_start":94,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":21,"text":"#[derive(Serialize, ToSchema)]"}]}},"file_name":"src/lib.rs","is_primary":true,"label":"unsatisfied trait bound introduced in this `derive` macro","line_end":94,"line_start":94,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":21,"text":"#[derive(Serialize, ToSchema)]"}]},{"byte_end":2156,"byte_start":2136,"column_end":32,"column_start":12,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":null,"line_end":95,"line_start":95,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":12,"text":"pub struct PaginatedResponse<T> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: ToSchema` is not satisfied","spans":[{"byte_end":5343,"byte_start":5275,"column_end":130,"column_start":62,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `PaymentResponse`","line_end":173,"line_start":173,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":130,"highlight_start":62,"text":"        (status = 200, description = \"List payments\", body = crate::PaginatedResponse<crate::services::payments::PaymentResponse>)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: ToSchema` is not satisfied\n   --> src/handlers/payments.rs:173:87\n    |\n173 |         (status = 200, description = \"List payments\", body = crate::PaginatedResponse<crate::services::payments::PaymentResponse>)\n    |                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: ToSchema` is not satisfied","spans":[{"byte_end":5342,"byte_start":5300,"column_end":129,"column_start":87,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `PaymentResponse`","line_end":173,"line_start":173,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":129,"highlight_start":87,"text":"        (status = 200, description = \"List payments\", body = crate::PaginatedResponse<crate::services::payments::PaymentResponse>)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: PartialSchema` is not satisfied\n   --> src/handlers/payments.rs:173:87\n    |\n173 |         (status = 200, description = \"List payments\", body = crate::PaginatedResponse<crate::services::payments::PaymentResponse>)\n    |                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `PaymentResponse` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::name`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`\n...\n405 |     fn name() -> Cow<'static, str> {\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `PaymentResponse` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::name`","rendered":null,"spans":[{"byte_end":19631,"byte_start":19627,"column_end":12,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":405,"line_start":405,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn name() -> Cow<'static, str> {"}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::name`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: PartialSchema` is not satisfied","spans":[{"byte_end":5342,"byte_start":5300,"column_end":129,"column_start":87,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `PaymentResponse`","line_end":173,"line_start":173,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":129,"highlight_start":87,"text":"        (status = 200, description = \"List payments\", body = crate::PaginatedResponse<crate::services::payments::PaymentResponse>)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaginationParams: IntoParams` is not satisfied\n   --> src/handlers/payments.rs:180:26\n    |\n180 |     Query(params): Query<PaginationParams>,\n    |                          ^^^^^^^^^^^^^^^^ the trait `IntoParams` is not implemented for `PaginationParams`\n    |\n    = help: the following other types implement trait `IntoParams`:\n              InventoryFilters\n              ReturnFilters\n              ShipmentFilters\n              WorkOrderFilters\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `IntoParams`:\n  InventoryFilters\n  ReturnFilters\n  ShipmentFilters\n  WorkOrderFilters","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaginationParams: IntoParams` is not satisfied","spans":[{"byte_end":5512,"byte_start":5496,"column_end":42,"column_start":26,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `IntoParams` is not implemented for `PaginationParams`","line_end":180,"line_start":180,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":26,"text":"    Query(params): Query<PaginationParams>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentStatusFilter: IntoParams` is not satisfied\n   --> src/handlers/payments.rs:181:26\n    |\n181 |     Query(filter): Query<PaymentStatusFilter>,\n    |                          ^^^^^^^^^^^^^^^^^^^ the trait `IntoParams` is not implemented for `PaymentStatusFilter`\n    |\n    = help: the following other types implement trait `IntoParams`:\n              InventoryFilters\n              ReturnFilters\n              ShipmentFilters\n              WorkOrderFilters\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `IntoParams`:\n  InventoryFilters\n  ReturnFilters\n  ShipmentFilters\n  WorkOrderFilters","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentStatusFilter: IntoParams` is not satisfied","spans":[{"byte_end":5559,"byte_start":5540,"column_end":45,"column_start":26,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `IntoParams` is not implemented for `PaymentStatusFilter`","line_end":181,"line_start":181,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":26,"text":"    Query(filter): Query<PaymentStatusFilter>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: ToSchema` is not satisfied\n   --> src/handlers/payments.rs:173:87\n    |\n173 |         (status = 200, description = \"List payments\", body = crate::PaginatedResponse<crate::services::payments::PaymentResponse>)\n    |                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: ToSchema` is not satisfied","spans":[{"byte_end":5342,"byte_start":5300,"column_end":129,"column_start":87,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `PaymentResponse`","line_end":173,"line_start":173,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":129,"highlight_start":87,"text":"        (status = 200, description = \"List payments\", body = crate::PaginatedResponse<crate::services::payments::PaymentResponse>)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: PartialSchema` is not satisfied\n   --> src/handlers/payments.rs:173:87\n    |\n173 |         (status = 200, description = \"List payments\", body = crate::PaginatedResponse<crate::services::payments::PaymentResponse>)\n    |                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `PaymentResponse` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::name`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`\n...\n405 |     fn name() -> Cow<'static, str> {\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `PaymentResponse` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::name`","rendered":null,"spans":[{"byte_end":19631,"byte_start":19627,"column_end":12,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":405,"line_start":405,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn name() -> Cow<'static, str> {"}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::name`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: PartialSchema` is not satisfied","spans":[{"byte_end":5342,"byte_start":5300,"column_end":129,"column_start":87,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `PaymentResponse`","line_end":173,"line_start":173,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":129,"highlight_start":87,"text":"        (status = 200, description = \"List payments\", body = crate::PaginatedResponse<crate::services::payments::PaymentResponse>)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: ToSchema` is not satisfied\n   --> src/handlers/payments.rs:173:62\n    |\n173 |         (status = 200, description = \"List payments\", body = crate::PaginatedResponse<crate::services::payments::PaymentResponse>)\n    |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\nnote: required for `PaginatedResponse<PaymentResponse>` to implement `ToSchema`\n   --> src/lib.rs:94:21\n    |\n 94 | #[derive(Serialize, ToSchema)]\n    |                     ^^^^^^^^ unsatisfied trait bound introduced in this `derive` macro\n 95 | pub struct PaginatedResponse<T> {\n    |            ^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `ToSchema` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `PaginatedResponse<PaymentResponse>` to implement `ToSchema`","rendered":null,"spans":[{"byte_end":2122,"byte_start":2114,"column_end":29,"column_start":21,"expansion":{"def_site_span":{"byte_end":45559,"byte_start":45501,"column_end":59,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-gen-5.4.0/src/lib.rs","is_primary":false,"label":null,"line_end":957,"line_start":957,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":1,"text":"pub fn derive_to_schema(input: TokenStream) -> TokenStream {"}]},"macro_decl_name":"#[derive(ToSchema)]","span":{"byte_end":2122,"byte_start":2114,"column_end":29,"column_start":21,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":94,"line_start":94,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":21,"text":"#[derive(Serialize, ToSchema)]"}]}},"file_name":"src/lib.rs","is_primary":true,"label":"unsatisfied trait bound introduced in this `derive` macro","line_end":94,"line_start":94,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":21,"text":"#[derive(Serialize, ToSchema)]"}]},{"byte_end":2156,"byte_start":2136,"column_end":32,"column_start":12,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":null,"line_end":95,"line_start":95,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":12,"text":"pub struct PaginatedResponse<T> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: ToSchema` is not satisfied","spans":[{"byte_end":5343,"byte_start":5275,"column_end":130,"column_start":62,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `PaymentResponse`","line_end":173,"line_start":173,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":130,"highlight_start":62,"text":"        (status = 200, description = \"List payments\", body = crate::PaginatedResponse<crate::services::payments::PaymentResponse>)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `RefundPaymentHandlerRequest: ToSchema` is not satisfied\n   --> src/handlers/payments.rs:224:20\n    |\n224 |     request_body = RefundPaymentHandlerRequest,\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `RefundPaymentHandlerRequest`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `RefundPaymentHandlerRequest: ToSchema` is not satisfied","spans":[{"byte_end":6826,"byte_start":6799,"column_end":47,"column_start":20,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `RefundPaymentHandlerRequest`","line_end":224,"line_start":224,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":20,"text":"    request_body = RefundPaymentHandlerRequest,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `RefundPaymentHandlerRequest: PartialSchema` is not satisfied\n   --> src/handlers/payments.rs:224:20\n    |\n224 |     request_body = RefundPaymentHandlerRequest,\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `RefundPaymentHandlerRequest`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `RefundPaymentHandlerRequest` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::name`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`\n...\n405 |     fn name() -> Cow<'static, str> {\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `RefundPaymentHandlerRequest` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::name`","rendered":null,"spans":[{"byte_end":19631,"byte_start":19627,"column_end":12,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":405,"line_start":405,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn name() -> Cow<'static, str> {"}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::name`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `RefundPaymentHandlerRequest: PartialSchema` is not satisfied","spans":[{"byte_end":6826,"byte_start":6799,"column_end":47,"column_start":20,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `RefundPaymentHandlerRequest`","line_end":224,"line_start":224,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":20,"text":"    request_body = RefundPaymentHandlerRequest,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: ToSchema` is not satisfied\n   --> src/handlers/payments.rs:226:65\n    |\n226 |         (status = 201, description = \"Refund processed\", body = crate::services::payments::PaymentResponse),\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: ToSchema` is not satisfied","spans":[{"byte_end":6949,"byte_start":6907,"column_end":107,"column_start":65,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `PaymentResponse`","line_end":226,"line_start":226,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":107,"highlight_start":65,"text":"        (status = 201, description = \"Refund processed\", body = crate::services::payments::PaymentResponse),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: PartialSchema` is not satisfied\n   --> src/handlers/payments.rs:226:65\n    |\n226 |         (status = 201, description = \"Refund processed\", body = crate::services::payments::PaymentResponse),\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `PaymentResponse` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::name`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`\n...\n405 |     fn name() -> Cow<'static, str> {\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `PaymentResponse` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::name`","rendered":null,"spans":[{"byte_end":19631,"byte_start":19627,"column_end":12,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":405,"line_start":405,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn name() -> Cow<'static, str> {"}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::name`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: PartialSchema` is not satisfied","spans":[{"byte_end":6949,"byte_start":6907,"column_end":107,"column_start":65,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `PaymentResponse`","line_end":226,"line_start":226,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":107,"highlight_start":65,"text":"        (status = 201, description = \"Refund processed\", body = crate::services::payments::PaymentResponse),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `RefundPaymentHandlerRequest: ToSchema` is not satisfied\n   --> src/handlers/payments.rs:224:20\n    |\n224 |     request_body = RefundPaymentHandlerRequest,\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `RefundPaymentHandlerRequest`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `RefundPaymentHandlerRequest: ToSchema` is not satisfied","spans":[{"byte_end":6826,"byte_start":6799,"column_end":47,"column_start":20,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `RefundPaymentHandlerRequest`","line_end":224,"line_start":224,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":20,"text":"    request_body = RefundPaymentHandlerRequest,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `RefundPaymentHandlerRequest: PartialSchema` is not satisfied\n   --> src/handlers/payments.rs:224:20\n    |\n224 |     request_body = RefundPaymentHandlerRequest,\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `RefundPaymentHandlerRequest`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `RefundPaymentHandlerRequest` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::name`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`\n...\n405 |     fn name() -> Cow<'static, str> {\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `RefundPaymentHandlerRequest` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::name`","rendered":null,"spans":[{"byte_end":19631,"byte_start":19627,"column_end":12,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":405,"line_start":405,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn name() -> Cow<'static, str> {"}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::name`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `RefundPaymentHandlerRequest: PartialSchema` is not satisfied","spans":[{"byte_end":6826,"byte_start":6799,"column_end":47,"column_start":20,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `RefundPaymentHandlerRequest`","line_end":224,"line_start":224,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":20,"text":"    request_body = RefundPaymentHandlerRequest,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: ToSchema` is not satisfied\n   --> src/handlers/payments.rs:226:65\n    |\n226 |         (status = 201, description = \"Refund processed\", body = crate::services::payments::PaymentResponse),\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: ToSchema` is not satisfied","spans":[{"byte_end":6949,"byte_start":6907,"column_end":107,"column_start":65,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `PaymentResponse`","line_end":226,"line_start":226,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":107,"highlight_start":65,"text":"        (status = 201, description = \"Refund processed\", body = crate::services::payments::PaymentResponse),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: PartialSchema` is not satisfied\n   --> src/handlers/payments.rs:226:65\n    |\n226 |         (status = 201, description = \"Refund processed\", body = crate::services::payments::PaymentResponse),\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `PaymentResponse` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::name`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`\n...\n405 |     fn name() -> Cow<'static, str> {\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `PaymentResponse` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::name`","rendered":null,"spans":[{"byte_end":19631,"byte_start":19627,"column_end":12,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":405,"line_start":405,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn name() -> Cow<'static, str> {"}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::name`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: PartialSchema` is not satisfied","spans":[{"byte_end":6949,"byte_start":6907,"column_end":107,"column_start":65,"expansion":null,"file_name":"src/handlers/payments.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `PaymentResponse`","line_end":226,"line_start":226,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":107,"highlight_start":65,"text":"        (status = 201, description = \"Refund processed\", body = crate::services::payments::PaymentResponse),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0559]: variant `ApiError::InternalServerError` has no field named `message`\n   --> src/handlers/commerce/agentic_checkout.rs:189:13\n    |\n189 |             message: \"Internal server error\".to_string(),\n    |             ^^^^^^^ `ApiError::InternalServerError` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"all struct fields are already assigned","rendered":null,"spans":[]}],"code":{"code":"E0559","explanation":"An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"},"level":"error","message":"variant `ApiError::InternalServerError` has no field named `message`","spans":[{"byte_end":6610,"byte_start":6603,"column_end":20,"column_start":13,"expansion":null,"file_name":"src/handlers/commerce/agentic_checkout.rs","is_primary":true,"label":"`ApiError::InternalServerError` does not have this field","line_end":189,"line_start":189,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":13,"text":"            message: \"Internal server error\".to_string(),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `OutboxItem: ToSchema` is not satisfied\n  --> src/handlers/outbox_admin.rs:31:67\n   |\n31 |         (status = 200, description = \"List outbox items\", body = [OutboxItem])\n   |                                                                   ^^^^^^^^^^ the trait `ToSchema` is not implemented for `OutboxItem`\n   |\n   = help: the following other types implement trait `ToSchema`:\n             &'t [T]\n             &'t mut [T]\n             &str\n             ()\n             AdjustInventoryRequest\n             AllocateInventoryRequest\n             ApiResponse<T>\n             BTreeMap<K, T>\n           and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `OutboxItem: ToSchema` is not satisfied","spans":[{"byte_end":824,"byte_start":814,"column_end":77,"column_start":67,"expansion":null,"file_name":"src/handlers/outbox_admin.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `OutboxItem`","line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":77,"highlight_start":67,"text":"        (status = 200, description = \"List outbox items\", body = [OutboxItem])"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `OutboxItem: PartialSchema` is not satisfied\n   --> src/handlers/outbox_admin.rs:31:67\n    |\n 31 |         (status = 200, description = \"List outbox items\", body = [OutboxItem])\n    |                                                                   ^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `OutboxItem`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `OutboxItem` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::name`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`\n...\n405 |     fn name() -> Cow<'static, str> {\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `OutboxItem` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::name`","rendered":null,"spans":[{"byte_end":19631,"byte_start":19627,"column_end":12,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":405,"line_start":405,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn name() -> Cow<'static, str> {"}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::name`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `OutboxItem: PartialSchema` is not satisfied","spans":[{"byte_end":824,"byte_start":814,"column_end":77,"column_start":67,"expansion":null,"file_name":"src/handlers/outbox_admin.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `OutboxItem`","line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":77,"highlight_start":67,"text":"        (status = 200, description = \"List outbox items\", body = [OutboxItem])"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `OutboxItem: ToSchema` is not satisfied\n  --> src/handlers/outbox_admin.rs:31:67\n   |\n31 |         (status = 200, description = \"List outbox items\", body = [OutboxItem])\n   |                                                                   ^^^^^^^^^^ the trait `ToSchema` is not implemented for `OutboxItem`\n   |\n   = help: the following other types implement trait `ToSchema`:\n             &'t [T]\n             &'t mut [T]\n             &str\n             ()\n             AdjustInventoryRequest\n             AllocateInventoryRequest\n             ApiResponse<T>\n             BTreeMap<K, T>\n           and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `OutboxItem: ToSchema` is not satisfied","spans":[{"byte_end":824,"byte_start":814,"column_end":77,"column_start":67,"expansion":null,"file_name":"src/handlers/outbox_admin.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `OutboxItem`","line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":77,"highlight_start":67,"text":"        (status = 200, description = \"List outbox items\", body = [OutboxItem])"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `OutboxItem: PartialSchema` is not satisfied\n   --> src/handlers/outbox_admin.rs:31:67\n    |\n 31 |         (status = 200, description = \"List outbox items\", body = [OutboxItem])\n    |                                                                   ^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `OutboxItem`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `OutboxItem` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::name`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`\n...\n405 |     fn name() -> Cow<'static, str> {\n    |        ---- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `OutboxItem` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::name`","rendered":null,"spans":[{"byte_end":19631,"byte_start":19627,"column_end":12,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":405,"line_start":405,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":8,"text":"    fn name() -> Cow<'static, str> {"}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::name`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `OutboxItem: PartialSchema` is not satisfied","spans":[{"byte_end":824,"byte_start":814,"column_end":77,"column_start":67,"expansion":null,"file_name":"src/handlers/outbox_admin.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `OutboxItem`","line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":77,"highlight_start":67,"text":"        (status = 200, description = \"List outbox items\", body = [OutboxItem])"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `handlers::payments::CreatePaymentRequest: ToSchema` is not satisfied\n   --> src/openapi/mod.rs:146:13\n    |\n146 |             crate::handlers::payments::CreatePaymentRequest,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `handlers::payments::CreatePaymentRequest`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `handlers::payments::CreatePaymentRequest: ToSchema` is not satisfied","spans":[{"byte_end":5500,"byte_start":5453,"column_end":60,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `handlers::payments::CreatePaymentRequest`","line_end":146,"line_start":146,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":13,"text":"            crate::handlers::payments::CreatePaymentRequest,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `handlers::payments::CreatePaymentRequest: PartialSchema` is not satisfied\n   --> src/openapi/mod.rs:146:13\n    |\n146 |             crate::handlers::payments::CreatePaymentRequest,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `handlers::payments::CreatePaymentRequest`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `handlers::payments::CreatePaymentRequest` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::schemas`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::schemas`\n...\n461 |     fn schemas(\n    |        ------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `handlers::payments::CreatePaymentRequest` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::schemas`","rendered":null,"spans":[{"byte_end":21762,"byte_start":21755,"column_end":15,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":461,"line_start":461,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":8,"text":"    fn schemas("}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::schemas`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `handlers::payments::CreatePaymentRequest: PartialSchema` is not satisfied","spans":[{"byte_end":5500,"byte_start":5453,"column_end":60,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `handlers::payments::CreatePaymentRequest`","line_end":146,"line_start":146,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":13,"text":"            crate::handlers::payments::CreatePaymentRequest,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `RefundPaymentHandlerRequest: ToSchema` is not satisfied\n   --> src/openapi/mod.rs:147:13\n    |\n147 |             crate::handlers::payments::RefundPaymentHandlerRequest,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `RefundPaymentHandlerRequest`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `RefundPaymentHandlerRequest: ToSchema` is not satisfied","spans":[{"byte_end":5568,"byte_start":5514,"column_end":67,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `RefundPaymentHandlerRequest`","line_end":147,"line_start":147,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":67,"highlight_start":13,"text":"            crate::handlers::payments::RefundPaymentHandlerRequest,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `RefundPaymentHandlerRequest: PartialSchema` is not satisfied\n   --> src/openapi/mod.rs:147:13\n    |\n147 |             crate::handlers::payments::RefundPaymentHandlerRequest,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `RefundPaymentHandlerRequest`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `RefundPaymentHandlerRequest` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::schemas`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::schemas`\n...\n461 |     fn schemas(\n    |        ------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `RefundPaymentHandlerRequest` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::schemas`","rendered":null,"spans":[{"byte_end":21762,"byte_start":21755,"column_end":15,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":461,"line_start":461,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":8,"text":"    fn schemas("}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::schemas`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `RefundPaymentHandlerRequest: PartialSchema` is not satisfied","spans":[{"byte_end":5568,"byte_start":5514,"column_end":67,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `RefundPaymentHandlerRequest`","line_end":147,"line_start":147,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":67,"highlight_start":13,"text":"            crate::handlers::payments::RefundPaymentHandlerRequest,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: ToSchema` is not satisfied\n   --> src/openapi/mod.rs:148:13\n    |\n148 |             crate::services::payments::PaymentResponse,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: ToSchema` is not satisfied","spans":[{"byte_end":5624,"byte_start":5582,"column_end":55,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `PaymentResponse`","line_end":148,"line_start":148,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":13,"text":"            crate::services::payments::PaymentResponse,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentResponse: PartialSchema` is not satisfied\n   --> src/openapi/mod.rs:148:13\n    |\n148 |             crate::services::payments::PaymentResponse,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `PaymentResponse`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `PaymentResponse` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::schemas`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::schemas`\n...\n461 |     fn schemas(\n    |        ------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `PaymentResponse` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::schemas`","rendered":null,"spans":[{"byte_end":21762,"byte_start":21755,"column_end":15,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":461,"line_start":461,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":8,"text":"    fn schemas("}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::schemas`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentResponse: PartialSchema` is not satisfied","spans":[{"byte_end":5624,"byte_start":5582,"column_end":55,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `PaymentResponse`","line_end":148,"line_start":148,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":13,"text":"            crate::services::payments::PaymentResponse,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentStatusFilter: ToSchema` is not satisfied\n   --> src/openapi/mod.rs:149:13\n    |\n149 |             crate::handlers::payments::PaymentStatusFilter,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `PaymentStatusFilter`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentStatusFilter: ToSchema` is not satisfied","spans":[{"byte_end":5684,"byte_start":5638,"column_end":59,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `PaymentStatusFilter`","line_end":149,"line_start":149,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":13,"text":"            crate::handlers::payments::PaymentStatusFilter,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `PaymentStatusFilter: PartialSchema` is not satisfied\n   --> src/openapi/mod.rs:149:13\n    |\n149 |             crate::handlers::payments::PaymentStatusFilter,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `PaymentStatusFilter`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `PaymentStatusFilter` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::schemas`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::schemas`\n...\n461 |     fn schemas(\n    |        ------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `PaymentStatusFilter` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::schemas`","rendered":null,"spans":[{"byte_end":21762,"byte_start":21755,"column_end":15,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":461,"line_start":461,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":8,"text":"    fn schemas("}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::schemas`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `PaymentStatusFilter: PartialSchema` is not satisfied","spans":[{"byte_end":5684,"byte_start":5638,"column_end":59,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `PaymentStatusFilter`","line_end":149,"line_start":149,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":13,"text":"            crate::handlers::payments::PaymentStatusFilter,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `DashboardMetrics: ToSchema` is not satisfied\n   --> src/openapi/mod.rs:152:13\n    |\n152 |             crate::services::analytics::DashboardMetrics,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `DashboardMetrics`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `DashboardMetrics: ToSchema` is not satisfied","spans":[{"byte_end":5774,"byte_start":5730,"column_end":57,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `DashboardMetrics`","line_end":152,"line_start":152,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":13,"text":"            crate::services::analytics::DashboardMetrics,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `DashboardMetrics: PartialSchema` is not satisfied\n   --> src/openapi/mod.rs:152:13\n    |\n152 |             crate::services::analytics::DashboardMetrics,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `DashboardMetrics`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `DashboardMetrics` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::schemas`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::schemas`\n...\n461 |     fn schemas(\n    |        ------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `DashboardMetrics` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::schemas`","rendered":null,"spans":[{"byte_end":21762,"byte_start":21755,"column_end":15,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":461,"line_start":461,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":8,"text":"    fn schemas("}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::schemas`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `DashboardMetrics: PartialSchema` is not satisfied","spans":[{"byte_end":5774,"byte_start":5730,"column_end":57,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `DashboardMetrics`","line_end":152,"line_start":152,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":13,"text":"            crate::services::analytics::DashboardMetrics,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `SalesMetrics: ToSchema` is not satisfied\n   --> src/openapi/mod.rs:153:13\n    |\n153 |             crate::services::analytics::SalesMetrics,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `SalesMetrics`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `SalesMetrics: ToSchema` is not satisfied","spans":[{"byte_end":5828,"byte_start":5788,"column_end":53,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `SalesMetrics`","line_end":153,"line_start":153,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":13,"text":"            crate::services::analytics::SalesMetrics,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `SalesMetrics: PartialSchema` is not satisfied\n   --> src/openapi/mod.rs:153:13\n    |\n153 |             crate::services::analytics::SalesMetrics,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `SalesMetrics`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `SalesMetrics` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::schemas`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::schemas`\n...\n461 |     fn schemas(\n    |        ------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `SalesMetrics` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::schemas`","rendered":null,"spans":[{"byte_end":21762,"byte_start":21755,"column_end":15,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":461,"line_start":461,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":8,"text":"    fn schemas("}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::schemas`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `SalesMetrics: PartialSchema` is not satisfied","spans":[{"byte_end":5828,"byte_start":5788,"column_end":53,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `SalesMetrics`","line_end":153,"line_start":153,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":13,"text":"            crate::services::analytics::SalesMetrics,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `InventoryMetrics: ToSchema` is not satisfied\n   --> src/openapi/mod.rs:154:13\n    |\n154 |             crate::services::analytics::InventoryMetrics,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `InventoryMetrics`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `InventoryMetrics: ToSchema` is not satisfied","spans":[{"byte_end":5886,"byte_start":5842,"column_end":57,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `InventoryMetrics`","line_end":154,"line_start":154,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":13,"text":"            crate::services::analytics::InventoryMetrics,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `InventoryMetrics: PartialSchema` is not satisfied\n   --> src/openapi/mod.rs:154:13\n    |\n154 |             crate::services::analytics::InventoryMetrics,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `InventoryMetrics`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `InventoryMetrics` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::schemas`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::schemas`\n...\n461 |     fn schemas(\n    |        ------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `InventoryMetrics` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::schemas`","rendered":null,"spans":[{"byte_end":21762,"byte_start":21755,"column_end":15,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":461,"line_start":461,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":8,"text":"    fn schemas("}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::schemas`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `InventoryMetrics: PartialSchema` is not satisfied","spans":[{"byte_end":5886,"byte_start":5842,"column_end":57,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `InventoryMetrics`","line_end":154,"line_start":154,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":13,"text":"            crate::services::analytics::InventoryMetrics,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `ShipmentMetrics: ToSchema` is not satisfied\n   --> src/openapi/mod.rs:155:13\n    |\n155 |             crate::services::analytics::ShipmentMetrics,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `ShipmentMetrics`\n    |\n    = help: the following other types implement trait `ToSchema`:\n              &'t [T]\n              &'t mut [T]\n              &str\n              ()\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n            and 81 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ToSchema`:\n  &'t [T]\n  &'t mut [T]\n  &str\n  ()\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\nand 81 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `ShipmentMetrics: ToSchema` is not satisfied","spans":[{"byte_end":5943,"byte_start":5900,"column_end":56,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"the trait `ToSchema` is not implemented for `ShipmentMetrics`","line_end":155,"line_start":155,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":13,"text":"            crate::services::analytics::ShipmentMetrics,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `ShipmentMetrics: PartialSchema` is not satisfied\n   --> src/openapi/mod.rs:155:13\n    |\n155 |             crate::services::analytics::ShipmentMetrics,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `ShipmentMetrics`\n    |\n    = help: the following other types implement trait `ComposeSchema`:\n              &[T]\n              &mut [T]\n              &str\n              AdjustInventoryRequest\n              AllocateInventoryRequest\n              ApiResponse<T>\n              BTreeMap<K, T>\n              BTreeSet<K>\n            and 79 others\n    = note: required for `ShipmentMetrics` to implement `PartialSchema`\nnote: required by a bound in `utoipa::ToSchema::schemas`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs:374:21\n    |\n374 | pub trait ToSchema: PartialSchema {\n    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::schemas`\n...\n461 |     fn schemas(\n    |        ------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `ComposeSchema`:\n  &[T]\n  &mut [T]\n  &str\n  AdjustInventoryRequest\n  AllocateInventoryRequest\n  ApiResponse<T>\n  BTreeMap<K, T>\n  BTreeSet<K>\nand 79 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `ShipmentMetrics` to implement `PartialSchema`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `utoipa::ToSchema::schemas`","rendered":null,"spans":[{"byte_end":21762,"byte_start":21755,"column_end":15,"column_start":8,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":461,"line_start":461,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":8,"text":"    fn schemas("}]},{"byte_end":18413,"byte_start":18400,"column_end":34,"column_start":21,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.4.0/src/lib.rs","is_primary":true,"label":"required by this bound in `ToSchema::schemas`","line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"pub trait ToSchema: PartialSchema {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `ShipmentMetrics: PartialSchema` is not satisfied","spans":[{"byte_end":5943,"byte_start":5900,"column_end":56,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"the trait `ComposeSchema` is not implemented for `ShipmentMetrics`","line_end":155,"line_start":155,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":13,"text":"            crate::services::analytics::ShipmentMetrics,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `request_interceptor` found for struct `utoipa_swagger_ui::Config` in the current scope\n   --> src/openapi/mod.rs:170:18\n    |\n168 | /             utoipa_swagger_ui::Config::from(\"/api-docs/openapi.json\")\n169 | |                 .try_it_out_enabled(true)\n170 | |                 .request_interceptor(\n    | |                 -^^^^^^^^^^^^^^^^^^^ method not found in `utoipa_swagger_ui::Config<'_>`\n    | |_________________|\n    |\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `request_interceptor` found for struct `utoipa_swagger_ui::Config` in the current scope","spans":[{"byte_end":6330,"byte_start":6213,"column_end":18,"column_start":13,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":false,"label":"","line_end":170,"line_start":168,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":13,"text":"            utoipa_swagger_ui::Config::from(\"/api-docs/openapi.json\")"},{"highlight_end":42,"highlight_start":1,"text":"                .try_it_out_enabled(true)"},{"highlight_end":18,"highlight_start":1,"text":"                .request_interceptor("}]},{"byte_end":6349,"byte_start":6330,"column_end":37,"column_start":18,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":"method not found in `utoipa_swagger_ui::Config<'_>`","line_end":170,"line_start":170,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":18,"text":"                .request_interceptor("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/services/payments.rs:98:9\n   |\n94 | #[derive(Debug, Serialize, Deserialize, Validate)]\n   |                                         -------- arguments to this function are incorrect\n...\n98 |     pub amount: Option<Decimal>,\n   |         ^^^^^^ expected `&Option<Decimal>`, found `&Decimal`\n   |\n   = note: expected reference `&std::option::Option<rust_decimal::Decimal>`\n              found reference `&rust_decimal::Decimal`\nnote: function defined here\n  --> src/services/payments.rs:28:4\n   |\n28 | fn validate_optional_positive_decimal(value: &Option<Decimal>) -> Result<(), ValidationError> {\n   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&std::option::Option<rust_decimal::Decimal>`\n   found reference `&rust_decimal::Decimal`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":775,"byte_start":752,"column_end":62,"column_start":39,"expansion":null,"file_name":"src/services/payments.rs","is_primary":false,"label":"","line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":39,"text":"fn validate_optional_positive_decimal(value: &Option<Decimal>) -> Result<(), ValidationError> {"}]},{"byte_end":751,"byte_start":717,"column_end":38,"column_start":4,"expansion":null,"file_name":"src/services/payments.rs","is_primary":true,"label":null,"line_end":28,"line_start":28,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":4,"text":"fn validate_optional_positive_decimal(value: &Option<Decimal>) -> Result<(), ValidationError> {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":2685,"byte_start":2679,"column_end":15,"column_start":9,"expansion":null,"file_name":"src/services/payments.rs","is_primary":true,"label":"expected `&Option<Decimal>`, found `&Decimal`","line_end":98,"line_start":98,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":9,"text":"    pub amount: Option<Decimal>,"}]},{"byte_end":2545,"byte_start":2537,"column_end":49,"column_start":41,"expansion":{"def_site_span":{"byte_end":679,"byte_start":660,"column_end":20,"column_start":1,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/validator_derive-0.14.0/src/lib.rs","is_primary":false,"label":null,"line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":1,"text":"#[proc_macro_error]"}]},"macro_decl_name":"#[derive(Validate)]","span":{"byte_end":2545,"byte_start":2537,"column_end":49,"column_start":41,"expansion":null,"file_name":"src/services/payments.rs","is_primary":false,"label":null,"line_end":94,"line_start":94,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":41,"text":"#[derive(Debug, Serialize, Deserialize, Validate)]"}]}},"file_name":"src/services/payments.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":94,"line_start":94,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":41,"text":"#[derive(Debug, Serialize, Deserialize, Validate)]"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/lib.rs:331:29\n    |\n331 |          .nest(\"/products\", handlers::commerce::products_routes())\n    |           ----              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Router<AppState>`, found `Router<Arc<AppState>>`\n    |           |\n    |           arguments to this method are incorrect\n    |\n    = note: expected struct `axum::Router<AppState>`\n               found struct `axum::Router<std::sync::Arc<AppState>>`\nnote: method defined here\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.7.9/src/routing/mod.rs:195:12\n    |\n195 |     pub fn nest(self, path: &str, router: Router<S>) -> Self {\n    |            ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `axum::Router<AppState>`\n   found struct `axum::Router<std::sync::Arc<AppState>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":5519,"byte_start":5515,"column_end":16,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.7.9/src/routing/mod.rs","is_primary":true,"label":null,"line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":12,"text":"    pub fn nest(self, path: &str, router: Router<S>) -> Self {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":13326,"byte_start":13289,"column_end":66,"column_start":29,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":"expected `Router<AppState>`, found `Router<Arc<AppState>>`","line_end":331,"line_start":331,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":29,"text":"         .nest(\"/products\", handlers::commerce::products_routes())"}]},{"byte_end":13275,"byte_start":13271,"column_end":15,"column_start":11,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":331,"line_start":331,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":11,"text":"         .nest(\"/products\", handlers::commerce::products_routes())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/lib.rs:332:26\n    |\n332 |          .nest(\"/carts\", handlers::commerce::carts_routes())\n    |           ----           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Router<AppState>`, found `Router<Arc<AppState>>`\n    |           |\n    |           arguments to this method are incorrect\n    |\n    = note: expected struct `axum::Router<AppState>`\n               found struct `axum::Router<std::sync::Arc<AppState>>`\nnote: method defined here\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.7.9/src/routing/mod.rs:195:12\n    |\n195 |     pub fn nest(self, path: &str, router: Router<S>) -> Self {\n    |            ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `axum::Router<AppState>`\n   found struct `axum::Router<std::sync::Arc<AppState>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":5519,"byte_start":5515,"column_end":16,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.7.9/src/routing/mod.rs","is_primary":true,"label":null,"line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":12,"text":"    pub fn nest(self, path: &str, router: Router<S>) -> Self {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":13387,"byte_start":13353,"column_end":60,"column_start":26,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":"expected `Router<AppState>`, found `Router<Arc<AppState>>`","line_end":332,"line_start":332,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":26,"text":"         .nest(\"/carts\", handlers::commerce::carts_routes())"}]},{"byte_end":13342,"byte_start":13338,"column_end":15,"column_start":11,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":332,"line_start":332,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":11,"text":"         .nest(\"/carts\", handlers::commerce::carts_routes())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/lib.rs:333:29\n    |\n333 |          .nest(\"/checkout\", handlers::commerce::checkout_routes())\n    |           ----              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Router<AppState>`, found `Router<Arc<AppState>>`\n    |           |\n    |           arguments to this method are incorrect\n    |\n    = note: expected struct `axum::Router<AppState>`\n               found struct `axum::Router<std::sync::Arc<AppState>>`\nnote: method defined here\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.7.9/src/routing/mod.rs:195:12\n    |\n195 |     pub fn nest(self, path: &str, router: Router<S>) -> Self {\n    |            ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `axum::Router<AppState>`\n   found struct `axum::Router<std::sync::Arc<AppState>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":5519,"byte_start":5515,"column_end":16,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.7.9/src/routing/mod.rs","is_primary":true,"label":null,"line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":12,"text":"    pub fn nest(self, path: &str, router: Router<S>) -> Self {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":13454,"byte_start":13417,"column_end":66,"column_start":29,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":"expected `Router<AppState>`, found `Router<Arc<AppState>>`","line_end":333,"line_start":333,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":29,"text":"         .nest(\"/checkout\", handlers::commerce::checkout_routes())"}]},{"byte_end":13403,"byte_start":13399,"column_end":15,"column_start":11,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":333,"line_start":333,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":11,"text":"         .nest(\"/checkout\", handlers::commerce::checkout_routes())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/lib.rs:334:30\n    |\n334 |          .nest(\"/customers\", handlers::commerce::customers_routes())\n    |           ----               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Router<AppState>`, found `Router<Arc<AppState>>`\n    |           |\n    |           arguments to this method are incorrect\n    |\n    = note: expected struct `axum::Router<AppState>`\n               found struct `axum::Router<std::sync::Arc<AppState>>`\nnote: method defined here\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.7.9/src/routing/mod.rs:195:12\n    |\n195 |     pub fn nest(self, path: &str, router: Router<S>) -> Self {\n    |            ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `axum::Router<AppState>`\n   found struct `axum::Router<std::sync::Arc<AppState>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":5519,"byte_start":5515,"column_end":16,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.7.9/src/routing/mod.rs","is_primary":true,"label":null,"line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":12,"text":"    pub fn nest(self, path: &str, router: Router<S>) -> Self {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":13523,"byte_start":13485,"column_end":68,"column_start":30,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":"expected `Router<AppState>`, found `Router<Arc<AppState>>`","line_end":334,"line_start":334,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":68,"highlight_start":30,"text":"         .nest(\"/customers\", handlers::commerce::customers_routes())"}]},{"byte_end":13470,"byte_start":13466,"column_end":15,"column_start":11,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":334,"line_start":334,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":11,"text":"         .nest(\"/customers\", handlers::commerce::customers_routes())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `axum::Router<AppState>: From<axum::Router<std::sync::Arc<AppState>>>` is not satisfied\n   --> src/lib.rs:337:17\n    |\n337 |          .merge(handlers::commerce::agentic_checkout_routes())\n    |           ----- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<axum::Router<std::sync::Arc<AppState>>>` is not implemented for `axum::Router<AppState>`\n    |           |\n    |           required by a bound introduced by this call\n    |\n    = note: required for `axum::Router<std::sync::Arc<AppState>>` to implement `Into<axum::Router<AppState>>`\nnote: required by a bound in `axum::Router::<S>::merge`\n   --> /home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.7.9/src/routing/mod.rs:232:12\n    |\n230 |     pub fn merge<R>(self, other: R) -> Self\n    |            ----- required by a bound in this associated function\n231 |     where\n232 |         R: Into<Router<S>>,\n    |            ^^^^^^^^^^^^^^^ required by this bound in `Router::<S>::merge`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"required for `axum::Router<std::sync::Arc<AppState>>` to implement `Into<axum::Router<AppState>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `axum::Router::<S>::merge`","rendered":null,"spans":[{"byte_end":6805,"byte_start":6800,"column_end":17,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.7.9/src/routing/mod.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":230,"line_start":230,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":12,"text":"    pub fn merge<R>(self, other: R) -> Self"}]},{"byte_end":6869,"byte_start":6854,"column_end":27,"column_start":12,"expansion":null,"file_name":"/home/dom/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.7.9/src/routing/mod.rs","is_primary":true,"label":"required by this bound in `Router::<S>::merge`","line_end":232,"line_start":232,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":12,"text":"        R: Into<Router<S>>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `axum::Router<AppState>: From<axum::Router<std::sync::Arc<AppState>>>` is not satisfied","spans":[{"byte_end":13655,"byte_start":13610,"column_end":62,"column_start":17,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":"the trait `From<axum::Router<std::sync::Arc<AppState>>>` is not implemented for `axum::Router<AppState>`","line_end":337,"line_start":337,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":17,"text":"         .merge(handlers::commerce::agentic_checkout_routes())"}]},{"byte_end":13609,"byte_start":13604,"column_end":16,"column_start":11,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":337,"line_start":337,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":11,"text":"         .merge(handlers::commerce::agentic_checkout_routes())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `http_body_util::BodyExt`\n --> src/cache/middleware.rs:9:5\n  |\n9 | use http_body_util::BodyExt;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `http_body_util::BodyExt`","spans":[{"byte_end":222,"byte_start":199,"column_end":28,"column_start":5,"expansion":null,"file_name":"src/cache/middleware.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":5,"text":"use http_body_util::BodyExt;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ColumnTrait`\n --> src/cache/query.rs:3:57\n  |\n3 |     ActiveModelBehavior, ActiveModelTrait, ActiveValue, ColumnTrait,\n  |                                                         ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ColumnTrait`","spans":[{"byte_end":122,"byte_start":111,"column_end":68,"column_start":57,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":68,"highlight_start":57,"text":"    ActiveModelBehavior, ActiveModelTrait, ActiveValue, ColumnTrait,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ActiveModelTrait`\n --> src/cache/query.rs:3:26\n  |\n3 |     ActiveModelBehavior, ActiveModelTrait, ActiveValue, ColumnTrait,\n  |                          ^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ActiveModelTrait`","spans":[{"byte_end":96,"byte_start":80,"column_end":42,"column_start":26,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":26,"text":"    ActiveModelBehavior, ActiveModelTrait, ActiveValue, ColumnTrait,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ActiveModelBehavior`\n --> src/cache/query.rs:3:5\n  |\n3 |     ActiveModelBehavior, ActiveModelTrait, ActiveValue, ColumnTrait,\n  |     ^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ActiveModelBehavior`","spans":[{"byte_end":78,"byte_start":59,"column_end":24,"column_start":5,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":5,"text":"    ActiveModelBehavior, ActiveModelTrait, ActiveValue, ColumnTrait,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `QueryTrait`\n --> src/cache/query.rs:5:21\n  |\n5 |     PaginatorTrait, QueryTrait, Select, Statement,\n  |                     ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `QueryTrait`","spans":[{"byte_end":191,"byte_start":181,"column_end":31,"column_start":21,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":21,"text":"    PaginatorTrait, QueryTrait, Select, Statement,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `query`\n  --> src/commands/returns/close_return_command.rs:17:5\n   |\n17 |     query::*,\n   |     ^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `query`","spans":[{"byte_end":448,"byte_start":443,"column_end":10,"column_start":5,"expansion":null,"file_name":"src/commands/returns/close_return_command.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":5,"text":"    query::*,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `query`\n  --> src/commands/returns/complete_return_command.rs:17:5\n   |\n17 |     query::*,\n   |     ^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `query`","spans":[{"byte_end":448,"byte_start":443,"column_end":10,"column_start":5,"expansion":null,"file_name":"src/commands/returns/complete_return_command.rs","is_primary":true,"label":null,"line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":5,"text":"    query::*,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `BodyExt`\n  --> src/tracing/mod.rs:43:22\n   |\n43 | use http_body_util::{BodyExt, combinators::Frame};\n   |                      ^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `BodyExt`","spans":[{"byte_end":1186,"byte_start":1179,"column_end":29,"column_start":22,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":43,"line_start":43,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":22,"text":"use http_body_util::{BodyExt, combinators::Frame};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ActiveModelTrait`\n  --> src/commands/shipments/create_shipment_command.rs:11:33\n   |\n11 | use sea_orm::{ActiveValue::Set, ActiveModelTrait, EntityTrait, TransactionError, TransactionTrait};\n   |                                 ^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ActiveModelTrait`","spans":[{"byte_end":313,"byte_start":297,"column_end":49,"column_start":33,"expansion":null,"file_name":"src/commands/shipments/create_shipment_command.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":33,"text":"use sea_orm::{ActiveValue::Set, ActiveModelTrait, EntityTrait, TransactionError, TransactionTrait};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `query`\n  --> src/commands/shipments/hold_shipment_command.rs:12:26\n   |\n12 | use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};\n   |                          ^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `query`","spans":[{"byte_end":253,"byte_start":248,"column_end":31,"column_start":26,"expansion":null,"file_name":"src/commands/shipments/hold_shipment_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":26,"text":"use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `query`\n  --> src/commands/shipments/reschedule_shipment_command.rs:13:26\n   |\n13 | use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};\n   |                          ^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `query`","spans":[{"byte_end":268,"byte_start":263,"column_end":31,"column_start":26,"expansion":null,"file_name":"src/commands/shipments/reschedule_shipment_command.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":26,"text":"use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `StreamExt`\n --> src/tracing/mod.rs:9:53\n  |\n9 | use futures::{future::BoxFuture, Future, FutureExt, StreamExt};\n  |                                                     ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `StreamExt`","spans":[{"byte_end":253,"byte_start":244,"column_end":62,"column_start":53,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":53,"text":"use futures::{future::BoxFuture, Future, FutureExt, StreamExt};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `query`\n  --> src/commands/shipments/update_shipment_command.rs:10:26\n   |\n10 | use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};\n   |                          ^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `query`","spans":[{"byte_end":241,"byte_start":236,"column_end":31,"column_start":26,"expansion":null,"file_name":"src/commands/shipments/update_shipment_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":26,"text":"use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `query`\n  --> src/commands/shipments/update_shipment_general_command.rs:10:26\n   |\n10 | use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};\n   |                          ^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `query`","spans":[{"byte_end":238,"byte_start":233,"column_end":31,"column_start":26,"expansion":null,"file_name":"src/commands/shipments/update_shipment_general_command.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":26,"text":"use sea_orm::{entity::*, query::*, ActiveValue, ColumnTrait, EntityTrait};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `entity`\n  --> src/commands/shipments/verify_shipment_address_command.rs:12:15\n   |\n12 | use sea_orm::{entity::*, query::*, ColumnTrait, EntityTrait};\n   |               ^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `entity`","spans":[{"byte_end":231,"byte_start":225,"column_end":21,"column_start":15,"expansion":null,"file_name":"src/commands/shipments/verify_shipment_address_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":15,"text":"use sea_orm::{entity::*, query::*, ColumnTrait, EntityTrait};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `query`\n  --> src/commands/shipments/verify_shipment_address_command.rs:12:26\n   |\n12 | use sea_orm::{entity::*, query::*, ColumnTrait, EntityTrait};\n   |                          ^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `query`","spans":[{"byte_end":241,"byte_start":236,"column_end":31,"column_start":26,"expansion":null,"file_name":"src/commands/shipments/verify_shipment_address_command.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":26,"text":"use sea_orm::{entity::*, query::*, ColumnTrait, EntityTrait};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `futures::TryFutureExt`\n --> src/commands/workorders/list_work_orders.rs:7:5\n  |\n7 | use futures::TryFutureExt;\n  |     ^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `futures::TryFutureExt`","spans":[{"byte_end":187,"byte_start":166,"column_end":26,"column_start":5,"expansion":null,"file_name":"src/commands/workorders/list_work_orders.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":5,"text":"use futures::TryFutureExt;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ToSchema`\n --> src/openapi/mod.rs:1:23\n  |\n1 | use utoipa::{OpenApi, ToSchema};\n  |                       ^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ToSchema`","spans":[{"byte_end":30,"byte_start":22,"column_end":31,"column_start":23,"expansion":null,"file_name":"src/openapi/mod.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":23,"text":"use utoipa::{OpenApi, ToSchema};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ConnectionTrait`\n  --> src/services/warranties.rs:20:36\n   |\n20 |     ActiveModelTrait, ColumnTrait, ConnectionTrait, DbErr, EntityTrait, PaginatorTrait,\n   |                                    ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ConnectionTrait`","spans":[{"byte_end":650,"byte_start":635,"column_end":51,"column_start":36,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":20,"line_start":20,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":36,"text":"    ActiveModelTrait, ColumnTrait, ConnectionTrait, DbErr, EntityTrait, PaginatorTrait,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ActiveModelTrait`\n  --> src/services/warranties.rs:20:5\n   |\n20 |     ActiveModelTrait, ColumnTrait, ConnectionTrait, DbErr, EntityTrait, PaginatorTrait,\n   |     ^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ActiveModelTrait`","spans":[{"byte_end":620,"byte_start":604,"column_end":21,"column_start":5,"expansion":null,"file_name":"src/services/warranties.rs","is_primary":true,"label":null,"line_end":20,"line_start":20,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":5,"text":"    ActiveModelTrait, ColumnTrait, ConnectionTrait, DbErr, EntityTrait, PaginatorTrait,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ConnectionTrait`\n  --> src/services/work_orders.rs:25:36\n   |\n25 |     ActiveModelTrait, ColumnTrait, ConnectionTrait, DbErr, EntityTrait, PaginatorTrait,\n   |                                    ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ConnectionTrait`","spans":[{"byte_end":942,"byte_start":927,"column_end":51,"column_start":36,"expansion":null,"file_name":"src/services/work_orders.rs","is_primary":true,"label":null,"line_end":25,"line_start":25,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":36,"text":"    ActiveModelTrait, ColumnTrait, ConnectionTrait, DbErr, EntityTrait, PaginatorTrait,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `cache`\n   --> src/cache/middleware.rs:295:13\n    |\n295 |         let cache = self.http_cache.clone();\n    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_cache`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":8863,"byte_start":8858,"column_end":18,"column_start":13,"expansion":null,"file_name":"src/cache/middleware.rs","is_primary":true,"label":null,"line_end":295,"line_start":295,"suggested_replacement":"_cache","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":18,"highlight_start":13,"text":"        let cache = self.http_cache.clone();"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `cache`","spans":[{"byte_end":8863,"byte_start":8858,"column_end":18,"column_start":13,"expansion":null,"file_name":"src/cache/middleware.rs","is_primary":true,"label":null,"line_end":295,"line_start":295,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":13,"text":"        let cache = self.http_cache.clone();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `query`\n  --> src/cache/query.rs:47:28\n   |\n47 |     fn generate_key(&self, query: &Select<E>) -> String {\n   |                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_query`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":1312,"byte_start":1307,"column_end":33,"column_start":28,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":47,"line_start":47,"suggested_replacement":"_query","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":33,"highlight_start":28,"text":"    fn generate_key(&self, query: &Select<E>) -> String {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `query`","spans":[{"byte_end":1312,"byte_start":1307,"column_end":33,"column_start":28,"expansion":null,"file_name":"src/cache/query.rs","is_primary":true,"label":null,"line_end":47,"line_start":47,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":28,"text":"    fn generate_key(&self, query: &Select<E>) -> String {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `event_sender`\n  --> src/commands/purchaseorders/receive_purchase_order_command.rs:36:9\n   |\n36 |         event_sender: Arc<EventSender>,\n   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_event_sender`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":860,"byte_start":848,"column_end":21,"column_start":9,"expansion":null,"file_name":"src/commands/purchaseorders/receive_purchase_order_command.rs","is_primary":true,"label":null,"line_end":36,"line_start":36,"suggested_replacement":"_event_sender","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":21,"highlight_start":9,"text":"        event_sender: Arc<EventSender>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `event_sender`","spans":[{"byte_end":860,"byte_start":848,"column_end":21,"column_start":9,"expansion":null,"file_name":"src/commands/purchaseorders/receive_purchase_order_command.rs","is_primary":true,"label":null,"line_end":36,"line_start":36,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":9,"text":"        event_sender: Arc<EventSender>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `event_sender`\n  --> src/commands/purchaseorders/update_purchase_order_command.rs:38:9\n   |\n38 |         event_sender: Arc<EventSender>,\n   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_event_sender`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":927,"byte_start":915,"column_end":21,"column_start":9,"expansion":null,"file_name":"src/commands/purchaseorders/update_purchase_order_command.rs","is_primary":true,"label":null,"line_end":38,"line_start":38,"suggested_replacement":"_event_sender","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":21,"highlight_start":9,"text":"        event_sender: Arc<EventSender>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `event_sender`","spans":[{"byte_end":927,"byte_start":915,"column_end":21,"column_start":9,"expansion":null,"file_name":"src/commands/purchaseorders/update_purchase_order_command.rs","is_primary":true,"label":null,"line_end":38,"line_start":38,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":9,"text":"        event_sender: Arc<EventSender>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `event_sender`\n  --> src/commands/returns/add_note_command.rs:40:9\n   |\n40 |         event_sender: Arc<EventSender>,\n   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_event_sender`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":1030,"byte_start":1018,"column_end":21,"column_start":9,"expansion":null,"file_name":"src/commands/returns/add_note_command.rs","is_primary":true,"label":null,"line_end":40,"line_start":40,"suggested_replacement":"_event_sender","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":21,"highlight_start":9,"text":"        event_sender: Arc<EventSender>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `event_sender`","spans":[{"byte_end":1030,"byte_start":1018,"column_end":21,"column_start":9,"expansion":null,"file_name":"src/commands/returns/add_note_command.rs","is_primary":true,"label":null,"line_end":40,"line_start":40,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":9,"text":"        event_sender: Arc<EventSender>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `insert`\n  --> src/entities/order.rs:55:61\n   |\n55 |     async fn before_save<C: ConnectionTrait>(self, _db: &C, insert: bool) -> Result<Self, DbErr>\n   |                                                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_insert`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":1602,"byte_start":1596,"column_end":67,"column_start":61,"expansion":null,"file_name":"src/entities/order.rs","is_primary":true,"label":null,"line_end":55,"line_start":55,"suggested_replacement":"_insert","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":67,"highlight_start":61,"text":"    async fn before_save<C: ConnectionTrait>(self, _db: &C, insert: bool) -> Result<Self, DbErr>"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `insert`","spans":[{"byte_end":1602,"byte_start":1596,"column_end":67,"column_start":61,"expansion":null,"file_name":"src/entities/order.rs","is_primary":true,"label":null,"line_end":55,"line_start":55,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":67,"highlight_start":61,"text":"    async fn before_save<C: ConnectionTrait>(self, _db: &C, insert: bool) -> Result<Self, DbErr>"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: variable does not need to be mutable\n  --> src/entities/order.rs:59:13\n   |\n59 |         let mut active_model = self;\n   |             ----^^^^^^^^^^^^\n   |             |\n   |             help: remove this `mut`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":1693,"byte_start":1689,"column_end":17,"column_start":13,"expansion":null,"file_name":"src/entities/order.rs","is_primary":true,"label":null,"line_end":59,"line_start":59,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":17,"highlight_start":13,"text":"        let mut active_model = self;"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":1705,"byte_start":1689,"column_end":29,"column_start":13,"expansion":null,"file_name":"src/entities/order.rs","is_primary":true,"label":null,"line_end":59,"line_start":59,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":13,"text":"        let mut active_model = self;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `msg`\n  --> src/handlers/common.rs:35:33\n   |\n35 |         ServiceError::AuthError(msg) => ApiError::Unauthorized,\n   |                                 ^^^ help: if this is intentional, prefix it with an underscore: `_msg`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":1095,"byte_start":1092,"column_end":36,"column_start":33,"expansion":null,"file_name":"src/handlers/common.rs","is_primary":true,"label":null,"line_end":35,"line_start":35,"suggested_replacement":"_msg","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":36,"highlight_start":33,"text":"        ServiceError::AuthError(msg) => ApiError::Unauthorized,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `msg`","spans":[{"byte_end":1095,"byte_start":1092,"column_end":36,"column_start":33,"expansion":null,"file_name":"src/handlers/common.rs","is_primary":true,"label":null,"line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":33,"text":"        ServiceError::AuthError(msg) => ApiError::Unauthorized,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `message_queue`\n  --> src/handlers/mod.rs:57:13\n   |\n57 |         let message_queue: Arc<dyn MessageQueue> = Arc::new(InMemoryMessageQueue::new());\n   |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message_queue`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":2075,"byte_start":2062,"column_end":26,"column_start":13,"expansion":null,"file_name":"src/handlers/mod.rs","is_primary":true,"label":null,"line_end":57,"line_start":57,"suggested_replacement":"_message_queue","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":26,"highlight_start":13,"text":"        let message_queue: Arc<dyn MessageQueue> = Arc::new(InMemoryMessageQueue::new());"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `message_queue`","spans":[{"byte_end":2075,"byte_start":2062,"column_end":26,"column_start":13,"expansion":null,"file_name":"src/handlers/mod.rs","is_primary":true,"label":null,"line_end":57,"line_start":57,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":13,"text":"        let message_queue: Arc<dyn MessageQueue> = Arc::new(InMemoryMessageQueue::new());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `circuit_breaker`\n  --> src/handlers/mod.rs:58:13\n   |\n58 |         let circuit_breaker = Arc::new(CircuitBreaker::new(5, Duration::from_secs(60), 2));\n   |             ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_circuit_breaker`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":2167,"byte_start":2152,"column_end":28,"column_start":13,"expansion":null,"file_name":"src/handlers/mod.rs","is_primary":true,"label":null,"line_end":58,"line_start":58,"suggested_replacement":"_circuit_breaker","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":28,"highlight_start":13,"text":"        let circuit_breaker = Arc::new(CircuitBreaker::new(5, Duration::from_secs(60), 2));"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `circuit_breaker`","spans":[{"byte_end":2167,"byte_start":2152,"column_end":28,"column_start":13,"expansion":null,"file_name":"src/handlers/mod.rs","is_primary":true,"label":null,"line_end":58,"line_start":58,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":13,"text":"        let circuit_breaker = Arc::new(CircuitBreaker::new(5, Duration::from_secs(60), 2));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `logger`\n  --> src/handlers/mod.rs:59:13\n   |\n59 |         let logger = Logger::root(slog::Discard, slog::o!());\n   |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_logger`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":2250,"byte_start":2244,"column_end":19,"column_start":13,"expansion":null,"file_name":"src/handlers/mod.rs","is_primary":true,"label":null,"line_end":59,"line_start":59,"suggested_replacement":"_logger","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":19,"highlight_start":13,"text":"        let logger = Logger::root(slog::Discard, slog::o!());"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `logger`","spans":[{"byte_end":2250,"byte_start":2244,"column_end":19,"column_start":13,"expansion":null,"file_name":"src/handlers/mod.rs","is_primary":true,"label":null,"line_end":59,"line_start":59,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":13,"text":"        let logger = Logger::root(slog::Discard, slog::o!());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `address`\n   --> src/services/commerce/checkout_service.rs:230:64\n    |\n230 |     fn calculate_shipping_rate(&self, method: &ShippingMethod, address: &Address) -> Result<ShippingRate, ServiceError> {\n    |                                                                ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_address`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":8202,"byte_start":8195,"column_end":71,"column_start":64,"expansion":null,"file_name":"src/services/commerce/checkout_service.rs","is_primary":true,"label":null,"line_end":230,"line_start":230,"suggested_replacement":"_address","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":71,"highlight_start":64,"text":"    fn calculate_shipping_rate(&self, method: &ShippingMethod, address: &Address) -> Result<ShippingRate, ServiceError> {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `address`","spans":[{"byte_end":8202,"byte_start":8195,"column_end":71,"column_start":64,"expansion":null,"file_name":"src/services/commerce/checkout_service.rs","is_primary":true,"label":null,"line_end":230,"line_start":230,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":71,"highlight_start":64,"text":"    fn calculate_shipping_rate(&self, method: &ShippingMethod, address: &Address) -> Result<ShippingRate, ServiceError> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `address`\n   --> src/services/commerce/checkout_service.rs:250:48\n    |\n250 |     fn calculate_tax(&self, subtotal: Decimal, address: &Address) -> Result<Decimal, ServiceError> {\n    |                                                ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_address`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":8911,"byte_start":8904,"column_end":55,"column_start":48,"expansion":null,"file_name":"src/services/commerce/checkout_service.rs","is_primary":true,"label":null,"line_end":250,"line_start":250,"suggested_replacement":"_address","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":55,"highlight_start":48,"text":"    fn calculate_tax(&self, subtotal: Decimal, address: &Address) -> Result<Decimal, ServiceError> {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `address`","spans":[{"byte_end":8911,"byte_start":8904,"column_end":55,"column_start":48,"expansion":null,"file_name":"src/services/commerce/checkout_service.rs","is_primary":true,"label":null,"line_end":250,"line_start":250,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":48,"text":"    fn calculate_tax(&self, subtotal: Decimal, address: &Address) -> Result<Decimal, ServiceError> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `address`\n   --> src/services/commerce/agentic_checkout.rs:283:9\n    |\n283 |         address: Option<&Address>,\n    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_address`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":9527,"byte_start":9520,"column_end":16,"column_start":9,"expansion":null,"file_name":"src/services/commerce/agentic_checkout.rs","is_primary":true,"label":null,"line_end":283,"line_start":283,"suggested_replacement":"_address","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":9,"text":"        address: Option<&Address>,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `address`","spans":[{"byte_end":9527,"byte_start":9520,"column_end":16,"column_start":9,"expansion":null,"file_name":"src/services/commerce/agentic_checkout.rs","is_primary":true,"label":null,"line_end":283,"line_start":283,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":9,"text":"        address: Option<&Address>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `current_otel_ctx`\n   --> src/tracing/mod.rs:368:13\n    |\n368 |         let current_otel_ctx = OtelContext::current();\n    |             ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_otel_ctx`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":11046,"byte_start":11030,"column_end":29,"column_start":13,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":368,"line_start":368,"suggested_replacement":"_current_otel_ctx","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":29,"highlight_start":13,"text":"        let current_otel_ctx = OtelContext::current();"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `current_otel_ctx`","spans":[{"byte_end":11046,"byte_start":11030,"column_end":29,"column_start":13,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":368,"line_start":368,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":13,"text":"        let current_otel_ctx = OtelContext::current();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: variable does not need to be mutable\n   --> src/tracing/mod.rs:467:17\n    |\n467 |             let mut response = match result {\n    |                 ----^^^^^^^^\n    |                 |\n    |                 help: remove this `mut`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove this `mut`","rendered":null,"spans":[{"byte_end":14905,"byte_start":14901,"column_end":21,"column_start":17,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":467,"line_start":467,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":21,"highlight_start":17,"text":"            let mut response = match result {"}]}]}],"code":{"code":"unused_mut","explanation":null},"level":"warning","message":"variable does not need to be mutable","spans":[{"byte_end":14913,"byte_start":14901,"column_end":29,"column_start":17,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":467,"line_start":467,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":17,"text":"            let mut response = match result {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `service_name`\n   --> src/tracing/mod.rs:792:30\n    |\n792 | pub fn setup_default_tracing(service_name: &str) -> Result<(), TracingError> {\n    |                              ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_service_name`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":29374,"byte_start":29362,"column_end":42,"column_start":30,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":792,"line_start":792,"suggested_replacement":"_service_name","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":42,"highlight_start":30,"text":"pub fn setup_default_tracing(service_name: &str) -> Result<(), TracingError> {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `service_name`","spans":[{"byte_end":29374,"byte_start":29362,"column_end":42,"column_start":30,"expansion":null,"file_name":"src/tracing/mod.rs","is_primary":true,"label":null,"line_end":792,"line_start":792,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":30,"text":"pub fn setup_default_tracing(service_name: &str) -> Result<(), TracingError> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0061, E0063, E0271, E0277, E0283, E0308, E0433, E0559, E0560...\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0061, E0063, E0271, E0277, E0283, E0308, E0433, E0559, E0560...","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/dom/stateset-api#0.1.0","manifest_path":"/home/dom/stateset-api/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stateset_api","src_path":"/home/dom/stateset-api/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0061`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0061`.","spans":[]}}
{"reason":"build-finished","success":false}
